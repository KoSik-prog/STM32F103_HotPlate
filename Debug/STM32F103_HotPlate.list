
STM32F103_HotPlate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001754  08007c38  08007c38  00017c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800938c  0800938c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800938c  0800938c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800938c  0800938c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001e4  08009578  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08009578  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001052d  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002690  00000000  00000000  0003073a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001933a  00000000  00000000  00033dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010ff6  00000000  00000000  0004d112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008e9e5  00000000  00000000  0005e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ecaed  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ec8  00000000  00000000  000ecb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b0  00000000  00000000  000eda08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c20 	.word	0x08007c20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007c20 	.word	0x08007c20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a98:	d105      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		oledRefreshActiveFlag = 1;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
		oledRefreshAll(&hspi1);
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000aa2:	f000 fceb 	bl	800147c <oledRefreshAll>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000728 	.word	0x20000728
 8000ab4:	20000200 	.word	0x20000200

08000ab8 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	oledRefreshAll(&hspi1);
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <HAL_SPI_TxCpltCallback+0x18>)
 8000ac2:	f000 fcdb 	bl	800147c <oledRefreshAll>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000200 	.word	0x20000200

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f001 f99d 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f847 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 fadb 	bl	800109c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae6:	f000 fabb 	bl	8001060 <MX_DMA_Init>
  MX_SPI1_Init();
 8000aea:	f000 f89d 	bl	8000c28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000aee:	f000 f8d1 	bl	8000c94 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000af2:	f000 f905 	bl	8000d00 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000af6:	f000 f987 	bl	8000e08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000afa:	f000 f9d1 	bl	8000ea0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000afe:	f000 fa29 	bl	8000f54 <MX_TIM4_Init>
  MX_USB_PCD_Init();
 8000b02:	f000 fa8b 	bl	800101c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  	oledInit(&hspi1, 1);
 8000b06:	2101      	movs	r1, #1
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <main+0x84>)
 8000b0a:	f000 fbb3 	bl	8001274 <oledInit>

  	sprintf((char*)buf,"HOT");
 8000b0e:	4913      	ldr	r1, [pc, #76]	; (8000b5c <main+0x88>)
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <main+0x8c>)
 8000b12:	f004 fe0d 	bl	8005730 <siprintf>
  	oledDispTxt(40, 0, buf, Font_16x26, 1);
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <main+0x90>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	9200      	str	r2, [sp, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <main+0x8c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	2028      	movs	r0, #40	; 0x28
 8000b28:	f000 fdf9 	bl	800171e <oledDispTxt>

  	sprintf((char*)buf,"PLATE");
 8000b2c:	490e      	ldr	r1, [pc, #56]	; (8000b68 <main+0x94>)
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <main+0x8c>)
 8000b30:	f004 fdfe 	bl	8005730 <siprintf>
  	oledDispTxt(20, 35, buf, Font_16x26, 1);
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <main+0x90>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <main+0x8c>)
 8000b42:	2123      	movs	r1, #35	; 0x23
 8000b44:	2014      	movs	r0, #20
 8000b46:	f000 fdea 	bl	800171e <oledDispTxt>

  	oledRefreshActiveFlag = 1;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <main+0x98>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
  	oledRefreshAll(&hspi1);
 8000b50:	4801      	ldr	r0, [pc, #4]	; (8000b58 <main+0x84>)
 8000b52:	f000 fc93 	bl	800147c <oledRefreshAll>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <main+0x82>
 8000b58:	20000200 	.word	0x20000200
 8000b5c:	08007c38 	.word	0x08007c38
 8000b60:	20000700 	.word	0x20000700
 8000b64:	20000000 	.word	0x20000000
 8000b68:	08007c3c 	.word	0x08007c3c
 8000b6c:	20000728 	.word	0x20000728

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	2228      	movs	r2, #40	; 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 f96e 	bl	8004e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bbe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 ffff 	bl	8002bcc <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bd4:	f000 faee 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fa6b 	bl	80030d0 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c00:	f000 fad8 	bl	80011b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c04:	2310      	movs	r3, #16
 8000c06:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fbc6 	bl	80033a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c1a:	f000 facb 	bl	80011b4 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3750      	adds	r7, #80	; 0x50
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <MX_SPI1_Init+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c74:	220a      	movs	r2, #10
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_SPI1_Init+0x64>)
 8000c7a:	f002 fc47 	bl	800350c <HAL_SPI_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c84:	f000 fa96 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000200 	.word	0x20000200
 8000c90:	40013000 	.word	0x40013000

08000c94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_SPI2_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce6:	f002 fc11 	bl	800350c <HAL_SPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cf0:	f000 fa60 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000258 	.word	0x20000258
 8000cfc:	40003800 	.word	0x40003800

08000d00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b092      	sub	sp, #72	; 0x48
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2220      	movs	r2, #32
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 f898 	bl	8004e60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d32:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <MX_TIM1_Init+0x104>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d5c:	4828      	ldr	r0, [pc, #160]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d5e:	f003 f90e 	bl	8003f7e <HAL_TIM_OC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000d68:	f000 fa24 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d7c:	f003 ff24 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000d86:	f000 fa15 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000db0:	f003 fa8c 	bl	80042cc <HAL_TIM_OC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000dba:	f000 f9fb 	bl	80011b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000de2:	f003 ff4f 	bl	8004c84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000dec:	f000 f9e2 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000df2:	f000 fe37 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3748      	adds	r7, #72	; 0x48
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200002f4 	.word	0x200002f4
 8000e04:	40012c00 	.word	0x40012c00

08000e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 219;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e3c:	22db      	movs	r2, #219	; 0xdb
 8000e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e4e:	f003 f847 	bl	8003ee0 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e58:	f000 f9ac 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e6a:	f003 fb45 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e74:	f000 f99e 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e86:	f003 fe9f 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f000 f990 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000033c 	.word	0x2000033c

08000ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000ec4:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <MX_TIM3_Init+0xb0>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee8:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000eea:	f003 f897 	bl	800401c <HAL_TIM_PWM_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ef4:	f000 f95e 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4619      	mov	r1, r3
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000f08:	f003 fe5e 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f12:	f000 f94f 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	; 0x60
 8000f18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000f2e:	f003 fa25 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f38:	f000 f93c 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MX_TIM3_Init+0xac>)
 8000f3e:	f000 fd91 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000384 	.word	0x20000384
 8000f50:	40000400 	.word	0x40000400

08000f54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <MX_TIM4_Init+0xc4>)
 8000f7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f9c:	481d      	ldr	r0, [pc, #116]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000f9e:	f003 f83d 	bl	800401c <HAL_TIM_PWM_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000fa8:	f000 f904 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4816      	ldr	r0, [pc, #88]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000fbc:	f003 fe04 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000fc6:	f000 f8f5 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fca:	2360      	movs	r3, #96	; 0x60
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000fe2:	f003 f9cb 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000fec:	f000 f8e2 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <MX_TIM4_Init+0xc0>)
 8000ff8:	f003 f9c0 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001002:	f000 f8d7 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <MX_TIM4_Init+0xc0>)
 8001008:	f000 fd2c 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200003cc 	.word	0x200003cc
 8001018:	40000800 	.word	0x40000800

0800101c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <MX_USB_PCD_Init+0x40>)
 8001024:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 8001028:	2208      	movs	r2, #8
 800102a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 800102e:	2202      	movs	r2, #2
 8001030:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_USB_PCD_Init+0x3c>)
 8001046:	f001 fcb5 	bl	80029b4 <HAL_PCD_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001050:	f000 f8b0 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000414 	.word	0x20000414
 800105c:	40005c00 	.word	0x40005c00

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_DMA_Init+0x38>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <MX_DMA_Init+0x38>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_DMA_Init+0x38>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f001 f825 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001088:	200d      	movs	r0, #13
 800108a:	f001 f83e 	bl	800210a <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a2e      	ldr	r2, [pc, #184]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <MX_GPIO_Init+0x104>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <MX_GPIO_Init+0x104>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTTON_1_Pin|MAX6675_2_CS_Pin|FAN1_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7141 	mov.w	r1, #772	; 0x304
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <MX_GPIO_Init+0x108>)
 8001118:	f001 fc34 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_RES_Pin|OLED_DC_Pin|MAX6675_1_CS_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f241 0107 	movw	r1, #4103	; 0x1007
 8001122:	4821      	ldr	r0, [pc, #132]	; (80011a8 <MX_GPIO_Init+0x10c>)
 8001124:	f001 fc2e 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AC_ZERO_Pin */
  GPIO_InitStruct.Pin = AC_ZERO_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_GPIO_Init+0x110>)
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AC_ZERO_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	481c      	ldr	r0, [pc, #112]	; (80011b0 <MX_GPIO_Init+0x114>)
 800113e:	f001 fa9d 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_1_Pin ENC_2_Pin */
  GPIO_InitStruct.Pin = ENC_1_Pin|ENC_2_Pin;
 8001142:	2303      	movs	r3, #3
 8001144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_GPIO_Init+0x110>)
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_GPIO_Init+0x108>)
 8001156:	f001 fa91 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin MAX6675_2_CS_Pin FAN1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|MAX6675_2_CS_Pin|FAN1_Pin;
 800115a:	f44f 7341 	mov.w	r3, #772	; 0x304
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_GPIO_Init+0x108>)
 8001174:	f001 fa82 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_RES_Pin OLED_DC_Pin MAX6675_1_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_RES_Pin|OLED_DC_Pin|MAX6675_1_CS_Pin;
 8001178:	f241 0307 	movw	r3, #4103	; 0x1007
 800117c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_GPIO_Init+0x10c>)
 8001192:	f001 fa73 	bl	800267c <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010800 	.word	0x40010800
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	10110000 	.word	0x10110000
 80011b0:	40011000 	.word	0x40011000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>

080011be <oledWriteSpi>:

uint8_t DispBuff [SSD1306_HEIGHT/8][SSD1306_TOTAL_WIDTH];



void oledWriteSpi(SPI_HandleTypeDef *hspi, unsigned char data){  // 5 - wszystkie razem
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, &data, 1,100);
 80011ca:	1cf9      	adds	r1, r7, #3
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	2201      	movs	r2, #1
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 fa1f 	bl	8003614 <HAL_SPI_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <chipSelect>:

void chipSelect(uint8_t lcd_nr, uint8_t param){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]
	if (lcd_nr == 0){
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <chipSelect+0x24>
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2101      	movs	r1, #1
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <chipSelect+0x40>)
 80011fe:	f001 fbc1 	bl	8002984 <HAL_GPIO_WritePin>
	} else if (lcd_nr == 5){
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
	}
}
 8001202:	e008      	b.n	8001216 <chipSelect+0x36>
	} else if (lcd_nr == 5){
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d105      	bne.n	8001216 <chipSelect+0x36>
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	461a      	mov	r2, r3
 800120e:	2101      	movs	r1, #1
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <chipSelect+0x40>)
 8001212:	f001 fbb7 	bl	8002984 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40010c00 	.word	0x40010c00

08001224 <oledWriteCmd>:

void oledWriteCmd(SPI_HandleTypeDef *hspi, uint8_t lcd_nr, unsigned char cmd){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
 8001230:	4613      	mov	r3, r2
 8001232:	70bb      	strb	r3, [r7, #2]
	chipSelect(lcd_nr, 1);
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ffd1 	bl	80011e0 <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <oledWriteCmd+0x4c>)
 8001244:	f001 fb9e 	bl	8002984 <HAL_GPIO_WritePin>
	chipSelect(lcd_nr, 0);
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffc7 	bl	80011e0 <chipSelect>
	oledWriteSpi(hspi, cmd);
 8001252:	78bb      	ldrb	r3, [r7, #2]
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffb1 	bl	80011be <oledWriteSpi>
	chipSelect(lcd_nr, 1);
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffbd 	bl	80011e0 <chipSelect>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40010c00 	.word	0x40010c00

08001274 <oledInit>:
	chipSelect(lcd_nr, 0);
	oledWriteSpi(hspi, data);
	chipSelect(lcd_nr, 1);
}

void oledInit(SPI_HandleTypeDef *hspi, uint8_t lcd_nr){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	chipSelect(lcd_nr, 1);
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	2101      	movs	r1, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffab 	bl	80011e0 <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2104      	movs	r1, #4
 800128e:	4866      	ldr	r0, [pc, #408]	; (8001428 <oledInit+0x1b4>)
 8001290:	f001 fb78 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2102      	movs	r1, #2
 8001298:	4863      	ldr	r0, [pc, #396]	; (8001428 <oledInit+0x1b4>)
 800129a:	f001 fb73 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fe1c 	bl	8001edc <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	485f      	ldr	r0, [pc, #380]	; (8001428 <oledInit+0x1b4>)
 80012aa:	f001 fb6b 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012ae:	200a      	movs	r0, #10
 80012b0:	f000 fe14 	bl	8001edc <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2102      	movs	r1, #2
 80012b8:	485b      	ldr	r0, [pc, #364]	; (8001428 <oledInit+0x1b4>)
 80012ba:	f001 fb63 	bl	8002984 <HAL_GPIO_WritePin>
	oledWriteCmd(hspi, lcd_nr, 0xAE); //wy��cz panel OLED
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	22ae      	movs	r2, #174	; 0xae
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffad 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x00); //adres koluny LOW
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffa7 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x10); //adres koluny HIGH
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2210      	movs	r2, #16
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffa1 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x40); //adres startu linii
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff9b 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x20); //tryb adresowania strony
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2220      	movs	r2, #32
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff95 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x02);
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff8f 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x81); //ustaw kontrast
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	2281      	movs	r2, #129	; 0x81
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff89 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xCF);
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	22cf      	movs	r2, #207	; 0xcf
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff83 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA1); //ustaw remapowanie
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	22a1      	movs	r2, #161	; 0xa1
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff7d 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xC0); //kierunek skanowania
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	22c0      	movs	r2, #192	; 0xc0
 800132e:	4619      	mov	r1, r3
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff77 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA6); //wy�wietlanie bez inwersji
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	22a6      	movs	r2, #166	; 0xa6
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff71 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA8); //ustaw multiplex ratio
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	22a8      	movs	r2, #168	; 0xa8
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff6b 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x3F); //1/64
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	223f      	movs	r2, #63	; 0x3f
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff65 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD3); //ustaw display offset
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	22d3      	movs	r2, #211	; 0xd3
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff5f 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x00); //bez offsetu
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff59 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD5); //ustaw divide ratio/cz�stotliwo��oscylatora
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	22d5      	movs	r2, #213	; 0xd5
 8001376:	4619      	mov	r1, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff53 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x80); //100ramek/sec
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff4d 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD9); //ustaw okres pre charge
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	22d9      	movs	r2, #217	; 0xd9
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff47 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xF1); //pre charge 15 cykli, discharge 1cykl
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	22f1      	movs	r2, #241	; 0xf1
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff41 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xDA); //konfiguracja wyprowadze�sterownika
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	22da      	movs	r2, #218	; 0xda
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff3b 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x12);
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	2212      	movs	r2, #18
 80013b2:	4619      	mov	r1, r3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff35 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xDB); //ustawienie vcomh
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	22db      	movs	r2, #219	; 0xdb
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff2f 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x40);
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	4619      	mov	r1, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x8D); //ustawienie Charge Pump
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	228d      	movs	r2, #141	; 0x8d
 80013d6:	4619      	mov	r1, r3
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff23 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x14);
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	2214      	movs	r2, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff1d 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA4); //�pod��czenie� zawarto�ci RAMdo panelu OLED
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	22a4      	movs	r2, #164	; 0xa4
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff17 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA6); //wy��czenie inwersji wy�wietlania
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	22a6      	movs	r2, #166	; 0xa6
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff11 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xAF); //w��cza wy�wietlacz
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	22af      	movs	r2, #175	; 0xaf
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff0b 	bl	8001224 <oledWriteCmd>
	oledDisplayCls(0);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f80c 	bl	800142c <oledDisplayCls>
	chipSelect(lcd_nr, 0);
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fee1 	bl	80011e0 <chipSelect>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010c00 	.word	0x40010c00

0800142c <oledDisplayCls>:

void oledDisplayCls(unsigned char fill){
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	 uint16_t i, j;

	 for (i = 0; i < 8; i ++) {
 8001436:	2300      	movs	r3, #0
 8001438:	81fb      	strh	r3, [r7, #14]
 800143a:	e013      	b.n	8001464 <oledDisplayCls+0x38>
		 for (j = 0; j < SSD1306_TOTAL_WIDTH; j ++) {
 800143c:	2300      	movs	r3, #0
 800143e:	81bb      	strh	r3, [r7, #12]
 8001440:	e00a      	b.n	8001458 <oledDisplayCls+0x2c>
			 DispBuff[i][j] = fill;
 8001442:	89fa      	ldrh	r2, [r7, #14]
 8001444:	89bb      	ldrh	r3, [r7, #12]
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <oledDisplayCls+0x4c>)
 8001448:	01d2      	lsls	r2, r2, #7
 800144a:	440a      	add	r2, r1
 800144c:	4413      	add	r3, r2
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	701a      	strb	r2, [r3, #0]
		 for (j = 0; j < SSD1306_TOTAL_WIDTH; j ++) {
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	3301      	adds	r3, #1
 8001456:	81bb      	strh	r3, [r7, #12]
 8001458:	89bb      	ldrh	r3, [r7, #12]
 800145a:	2b7f      	cmp	r3, #127	; 0x7f
 800145c:	d9f1      	bls.n	8001442 <oledDisplayCls+0x16>
	 for (i = 0; i < 8; i ++) {
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	81fb      	strh	r3, [r7, #14]
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	2b07      	cmp	r3, #7
 8001468:	d9e8      	bls.n	800143c <oledDisplayCls+0x10>
		 }
	 }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000072c 	.word	0x2000072c

0800147c <oledRefreshAll>:

void oledRefreshAll(SPI_HandleTypeDef *hspi){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if(oledRefreshActiveFlag == 1){
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <oledRefreshAll+0x80>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d133      	bne.n	80014f4 <oledRefreshAll+0x78>
		if (lcd_line > 7) {
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <oledRefreshAll+0x84>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d911      	bls.n	80014b8 <oledRefreshAll+0x3c>
			lcd_line = 0;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <oledRefreshAll+0x84>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
			chipSelect(act_lcd, 1);
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <oledRefreshAll+0x88>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe9d 	bl	80011e0 <chipSelect>
			HAL_SPI_DMAStop(hspi);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f002 faa6 	bl	80039f8 <HAL_SPI_DMAStop>
			act_lcd++;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <oledRefreshAll+0x88>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <oledRefreshAll+0x88>)
 80014b6:	701a      	strb	r2, [r3, #0]
		}
		if (act_lcd > 1) {
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <oledRefreshAll+0x88>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d90a      	bls.n	80014d6 <oledRefreshAll+0x5a>
			act_lcd = 0;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <oledRefreshAll+0x88>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
			licznik++;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <oledRefreshAll+0x8c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <oledRefreshAll+0x8c>)
 80014ce:	6013      	str	r3, [r2, #0]
			oledRefreshActiveFlag=0;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <oledRefreshAll+0x80>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
		}
		oledRefresh(hspi, act_lcd, lcd_line);
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <oledRefreshAll+0x88>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <oledRefreshAll+0x84>)
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	b292      	uxth	r2, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f812 	bl	800150c <oledRefresh>
		lcd_line++;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <oledRefreshAll+0x84>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <oledRefreshAll+0x84>)
 80014f2:	701a      	strb	r2, [r3, #0]
	}
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000728 	.word	0x20000728
 8001500:	20000721 	.word	0x20000721
 8001504:	20000720 	.word	0x20000720
 8001508:	20000724 	.word	0x20000724

0800150c <oledRefresh>:

void oledRefresh(SPI_HandleTypeDef *hspi, uint8_t lcd_nr, uint16_t line){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
 8001518:	4613      	mov	r3, r2
 800151a:	803b      	strh	r3, [r7, #0]
	oledWriteCmd(hspi, lcd_nr, 0xB0 + line);
 800151c:	883b      	ldrh	r3, [r7, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3b50      	subs	r3, #80	; 0x50
 8001522:	b2da      	uxtb	r2, r3
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	4619      	mov	r1, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fe7b 	bl	8001224 <oledWriteCmd>
	oledSetColStart(hspi, lcd_nr);
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f824 	bl	8001580 <oledSetColStart>
	chipSelect(lcd_nr, lcd_nr);
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe4e 	bl	80011e0 <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2104      	movs	r1, #4
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <oledRefresh+0x6c>)
 800154a:	f001 fa1b 	bl	8002984 <HAL_GPIO_WritePin>
	chipSelect(lcd_nr, 0);
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe44 	bl	80011e0 <chipSelect>
	HAL_SPI_Transmit_DMA(hspi, &DispBuff[line][0+(lcd_nr*128)], 128);
 8001558:	883a      	ldrh	r2, [r7, #0]
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	01db      	lsls	r3, r3, #7
 800155e:	01d2      	lsls	r2, r2, #7
 8001560:	4413      	add	r3, r2
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <oledRefresh+0x70>)
 8001564:	4413      	add	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f002 f98e 	bl	800388c <HAL_SPI_Transmit_DMA>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010c00 	.word	0x40010c00
 800157c:	2000072c 	.word	0x2000072c

08001580 <oledSetColStart>:

void oledSetColStart(SPI_HandleTypeDef *hspi, uint8_t lcd_nr){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
	oledWriteCmd(hspi, lcd_nr, 0x00); //low
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fe46 	bl	8001224 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x10); //high
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2210      	movs	r2, #16
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fe40 	bl	8001224 <oledWriteCmd>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <oledDrawPoint>:

void oledDrawPoint(uint16_t x, uint16_t y, unsigned char p){
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	460b      	mov	r3, r1
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	70fb      	strb	r3, [r7, #3]
	 uint16_t chPos, chBx, chTemp = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	81fb      	strh	r3, [r7, #14]

	 if (x > (5*127) || y > 63) return;
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 80015c8:	d242      	bcs.n	8001650 <oledDrawPoint+0xa4>
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	2b3f      	cmp	r3, #63	; 0x3f
 80015ce:	d83f      	bhi.n	8001650 <oledDrawPoint+0xa4>
	 chPos = 7 - y / 8;
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	81bb      	strh	r3, [r7, #12]
	 chBx = y % 8;
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	817b      	strh	r3, [r7, #10]
	 chTemp = 1 << (7 - chBx);
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2201      	movs	r2, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	81fb      	strh	r3, [r7, #14]
	 if (p) {
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <oledDrawPoint+0x74>
		 DispBuff[chPos][x] |= chTemp;
 80015f8:	89ba      	ldrh	r2, [r7, #12]
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	4917      	ldr	r1, [pc, #92]	; (800165c <oledDrawPoint+0xb0>)
 80015fe:	01d2      	lsls	r2, r2, #7
 8001600:	440a      	add	r2, r1
 8001602:	4413      	add	r3, r2
 8001604:	7818      	ldrb	r0, [r3, #0]
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	89ba      	ldrh	r2, [r7, #12]
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	4301      	orrs	r1, r0
 8001610:	b2c8      	uxtb	r0, r1
 8001612:	4912      	ldr	r1, [pc, #72]	; (800165c <oledDrawPoint+0xb0>)
 8001614:	01d2      	lsls	r2, r2, #7
 8001616:	440a      	add	r2, r1
 8001618:	4413      	add	r3, r2
 800161a:	4602      	mov	r2, r0
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e018      	b.n	8001652 <oledDrawPoint+0xa6>
	 } else {
		 DispBuff[chPos][x] &= ~chTemp;
 8001620:	89ba      	ldrh	r2, [r7, #12]
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	490d      	ldr	r1, [pc, #52]	; (800165c <oledDrawPoint+0xb0>)
 8001626:	01d2      	lsls	r2, r2, #7
 8001628:	440a      	add	r2, r1
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b25a      	sxtb	r2, r3
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	b25b      	sxtb	r3, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	b25b      	sxtb	r3, r3
 8001638:	4013      	ands	r3, r2
 800163a:	b259      	sxtb	r1, r3
 800163c:	89ba      	ldrh	r2, [r7, #12]
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	b2c8      	uxtb	r0, r1
 8001642:	4906      	ldr	r1, [pc, #24]	; (800165c <oledDrawPoint+0xb0>)
 8001644:	01d2      	lsls	r2, r2, #7
 8001646:	440a      	add	r2, r1
 8001648:	4413      	add	r3, r2
 800164a:	4602      	mov	r2, r0
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e000      	b.n	8001652 <oledDrawPoint+0xa6>
	 if (x > (5*127) || y > 63) return;
 8001650:	bf00      	nop
	 }
}
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000072c 	.word	0x2000072c

08001660 <oledWriteChar>:
    oledDrawPoint(xc+1, yc-1, colour);
    oledDrawPoint(xc-1, yc+1, colour);
    oledDrawPoint(xc-1, yc-1, colour);
}

char oledWriteChar(uint16_t x, uint16_t y, uint8_t ch, FontDef Font, uint8_t mode){
 8001660:	b082      	sub	sp, #8
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
 800166e:	460b      	mov	r3, r1
 8001670:	80bb      	strh	r3, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	for (i = 0; i < Font.FontHeight; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e042      	b.n	8001702 <oledWriteChar+0xa2>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800167c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	3b20      	subs	r3, #32
 8001682:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4619      	mov	r1, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	440b      	add	r3, r1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font.FontWidth+1; j++)
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	e027      	b.n	80016ee <oledWriteChar+0x8e>
		{
			if ((b << j) & 0x8000)
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00e      	beq.n	80016cc <oledWriteChar+0x6c>
			{
				oledDrawPoint(x + j, (y + i), 1);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	4413      	add	r3, r2
 80016b6:	b298      	uxth	r0, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2201      	movs	r2, #1
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff ff71 	bl	80015ac <oledDrawPoint>
 80016ca:	e00d      	b.n	80016e8 <oledWriteChar+0x88>
			}
			else
			{
				oledDrawPoint(x + j, (y + i), 0);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	4413      	add	r3, r2
 80016d4:	b298      	uxth	r0, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff ff62 	bl	80015ac <oledDrawPoint>
		for (j = 0; j < Font.FontWidth+1; j++)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	3301      	adds	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f2:	3301      	adds	r3, #1
 80016f4:	461a      	mov	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d3d0      	bcc.n	800169e <oledWriteChar+0x3e>
	for (i = 0; i < Font.FontHeight; i++)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001706:	461a      	mov	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4293      	cmp	r3, r2
 800170c:	d3b6      	bcc.n	800167c <oledWriteChar+0x1c>
			}
		}
	}
	return ch;
 800170e:	78fb      	ldrb	r3, [r7, #3]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800171a:	b002      	add	sp, #8
 800171c:	4770      	bx	lr

0800171e <oledDispTxt>:
	}
	return ch;
}


void oledDispTxt(uint16_t x, uint16_t y, const uint8_t *txt, FontDef Font, uint8_t mode){
 800171e:	b082      	sub	sp, #8
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af02      	add	r7, sp, #8
 8001726:	603a      	str	r2, [r7, #0]
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	80bb      	strh	r3, [r7, #4]
	 while (*txt != '\0') {
 8001732:	e02d      	b.n	8001790 <oledDispTxt+0x72>
		 if (x > (SSD1306_TOTAL_WIDTH - Font.FontWidth / 2)) {
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	7d3b      	ldrb	r3, [r7, #20]
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001740:	429a      	cmp	r2, r3
 8001742:	dd10      	ble.n	8001766 <oledDispTxt+0x48>
			 x = 0; y += Font.FontWidth;
 8001744:	2300      	movs	r3, #0
 8001746:	80fb      	strh	r3, [r7, #6]
 8001748:	7d3b      	ldrb	r3, [r7, #20]
 800174a:	b29a      	uxth	r2, r3
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	80bb      	strh	r3, [r7, #4]
			 if (y > (SSD1306_HEIGHT - Font.FontHeight)) {
 8001752:	88ba      	ldrh	r2, [r7, #4]
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800175a:	429a      	cmp	r2, r3
 800175c:	dd03      	ble.n	8001766 <oledDispTxt+0x48>
				 y = x = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	80bb      	strh	r3, [r7, #4]
			 }
		 }
		 oledWriteChar(x, y, *txt, Font, mode);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	88b9      	ldrh	r1, [r7, #4]
 800176c:	88f8      	ldrh	r0, [r7, #6]
 800176e:	7f3b      	ldrb	r3, [r7, #28]
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f7ff ff72 	bl	8001660 <oledWriteChar>
		 x += Font.FontWidth+1;
 800177c:	7d3b      	ldrb	r3, [r7, #20]
 800177e:	b29a      	uxth	r2, r3
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4413      	add	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	3301      	adds	r3, #1
 8001788:	80fb      	strh	r3, [r7, #6]
		 txt ++;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	603b      	str	r3, [r7, #0]
	 while (*txt != '\0') {
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1cd      	bne.n	8001734 <oledDispTxt+0x16>
	 }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017a4:	b002      	add	sp, #8
 80017a6:	4770      	bx	lr

080017a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_MspInit+0x5c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6193      	str	r3, [r2, #24]
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_MspInit+0x5c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_MspInit+0x60>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_MspInit+0x60>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000

0800180c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_SPI_MspInit+0x154>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d15e      	bne.n	80018ea <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <HAL_SPI_MspInit+0x158>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_SPI_MspInit+0x158>)
 8001832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_SPI_MspInit+0x158>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_SPI_MspInit+0x158>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_SPI_MspInit+0x158>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_SPI_MspInit+0x158>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800185c:	23a0      	movs	r3, #160	; 0xa0
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	4619      	mov	r1, r3
 800186e:	483e      	ldr	r0, [pc, #248]	; (8001968 <HAL_SPI_MspInit+0x15c>)
 8001870:	f000 ff04 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	4619      	mov	r1, r3
 8001886:	4838      	ldr	r0, [pc, #224]	; (8001968 <HAL_SPI_MspInit+0x15c>)
 8001888:	f000 fef8 	bl	800267c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_SPI_MspInit+0x160>)
 800188e:	4a38      	ldr	r2, [pc, #224]	; (8001970 <HAL_SPI_MspInit+0x164>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_SPI_MspInit+0x160>)
 8001894:	2210      	movs	r2, #16
 8001896:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_SPI_MspInit+0x160>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018bc:	482b      	ldr	r0, [pc, #172]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018be:	f000 fc3f 	bl	8002140 <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80018c8:	f7ff fc74 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018d0:	649a      	str	r2, [r3, #72]	; 0x48
 80018d2:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_SPI_MspInit+0x160>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2023      	movs	r0, #35	; 0x23
 80018de:	f000 fbf8 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018e2:	2023      	movs	r0, #35	; 0x23
 80018e4:	f000 fc11 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018e8:	e036      	b.n	8001958 <HAL_SPI_MspInit+0x14c>
  else if(hspi->Instance==SPI2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_SPI_MspInit+0x168>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d131      	bne.n	8001958 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_SPI_MspInit+0x158>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_SPI_MspInit+0x158>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fe:	61d3      	str	r3, [r2, #28]
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_SPI_MspInit+0x158>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_SPI_MspInit+0x158>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_SPI_MspInit+0x158>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_SPI_MspInit+0x158>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001924:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	4619      	mov	r1, r3
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <HAL_SPI_MspInit+0x16c>)
 800193a:	f000 fe9f 	bl	800267c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800193e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4619      	mov	r1, r3
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <HAL_SPI_MspInit+0x16c>)
 8001954:	f000 fe92 	bl	800267c <HAL_GPIO_Init>
}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40013000 	.word	0x40013000
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800
 800196c:	200002b0 	.word	0x200002b0
 8001970:	40020030 	.word	0x40020030
 8001974:	40003800 	.word	0x40003800
 8001978:	40010c00 	.word	0x40010c00

0800197c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_TIM_OC_MspInit+0x34>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10b      	bne.n	80019a6 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_TIM_OC_MspInit+0x38>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_TIM_OC_MspInit+0x38>)
 8001994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_TIM_OC_MspInit+0x38>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d113      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_TIM_Base_MspInit+0x44>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_TIM_Base_MspInit+0x44>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_TIM_Base_MspInit+0x44>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	201c      	movs	r0, #28
 80019e8:	f000 fb73 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ec:	201c      	movs	r0, #28
 80019ee:	f000 fb8c 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_TIM_PWM_MspInit+0x58>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a2a:	e010      	b.n	8001a4e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_TIM_PWM_MspInit+0x60>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10b      	bne.n	8001a4e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40000800 	.word	0x40000800

08001a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_TIM_MspPostInit+0xf8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d119      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a35      	ldr	r2, [pc, #212]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = FAN2_Pin;
 8001a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FAN2_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482c      	ldr	r0, [pc, #176]	; (8001b64 <HAL_TIM_MspPostInit+0x100>)
 8001ab2:	f000 fde3 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ab6:	e04c      	b.n	8001b52 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2a      	ldr	r2, [pc, #168]	; (8001b68 <HAL_TIM_MspPostInit+0x104>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12a      	bne.n	8001b18 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001ada:	2310      	movs	r3, #16
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	481f      	ldr	r0, [pc, #124]	; (8001b6c <HAL_TIM_MspPostInit+0x108>)
 8001aee:	f000 fdc5 	bl	800267c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_TIM_MspPostInit+0x10c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_TIM_MspPostInit+0x10c>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	6053      	str	r3, [r2, #4]
}
 8001b16:	e01c      	b.n	8001b52 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_TIM_MspPostInit+0x110>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d117      	bne.n	8001b52 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_TIM_MspPostInit+0xfc>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AC_PWM1_Pin|AC_PWM2_Pin;
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <HAL_TIM_MspPostInit+0x108>)
 8001b4e:	f000 fd95 	bl	800267c <HAL_GPIO_Init>
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40010c00 	.word	0x40010c00
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40000800 	.word	0x40000800

08001b78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_PCD_MspInit+0x34>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_PCD_MspInit+0x38>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_PCD_MspInit+0x38>)
 8001b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_PCD_MspInit+0x38>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40005c00 	.word	0x40005c00
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f953 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Channel3_IRQHandler+0x10>)
 8001c0a:	f000 fc03 	bl	8002414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002b0 	.word	0x200002b0

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f002 fa4c 	bl	80040ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000033c 	.word	0x2000033c

08001c2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <SPI1_IRQHandler+0x10>)
 8001c32:	f001 ff21 	bl	8003a78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000200 	.word	0x20000200

08001c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <_kill>:

int _kill(int pid, int sig)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c58:	f003 f8d8 	bl	8004e0c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2216      	movs	r2, #22
 8001c60:	601a      	str	r2, [r3, #0]
	return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_exit>:

void _exit (int status)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c76:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffe7 	bl	8001c4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c80:	e7fe      	b.n	8001c80 <_exit+0x12>

08001c82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e00a      	b.n	8001caa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c94:	f3af 8000 	nop.w
 8001c98:	4601      	mov	r1, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	b2ca      	uxtb	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbf0      	blt.n	8001c94 <_read+0x12>
	}

return len;
 8001cb2:	687b      	ldr	r3, [r7, #4]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e009      	b.n	8001ce2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf1      	blt.n	8001cce <_write+0x12>
	}
	return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_close>:

int _close(int file)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_isatty>:

int _isatty(int file)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	return 1;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <_sbrk+0x5c>)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <_sbrk+0x60>)
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_sbrk+0x64>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <_sbrk+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d207      	bcs.n	8001d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d84:	f003 f842 	bl	8004e0c <__errno>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e009      	b.n	8001da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <_sbrk+0x64>)
 8001da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20005000 	.word	0x20005000
 8001db4:	00000400 	.word	0x00000400
 8001db8:	20000b2c 	.word	0x20000b2c
 8001dbc:	20000b48 	.word	0x20000b48

08001dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001df2:	f7ff ffe5 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df6:	f003 f80f 	bl	8004e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7fe fe6b 	bl	8000ad4 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e08:	08009394 	.word	0x08009394
  ldr r2, =_sbss
 8001e0c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e10:	20000b44 	.word	0x20000b44

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f947 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fcb8 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f95f 	bl	8002126 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f927 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000010 	.word	0x20000010
 8001ec4:	20000b30 	.word	0x20000b30

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20000b30 	.word	0x20000b30

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffe0 	bl	8001ec8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000010 	.word	0x20000010

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4906      	ldr	r1, [pc, #24]	; (8001fbc <__NVIC_EnableIRQ+0x34>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff90 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff2d 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff42 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff90 	bl	8002014 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5f 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff35 	bl	8001f88 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e043      	b.n	80021de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_DMA_Init+0xa8>)
 800215e:	4413      	add	r3, r2
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_DMA_Init+0xac>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_Init+0xb0>)
 8002172:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800218a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800218e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	bffdfff8 	.word	0xbffdfff8
 80021ec:	cccccccd 	.word	0xcccccccd
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_DMA_Start_IT+0x20>
 8002210:	2302      	movs	r3, #2
 8002212:	e04a      	b.n	80022aa <HAL_DMA_Start_IT+0xb6>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002222:	2b01      	cmp	r3, #1
 8002224:	d13a      	bne.n	800229c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f9e8 	bl	8002620 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 020e 	orr.w	r2, r2, #14
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e00f      	b.n	800228a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0204 	bic.w	r2, r2, #4
 8002278:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 020a 	orr.w	r2, r2, #10
 8002288:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e005      	b.n	80022a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2204      	movs	r2, #4
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e020      	b.n	800231c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020e 	bic.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
	...

08002328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800233a:	2b02      	cmp	r3, #2
 800233c:	d005      	beq.n	800234a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e051      	b.n	80023ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020e 	bic.w	r2, r2, #14
 8002358:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_DMA_Abort_IT+0xd0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d029      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xa0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <HAL_DMA_Abort_IT+0xd4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x9c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_DMA_Abort_IT+0xd8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01a      	beq.n	80023be <HAL_DMA_Abort_IT+0x96>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_DMA_Abort_IT+0xdc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x90>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_DMA_Abort_IT+0xe0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00a      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x8a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_DMA_Abort_IT+0xe4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d102      	bne.n	80023ac <HAL_DMA_Abort_IT+0x84>
 80023a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023aa:	e00e      	b.n	80023ca <HAL_DMA_Abort_IT+0xa2>
 80023ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b0:	e00b      	b.n	80023ca <HAL_DMA_Abort_IT+0xa2>
 80023b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b6:	e008      	b.n	80023ca <HAL_DMA_Abort_IT+0xa2>
 80023b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023bc:	e005      	b.n	80023ca <HAL_DMA_Abort_IT+0xa2>
 80023be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c2:	e002      	b.n	80023ca <HAL_DMA_Abort_IT+0xa2>
 80023c4:	2310      	movs	r3, #16
 80023c6:	e000      	b.n	80023ca <HAL_DMA_Abort_IT+0xa2>
 80023c8:	2301      	movs	r3, #1
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_DMA_Abort_IT+0xe8>)
 80023cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
    } 
  }
  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020008 	.word	0x40020008
 80023fc:	4002001c 	.word	0x4002001c
 8002400:	40020030 	.word	0x40020030
 8002404:	40020044 	.word	0x40020044
 8002408:	40020058 	.word	0x40020058
 800240c:	4002006c 	.word	0x4002006c
 8002410:	40020000 	.word	0x40020000

08002414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2204      	movs	r2, #4
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d04f      	beq.n	80024dc <HAL_DMA_IRQHandler+0xc8>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04a      	beq.n	80024dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0204 	bic.w	r2, r2, #4
 8002462:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a66      	ldr	r2, [pc, #408]	; (8002604 <HAL_DMA_IRQHandler+0x1f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d029      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xae>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a65      	ldr	r2, [pc, #404]	; (8002608 <HAL_DMA_IRQHandler+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d022      	beq.n	80024be <HAL_DMA_IRQHandler+0xaa>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a63      	ldr	r2, [pc, #396]	; (800260c <HAL_DMA_IRQHandler+0x1f8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01a      	beq.n	80024b8 <HAL_DMA_IRQHandler+0xa4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a62      	ldr	r2, [pc, #392]	; (8002610 <HAL_DMA_IRQHandler+0x1fc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d012      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x9e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a60      	ldr	r2, [pc, #384]	; (8002614 <HAL_DMA_IRQHandler+0x200>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00a      	beq.n	80024ac <HAL_DMA_IRQHandler+0x98>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a5f      	ldr	r2, [pc, #380]	; (8002618 <HAL_DMA_IRQHandler+0x204>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d102      	bne.n	80024a6 <HAL_DMA_IRQHandler+0x92>
 80024a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a4:	e00e      	b.n	80024c4 <HAL_DMA_IRQHandler+0xb0>
 80024a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024aa:	e00b      	b.n	80024c4 <HAL_DMA_IRQHandler+0xb0>
 80024ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024b0:	e008      	b.n	80024c4 <HAL_DMA_IRQHandler+0xb0>
 80024b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024b6:	e005      	b.n	80024c4 <HAL_DMA_IRQHandler+0xb0>
 80024b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024bc:	e002      	b.n	80024c4 <HAL_DMA_IRQHandler+0xb0>
 80024be:	2340      	movs	r3, #64	; 0x40
 80024c0:	e000      	b.n	80024c4 <HAL_DMA_IRQHandler+0xb0>
 80024c2:	2304      	movs	r3, #4
 80024c4:	4a55      	ldr	r2, [pc, #340]	; (800261c <HAL_DMA_IRQHandler+0x208>)
 80024c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8094 	beq.w	80025fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024da:	e08e      	b.n	80025fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2202      	movs	r2, #2
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d056      	beq.n	800259a <HAL_DMA_IRQHandler+0x186>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d051      	beq.n	800259a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020a 	bic.w	r2, r2, #10
 8002512:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a38      	ldr	r2, [pc, #224]	; (8002604 <HAL_DMA_IRQHandler+0x1f0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d029      	beq.n	800257a <HAL_DMA_IRQHandler+0x166>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a37      	ldr	r2, [pc, #220]	; (8002608 <HAL_DMA_IRQHandler+0x1f4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <HAL_DMA_IRQHandler+0x162>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a35      	ldr	r2, [pc, #212]	; (800260c <HAL_DMA_IRQHandler+0x1f8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x15c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a34      	ldr	r2, [pc, #208]	; (8002610 <HAL_DMA_IRQHandler+0x1fc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d012      	beq.n	800256a <HAL_DMA_IRQHandler+0x156>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a32      	ldr	r2, [pc, #200]	; (8002614 <HAL_DMA_IRQHandler+0x200>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00a      	beq.n	8002564 <HAL_DMA_IRQHandler+0x150>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a31      	ldr	r2, [pc, #196]	; (8002618 <HAL_DMA_IRQHandler+0x204>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d102      	bne.n	800255e <HAL_DMA_IRQHandler+0x14a>
 8002558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800255c:	e00e      	b.n	800257c <HAL_DMA_IRQHandler+0x168>
 800255e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002562:	e00b      	b.n	800257c <HAL_DMA_IRQHandler+0x168>
 8002564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002568:	e008      	b.n	800257c <HAL_DMA_IRQHandler+0x168>
 800256a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256e:	e005      	b.n	800257c <HAL_DMA_IRQHandler+0x168>
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	e002      	b.n	800257c <HAL_DMA_IRQHandler+0x168>
 8002576:	2320      	movs	r3, #32
 8002578:	e000      	b.n	800257c <HAL_DMA_IRQHandler+0x168>
 800257a:	2302      	movs	r3, #2
 800257c:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_DMA_IRQHandler+0x208>)
 800257e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d034      	beq.n	80025fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002598:	e02f      	b.n	80025fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2208      	movs	r2, #8
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <HAL_DMA_IRQHandler+0x1e8>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 020e 	bic.w	r2, r2, #14
 80025c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
    }
  }
  return;
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
}
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020008 	.word	0x40020008
 8002608:	4002001c 	.word	0x4002001c
 800260c:	40020030 	.word	0x40020030
 8002610:	40020044 	.word	0x40020044
 8002614:	40020058 	.word	0x40020058
 8002618:	4002006c 	.word	0x4002006c
 800261c:	40020000 	.word	0x40020000

08002620 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b10      	cmp	r3, #16
 800264c:	d108      	bne.n	8002660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800265e:	e007      	b.n	8002670 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b08b      	sub	sp, #44	; 0x2c
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	e169      	b.n	8002964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002690:	2201      	movs	r2, #1
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 8158 	bne.w	800295e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a9a      	ldr	r2, [pc, #616]	; (800291c <HAL_GPIO_Init+0x2a0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d05e      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026b8:	4a98      	ldr	r2, [pc, #608]	; (800291c <HAL_GPIO_Init+0x2a0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d875      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026be:	4a98      	ldr	r2, [pc, #608]	; (8002920 <HAL_GPIO_Init+0x2a4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d058      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026c4:	4a96      	ldr	r2, [pc, #600]	; (8002920 <HAL_GPIO_Init+0x2a4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d86f      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026ca:	4a96      	ldr	r2, [pc, #600]	; (8002924 <HAL_GPIO_Init+0x2a8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d052      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026d0:	4a94      	ldr	r2, [pc, #592]	; (8002924 <HAL_GPIO_Init+0x2a8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d869      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026d6:	4a94      	ldr	r2, [pc, #592]	; (8002928 <HAL_GPIO_Init+0x2ac>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d04c      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026dc:	4a92      	ldr	r2, [pc, #584]	; (8002928 <HAL_GPIO_Init+0x2ac>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d863      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026e2:	4a92      	ldr	r2, [pc, #584]	; (800292c <HAL_GPIO_Init+0x2b0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d046      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026e8:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_GPIO_Init+0x2b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d85d      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d82a      	bhi.n	8002748 <HAL_GPIO_Init+0xcc>
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d859      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <HAL_GPIO_Init+0x80>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	08002777 	.word	0x08002777
 8002700:	08002751 	.word	0x08002751
 8002704:	08002763 	.word	0x08002763
 8002708:	080027a5 	.word	0x080027a5
 800270c:	080027ab 	.word	0x080027ab
 8002710:	080027ab 	.word	0x080027ab
 8002714:	080027ab 	.word	0x080027ab
 8002718:	080027ab 	.word	0x080027ab
 800271c:	080027ab 	.word	0x080027ab
 8002720:	080027ab 	.word	0x080027ab
 8002724:	080027ab 	.word	0x080027ab
 8002728:	080027ab 	.word	0x080027ab
 800272c:	080027ab 	.word	0x080027ab
 8002730:	080027ab 	.word	0x080027ab
 8002734:	080027ab 	.word	0x080027ab
 8002738:	080027ab 	.word	0x080027ab
 800273c:	080027ab 	.word	0x080027ab
 8002740:	08002759 	.word	0x08002759
 8002744:	0800276d 	.word	0x0800276d
 8002748:	4a79      	ldr	r2, [pc, #484]	; (8002930 <HAL_GPIO_Init+0x2b4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800274e:	e02c      	b.n	80027aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	623b      	str	r3, [r7, #32]
          break;
 8002756:	e029      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	3304      	adds	r3, #4
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e024      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	3308      	adds	r3, #8
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e01f      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	330c      	adds	r3, #12
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e01a      	b.n	80027ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277e:	2304      	movs	r3, #4
 8002780:	623b      	str	r3, [r7, #32]
          break;
 8002782:	e013      	b.n	80027ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800278c:	2308      	movs	r3, #8
 800278e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	611a      	str	r2, [r3, #16]
          break;
 8002796:	e009      	b.n	80027ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002798:	2308      	movs	r3, #8
 800279a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	615a      	str	r2, [r3, #20]
          break;
 80027a2:	e003      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
          break;
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x130>
          break;
 80027aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2bff      	cmp	r3, #255	; 0xff
 80027b0:	d801      	bhi.n	80027b6 <HAL_GPIO_Init+0x13a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	e001      	b.n	80027ba <HAL_GPIO_Init+0x13e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2bff      	cmp	r3, #255	; 0xff
 80027c0:	d802      	bhi.n	80027c8 <HAL_GPIO_Init+0x14c>
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0x152>
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	3b08      	subs	r3, #8
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	210f      	movs	r1, #15
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80b1 	beq.w	800295e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027fc:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_GPIO_Init+0x2b8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_GPIO_Init+0x2b8>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_GPIO_Init+0x2b8>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002814:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_GPIO_Init+0x2bc>)
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <HAL_GPIO_Init+0x2c0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <HAL_GPIO_Init+0x1ec>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3f      	ldr	r2, [pc, #252]	; (8002940 <HAL_GPIO_Init+0x2c4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00d      	beq.n	8002864 <HAL_GPIO_Init+0x1e8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3e      	ldr	r2, [pc, #248]	; (8002944 <HAL_GPIO_Init+0x2c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <HAL_GPIO_Init+0x1e4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3d      	ldr	r2, [pc, #244]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_GPIO_Init+0x1e0>
 8002858:	2303      	movs	r3, #3
 800285a:	e006      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 800285c:	2304      	movs	r3, #4
 800285e:	e004      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 8002860:	2302      	movs	r3, #2
 8002862:	e002      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 8002868:	2300      	movs	r3, #0
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	f002 0203 	and.w	r2, r2, #3
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	4093      	lsls	r3, r2
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800287a:	492f      	ldr	r1, [pc, #188]	; (8002938 <HAL_GPIO_Init+0x2bc>)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_GPIO_Init+0x2d0>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	492c      	ldr	r1, [pc, #176]	; (800294c <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4928      	ldr	r1, [pc, #160]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4922      	ldr	r1, [pc, #136]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	491e      	ldr	r1, [pc, #120]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	4918      	ldr	r1, [pc, #96]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4914      	ldr	r1, [pc, #80]	; (800294c <HAL_GPIO_Init+0x2d0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d021      	beq.n	8002950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_GPIO_Init+0x2d0>)
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_GPIO_Init+0x2d0>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	60cb      	str	r3, [r1, #12]
 8002918:	e021      	b.n	800295e <HAL_GPIO_Init+0x2e2>
 800291a:	bf00      	nop
 800291c:	10320000 	.word	0x10320000
 8002920:	10310000 	.word	0x10310000
 8002924:	10220000 	.word	0x10220000
 8002928:	10210000 	.word	0x10210000
 800292c:	10120000 	.word	0x10120000
 8002930:	10110000 	.word	0x10110000
 8002934:	40021000 	.word	0x40021000
 8002938:	40010000 	.word	0x40010000
 800293c:	40010800 	.word	0x40010800
 8002940:	40010c00 	.word	0x40010c00
 8002944:	40011000 	.word	0x40011000
 8002948:	40011400 	.word	0x40011400
 800294c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_GPIO_Init+0x304>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	43db      	mvns	r3, r3
 8002958:	4909      	ldr	r1, [pc, #36]	; (8002980 <HAL_GPIO_Init+0x304>)
 800295a:	4013      	ands	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	3301      	adds	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f47f ae8e 	bne.w	8002690 <HAL_GPIO_Init+0x14>
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	372c      	adds	r7, #44	; 0x2c
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b08b      	sub	sp, #44	; 0x2c
 80029b8:	af06      	add	r7, sp, #24
 80029ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0fd      	b.n	8002bc2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff f8cc 	bl	8001b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2203      	movs	r2, #3
 80029e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 f9bc 	bl	8004d6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	687e      	ldr	r6, [r7, #4]
 80029fa:	466d      	mov	r5, sp
 80029fc:	f106 0410 	add.w	r4, r6, #16
 8002a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	602b      	str	r3, [r5, #0]
 8002a08:	1d33      	adds	r3, r6, #4
 8002a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a0c:	6838      	ldr	r0, [r7, #0]
 8002a0e:	f002 f99c 	bl	8004d4a <USB_CoreInit>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0ce      	b.n	8002bc2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 f9b7 	bl	8004d9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e04c      	b.n	8002ad0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3301      	adds	r3, #1
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	b298      	uxth	r0, r3
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	3336      	adds	r3, #54	; 0x36
 8002a74:	4602      	mov	r2, r0
 8002a76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3303      	adds	r3, #3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3338      	adds	r3, #56	; 0x38
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	333c      	adds	r3, #60	; 0x3c
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3340      	adds	r3, #64	; 0x40
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	3301      	adds	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3ad      	bcc.n	8002a36 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e044      	b.n	8002b6a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	3301      	adds	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3b5      	bcc.n	8002ae0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	687e      	ldr	r6, [r7, #4]
 8002b7c:	466d      	mov	r5, sp
 8002b7e:	f106 0410 	add.w	r4, r6, #16
 8002b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	602b      	str	r3, [r5, #0]
 8002b8a:	1d33      	adds	r3, r6, #4
 8002b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f002 f911 	bl	8004db6 <USB_DevInit>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00d      	b.n	8002bc2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 f91b 	bl	8004df6 <USB_DevDisconnect>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e272      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8087 	beq.w	8002cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bec:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf8:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d112      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5e>
 8002c04:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d10b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c12:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d06c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x12c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d168      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e24c      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x76>
 8002c34:	4b80      	ldr	r3, [pc, #512]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7f      	ldr	r2, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	e02e      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x98>
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7a      	ldr	r2, [pc, #488]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a77      	ldr	r2, [pc, #476]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e01d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0xbc>
 8002c6e:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a71      	ldr	r2, [pc, #452]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c88:	4b6b      	ldr	r3, [pc, #428]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6a      	ldr	r2, [pc, #424]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b68      	ldr	r3, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a67      	ldr	r2, [pc, #412]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f90e 	bl	8001ec8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff f90a 	bl	8001ec8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e200      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe4>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f8fa 	bl	8001ec8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f8f6 	bl	8001ec8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1ec      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x10c>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d063      	beq.n	8002dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d06:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d11c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x18c>
 8002d1e:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x176>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e1c0      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4939      	ldr	r1, [pc, #228]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	e03a      	b.n	8002dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCC_OscConfig+0x270>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff f8af 	bl	8001ec8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7ff f8ab 	bl	8001ec8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1a1      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4927      	ldr	r1, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_RCC_OscConfig+0x270>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff f88e 	bl	8001ec8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db0:	f7ff f88a 	bl	8001ec8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e180      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d03a      	beq.n	8002e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d019      	beq.n	8002e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_RCC_OscConfig+0x274>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff f86e 	bl	8001ec8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7ff f86a 	bl	8001ec8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e160      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f000 faa8 	bl	8003364 <RCC_Delay>
 8002e14:	e01c      	b.n	8002e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_OscConfig+0x274>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7ff f854 	bl	8001ec8 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e22:	e00f      	b.n	8002e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7ff f850 	bl	8001ec8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d908      	bls.n	8002e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e146      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	42420000 	.word	0x42420000
 8002e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	4b92      	ldr	r3, [pc, #584]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e9      	bne.n	8002e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a6 	beq.w	8002faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e78:	61d3      	str	r3, [r2, #28]
 8002e7a:	4b85      	ldr	r3, [pc, #532]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d118      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e96:	4b7f      	ldr	r3, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7e      	ldr	r2, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea2:	f7ff f811 	bl	8001ec8 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eaa:	f7ff f80d 	bl	8001ec8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	; 0x64
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e103      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	4b75      	ldr	r3, [pc, #468]	; (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x312>
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a6e      	ldr	r2, [pc, #440]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e02d      	b.n	8002f3a <HAL_RCC_OscConfig+0x36e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x334>
 8002ee6:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a69      	ldr	r2, [pc, #420]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a66      	ldr	r2, [pc, #408]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	e01c      	b.n	8002f3a <HAL_RCC_OscConfig+0x36e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x356>
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a60      	ldr	r2, [pc, #384]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	4b5e      	ldr	r3, [pc, #376]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a5d      	ldr	r2, [pc, #372]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e00b      	b.n	8002f3a <HAL_RCC_OscConfig+0x36e>
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a5a      	ldr	r2, [pc, #360]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a57      	ldr	r2, [pc, #348]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d015      	beq.n	8002f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fe ffc1 	bl	8001ec8 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe ffbd 	bl	8001ec8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0b1      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ee      	beq.n	8002f4a <HAL_RCC_OscConfig+0x37e>
 8002f6c:	e014      	b.n	8002f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ffab 	bl	8001ec8 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe ffa7 	bl	8001ec8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e09b      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	4b40      	ldr	r3, [pc, #256]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ee      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d061      	beq.n	8003084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d146      	bne.n	8003056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe ff7b 	bl	8001ec8 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe ff77 	bl	8001ec8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e06d      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d108      	bne.n	8003010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4921      	ldr	r1, [pc, #132]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a19      	ldr	r1, [r3, #32]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	430b      	orrs	r3, r1
 8003022:	491b      	ldr	r1, [pc, #108]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe ff4b 	bl	8001ec8 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003036:	f7fe ff47 	bl	8001ec8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e03d      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x46a>
 8003054:	e035      	b.n	80030c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe ff34 	bl	8001ec8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe ff30 	bl	8001ec8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e026      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x498>
 8003082:	e01e      	b.n	80030c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e019      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x500>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0d0      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4965      	ldr	r1, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800314e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d040      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e073      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06b      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4936      	ldr	r1, [pc, #216]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fe fe82 	bl	8001ec8 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fe fe7e 	bl	8001ec8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e053      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d210      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4922      	ldr	r1, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fde0 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000
 8003294:	40021000 	.word	0x40021000
 8003298:	08008fa0 	.word	0x08008fa0
 800329c:	20000008 	.word	0x20000008
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	b490      	push	{r4, r7}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <HAL_RCC_GetSysClockFreq+0xac>)
 80032ac:	1d3c      	adds	r4, r7, #4
 80032ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032b4:	f240 2301 	movw	r3, #513	; 0x201
 80032b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x40>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x46>
 80032e2:	e02b      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e6:	623b      	str	r3, [r7, #32]
      break;
 80032e8:	e02b      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3328      	adds	r3, #40	; 0x28
 80032f4:	443b      	add	r3, r7
 80032f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d012      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0c5b      	lsrs	r3, r3, #17
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	3328      	adds	r3, #40	; 0x28
 8003312:	443b      	add	r3, r7
 8003314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <HAL_RCC_GetSysClockFreq+0xb4>)
 800331e:	fb03 f202 	mul.w	r2, r3, r2
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	e004      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4a0b      	ldr	r2, [pc, #44]	; (800335c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	623b      	str	r3, [r7, #32]
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCC_GetSysClockFreq+0xbc>)
 800333e:	623b      	str	r3, [r7, #32]
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	6a3b      	ldr	r3, [r7, #32]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc90      	pop	{r4, r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	08007c44 	.word	0x08007c44
 8003354:	40021000 	.word	0x40021000
 8003358:	00f42400 	.word	0x00f42400
 800335c:	003d0900 	.word	0x003d0900
 8003360:	007a1200 	.word	0x007a1200

08003364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <RCC_Delay+0x34>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <RCC_Delay+0x38>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003380:	bf00      	nop
  }
  while (Delay --);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f9      	bne.n	8003380 <RCC_Delay+0x1c>
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	20000008 	.word	0x20000008
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d07d      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a42      	ldr	r2, [pc, #264]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fe fd62 	bl	8001ec8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fe fd5e 	bl	8001ec8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e06d      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d02e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d027      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800345a:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d014      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe fd2d 	bl	8001ec8 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe fd29 	bl	8001ec8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e036      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ee      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4917      	ldr	r1, [pc, #92]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	42420440 	.word	0x42420440

0800350c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e076      	b.n	800360c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d108      	bne.n	8003538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d009      	beq.n	8003544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]
 8003536:	e005      	b.n	8003544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe f954 	bl	800180c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800357a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	ea42 0103 	orr.w	r1, r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	0c1a      	lsrs	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f002 0204 	and.w	r2, r2, #4
 80035ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_SPI_Transmit+0x22>
 8003632:	2302      	movs	r3, #2
 8003634:	e126      	b.n	8003884 <HAL_SPI_Transmit+0x270>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800363e:	f7fe fc43 	bl	8001ec8 <HAL_GetTick>
 8003642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d002      	beq.n	800365a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003654:	2302      	movs	r3, #2
 8003656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003658:	e10b      	b.n	8003872 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Transmit+0x52>
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800366a:	e102      	b.n	8003872 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2203      	movs	r2, #3
 8003670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b2:	d10f      	bne.n	80036d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d007      	beq.n	80036f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fa:	d14b      	bne.n	8003794 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Transmit+0xf6>
 8003704:	8afb      	ldrh	r3, [r7, #22]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d13e      	bne.n	8003788 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	1c9a      	adds	r2, r3, #2
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800372e:	e02b      	b.n	8003788 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d112      	bne.n	8003764 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	86da      	strh	r2, [r3, #54]	; 0x36
 8003762:	e011      	b.n	8003788 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003764:	f7fe fbb0 	bl	8001ec8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d803      	bhi.n	800377c <HAL_SPI_Transmit+0x168>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d102      	bne.n	8003782 <HAL_SPI_Transmit+0x16e>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003786:	e074      	b.n	8003872 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ce      	bne.n	8003730 <HAL_SPI_Transmit+0x11c>
 8003792:	e04c      	b.n	800382e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_SPI_Transmit+0x18e>
 800379c:	8afb      	ldrh	r3, [r7, #22]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d140      	bne.n	8003824 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037c8:	e02c      	b.n	8003824 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d113      	bne.n	8003800 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80037fe:	e011      	b.n	8003824 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003800:	f7fe fb62 	bl	8001ec8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_Transmit+0x204>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d102      	bne.n	800381e <HAL_SPI_Transmit+0x20a>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003822:	e026      	b.n	8003872 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1cd      	bne.n	80037ca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fb36 	bl	8003ea4 <SPI_EndRxTxTransaction>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e000      	b.n	8003872 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003870:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003882:	7ffb      	ldrb	r3, [r7, #31]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_SPI_Transmit_DMA+0x20>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e09b      	b.n	80039e4 <HAL_SPI_Transmit_DMA+0x158>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d002      	beq.n	80038c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038c4:	e089      	b.n	80039da <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_Transmit_DMA+0x46>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038d6:	e080      	b.n	80039da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391e:	d10f      	bne.n	8003940 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	4a29      	ldr	r2, [pc, #164]	; (80039ec <HAL_SPI_Transmit_DMA+0x160>)
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_SPI_Transmit_DMA+0x164>)
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <HAL_SPI_Transmit_DMA+0x168>)
 8003956:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395c:	2200      	movs	r2, #0
 800395e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	4619      	mov	r1, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003978:	f7fe fc3c 	bl	80021f4 <HAL_DMA_Start_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0210 	orr.w	r2, r3, #16
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800399a:	e01e      	b.n	80039da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d007      	beq.n	80039ba <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0220 	orr.w	r2, r2, #32
 80039c8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0202 	orr.w	r2, r2, #2
 80039d8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	08003d0f 	.word	0x08003d0f
 80039f0:	08003c69 	.word	0x08003c69
 80039f4:	08003d2b 	.word	0x08003d2b

080039f8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00f      	beq.n	8003a2c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fc4e 	bl	80022b2 <HAL_DMA_Abort>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00f      	beq.n	8003a54 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fc3a 	bl	80022b2 <HAL_DMA_Abort>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0203 	bic.w	r2, r2, #3
 8003a62:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10f      	bne.n	8003abc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
    return;
 8003aba:	e0be      	b.n	8003c3a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_SPI_IRQHandler+0x66>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	09db      	lsrs	r3, r3, #7
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
    return;
 8003adc:	e0ad      	b.n	8003c3a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_IRQHandler+0x80>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80a1 	beq.w	8003c3a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 809a 	beq.w	8003c3a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d023      	beq.n	8003b5a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d011      	beq.n	8003b42 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	e00b      	b.n	8003b5a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	693b      	ldr	r3, [r7, #16]
        return;
 8003b58:	e06f      	b.n	8003c3a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d04f      	beq.n	8003c38 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ba6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <HAL_SPI_IRQHandler+0x14c>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d034      	beq.n	8003c2e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0203 	bic.w	r2, r2, #3
 8003bd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_SPI_IRQHandler+0x1c8>)
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fb9d 	bl	8002328 <HAL_DMA_Abort_IT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0c:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <HAL_SPI_IRQHandler+0x1c8>)
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fb87 	bl	8002328 <HAL_DMA_Abort_IT>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003c2c:	e003      	b.n	8003c36 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f811 	bl	8003c56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c34:	e000      	b.n	8003c38 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003c36:	bf00      	nop
    return;
 8003c38:	bf00      	nop
  }
}
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	08003d6b 	.word	0x08003d6b

08003c44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c76:	f7fe f927 	bl	8001ec8 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d03b      	beq.n	8003d02 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0220 	bic.w	r2, r2, #32
 8003c98:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0202 	bic.w	r2, r2, #2
 8003ca8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	2164      	movs	r1, #100	; 0x64
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f000 f8f8 	bl	8003ea4 <SPI_EndRxTxTransaction>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ffab 	bl	8003c56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d00:	e002      	b.n	8003d08 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7fc fed8 	bl	8000ab8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff ff91 	bl	8003c44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0203 	bic.w	r2, r2, #3
 8003d46:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4c:	f043 0210 	orr.w	r2, r3, #16
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff ff7a 	bl	8003c56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff ff66 	bl	8003c56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003da4:	f7fe f890 	bl	8001ec8 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003db4:	f7fe f888 	bl	8001ec8 <HAL_GetTick>
 8003db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	015b      	lsls	r3, r3, #5
 8003dc0:	0d1b      	lsrs	r3, r3, #20
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dca:	e054      	b.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d050      	beq.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd4:	f7fe f878 	bl	8001ec8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d902      	bls.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13d      	bne.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d111      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d004      	beq.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d107      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e30:	d10f      	bne.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e017      	b.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d19b      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000008 	.word	0x20000008

08003ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2180      	movs	r1, #128	; 0x80
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff ff6a 	bl	8003d94 <SPI_WaitFlagStateUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e000      	b.n	8003ed8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd fd56 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fbd2 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e041      	b.n	8004014 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd fce9 	bl	800197c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fb83 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e041      	b.n	80040b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fcdc 	bl	8001a00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fb34 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d122      	bne.n	8004116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d11b      	bne.n	8004116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0202 	mvn.w	r2, #2
 80040e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fac8 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 8004102:	e005      	b.n	8004110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fabb 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 faca 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d122      	bne.n	800416a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d11b      	bne.n	800416a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0204 	mvn.w	r2, #4
 800413a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa9e 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 8004156:	e005      	b.n	8004164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fa91 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 faa0 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d122      	bne.n	80041be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b08      	cmp	r3, #8
 8004184:	d11b      	bne.n	80041be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f06f 0208 	mvn.w	r2, #8
 800418e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2204      	movs	r2, #4
 8004194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa74 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 80041aa:	e005      	b.n	80041b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa67 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa76 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d122      	bne.n	8004212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d11b      	bne.n	8004212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f06f 0210 	mvn.w	r2, #16
 80041e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2208      	movs	r2, #8
 80041e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fa4a 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 80041fe:	e005      	b.n	800420c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa3d 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fa4c 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10e      	bne.n	800423e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0201 	mvn.w	r2, #1
 8004236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fc fc25 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d10e      	bne.n	800426a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d107      	bne.n	800426a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fd67 	bl	8004d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d10e      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d107      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800428e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fa10 	bl	80046b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d10e      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d107      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0220 	mvn.w	r2, #32
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fd32 	bl	8004d26 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e046      	b.n	8004374 <HAL_TIM_OC_ConfigChannel+0xa8>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d839      	bhi.n	8004368 <HAL_TIM_OC_ConfigChannel+0x9c>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_TIM_OC_ConfigChannel+0x30>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004369 	.word	0x08004369
 8004304:	08004369 	.word	0x08004369
 8004308:	08004369 	.word	0x08004369
 800430c:	0800433f 	.word	0x0800433f
 8004310:	08004369 	.word	0x08004369
 8004314:	08004369 	.word	0x08004369
 8004318:	08004369 	.word	0x08004369
 800431c:	0800434d 	.word	0x0800434d
 8004320:	08004369 	.word	0x08004369
 8004324:	08004369 	.word	0x08004369
 8004328:	08004369 	.word	0x08004369
 800432c:	0800435b 	.word	0x0800435b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fa28 	bl	800478c <TIM_OC1_SetConfig>
      break;
 800433c:	e015      	b.n	800436a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa87 	bl	8004858 <TIM_OC2_SetConfig>
      break;
 800434a:	e00e      	b.n	800436a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 faea 	bl	800492c <TIM_OC3_SetConfig>
      break;
 8004358:	e007      	b.n	800436a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fb4d 	bl	8004a00 <TIM_OC4_SetConfig>
      break;
 8004366:	e000      	b.n	800436a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004392:	2302      	movs	r3, #2
 8004394:	e0ac      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f200 809f 	bhi.w	80044e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080044e5 	.word	0x080044e5
 80043b4:	080044e5 	.word	0x080044e5
 80043b8:	080044e5 	.word	0x080044e5
 80043bc:	08004421 	.word	0x08004421
 80043c0:	080044e5 	.word	0x080044e5
 80043c4:	080044e5 	.word	0x080044e5
 80043c8:	080044e5 	.word	0x080044e5
 80043cc:	08004463 	.word	0x08004463
 80043d0:	080044e5 	.word	0x080044e5
 80043d4:	080044e5 	.word	0x080044e5
 80043d8:	080044e5 	.word	0x080044e5
 80043dc:	080044a3 	.word	0x080044a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f9d0 	bl	800478c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0208 	orr.w	r2, r2, #8
 80043fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	619a      	str	r2, [r3, #24]
      break;
 800441e:	e062      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa16 	bl	8004858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	021a      	lsls	r2, r3, #8
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]
      break;
 8004460:	e041      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fa5f 	bl	800492c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0208 	orr.w	r2, r2, #8
 800447c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	61da      	str	r2, [r3, #28]
      break;
 80044a0:	e021      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 faa9 	bl	8004a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	021a      	lsls	r2, r3, #8
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	61da      	str	r2, [r3, #28]
      break;
 80044e2:	e000      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80044e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIM_ConfigClockSource+0x18>
 800450c:	2302      	movs	r3, #2
 800450e:	e0b3      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x180>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004536:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004548:	d03e      	beq.n	80045c8 <HAL_TIM_ConfigClockSource+0xd0>
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454e:	f200 8087 	bhi.w	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004556:	f000 8085 	beq.w	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	d87f      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d01a      	beq.n	800459a <HAL_TIM_ConfigClockSource+0xa2>
 8004564:	2b70      	cmp	r3, #112	; 0x70
 8004566:	d87b      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d050      	beq.n	800460e <HAL_TIM_ConfigClockSource+0x116>
 800456c:	2b60      	cmp	r3, #96	; 0x60
 800456e:	d877      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d03c      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0xf6>
 8004574:	2b50      	cmp	r3, #80	; 0x50
 8004576:	d873      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d058      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x136>
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d86f      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d064      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x156>
 8004584:	2b30      	cmp	r3, #48	; 0x30
 8004586:	d86b      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d060      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x156>
 800458c:	2b20      	cmp	r3, #32
 800458e:	d867      	bhi.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05c      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x156>
 8004594:	2b10      	cmp	r3, #16
 8004596:	d05a      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004598:	e062      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6899      	ldr	r1, [r3, #8]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f000 faee 	bl	8004b8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	609a      	str	r2, [r3, #8]
      break;
 80045c6:	e04e      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6899      	ldr	r1, [r3, #8]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f000 fad7 	bl	8004b8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ea:	609a      	str	r2, [r3, #8]
      break;
 80045ec:	e03b      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6859      	ldr	r1, [r3, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f000 fa4e 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2150      	movs	r1, #80	; 0x50
 8004606:	4618      	mov	r0, r3
 8004608:	f000 faa5 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 800460c:	e02b      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	461a      	mov	r2, r3
 800461c:	f000 fa6c 	bl	8004af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2160      	movs	r1, #96	; 0x60
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fa95 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 800462c:	e01b      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	461a      	mov	r2, r3
 800463c:	f000 fa2e 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2140      	movs	r1, #64	; 0x40
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa85 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 800464c:	e00b      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 fa7c 	bl	8004b56 <TIM_ITRx_SetConfig>
        break;
 800465e:	e002      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a29      	ldr	r2, [pc, #164]	; (8004780 <TIM_Base_SetConfig+0xb8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0x30>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0x30>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <TIM_Base_SetConfig+0xbc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a25      	ldr	r2, [pc, #148]	; (8004788 <TIM_Base_SetConfig+0xc0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <TIM_Base_SetConfig+0xb8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_Base_SetConfig+0x62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d007      	beq.n	800472a <TIM_Base_SetConfig+0x62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a19      	ldr	r2, [pc, #100]	; (8004784 <TIM_Base_SetConfig+0xbc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <TIM_Base_SetConfig+0xc0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a07      	ldr	r2, [pc, #28]	; (8004780 <TIM_Base_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d103      	bne.n	8004770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	615a      	str	r2, [r3, #20]
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800

0800478c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <TIM_OC1_SetConfig+0xc8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10c      	bne.n	8004802 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0308 	bic.w	r3, r3, #8
 80047ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 0304 	bic.w	r3, r3, #4
 8004800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a13      	ldr	r2, [pc, #76]	; (8004854 <TIM_OC1_SetConfig+0xc8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40012c00 	.word	0x40012c00

08004858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0210 	bic.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <TIM_OC2_SetConfig+0xd0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10d      	bne.n	80048d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <TIM_OC2_SetConfig+0xd0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d113      	bne.n	8004904 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	40012c00 	.word	0x40012c00

0800492c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <TIM_OC3_SetConfig+0xd0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10d      	bne.n	80049a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a14      	ldr	r2, [pc, #80]	; (80049fc <TIM_OC3_SetConfig+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d113      	bne.n	80049d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	621a      	str	r2, [r3, #32]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00

08004a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	031b      	lsls	r3, r3, #12
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <TIM_OC4_SetConfig+0x98>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00

08004a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 030a 	bic.w	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f043 0307 	orr.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b087      	sub	sp, #28
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	609a      	str	r2, [r3, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e046      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800

08004c84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e03d      	b.n	8004d1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	f107 0014 	add.w	r0, r7, #20
 8004d58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	b004      	add	sp, #16
 8004d68:	4770      	bx	lr

08004d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d72:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004db6:	b084      	sub	sp, #16
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	f107 0014 	add.w	r0, r7, #20
 8004dc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	b004      	add	sp, #16
 8004df4:	4770      	bx	lr

08004df6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
	...

08004e0c <__errno>:
 8004e0c:	4b01      	ldr	r3, [pc, #4]	; (8004e14 <__errno+0x8>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000014 	.word	0x20000014

08004e18 <__libc_init_array>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	4d0c      	ldr	r5, [pc, #48]	; (8004e50 <__libc_init_array+0x38>)
 8004e1e:	4c0d      	ldr	r4, [pc, #52]	; (8004e54 <__libc_init_array+0x3c>)
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	42a6      	cmp	r6, r4
 8004e26:	d109      	bne.n	8004e3c <__libc_init_array+0x24>
 8004e28:	f002 fefa 	bl	8007c20 <_init>
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	4d0a      	ldr	r5, [pc, #40]	; (8004e58 <__libc_init_array+0x40>)
 8004e30:	4c0a      	ldr	r4, [pc, #40]	; (8004e5c <__libc_init_array+0x44>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	42a6      	cmp	r6, r4
 8004e38:	d105      	bne.n	8004e46 <__libc_init_array+0x2e>
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e40:	4798      	blx	r3
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7ee      	b.n	8004e24 <__libc_init_array+0xc>
 8004e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4a:	4798      	blx	r3
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	e7f2      	b.n	8004e36 <__libc_init_array+0x1e>
 8004e50:	0800938c 	.word	0x0800938c
 8004e54:	0800938c 	.word	0x0800938c
 8004e58:	0800938c 	.word	0x0800938c
 8004e5c:	08009390 	.word	0x08009390

08004e60 <memset>:
 8004e60:	4603      	mov	r3, r0
 8004e62:	4402      	add	r2, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <__cvt>:
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e76:	461f      	mov	r7, r3
 8004e78:	bfbb      	ittet	lt
 8004e7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e7e:	461f      	movlt	r7, r3
 8004e80:	2300      	movge	r3, #0
 8004e82:	232d      	movlt	r3, #45	; 0x2d
 8004e84:	b088      	sub	sp, #32
 8004e86:	4614      	mov	r4, r2
 8004e88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e8c:	7013      	strb	r3, [r2, #0]
 8004e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004e94:	f023 0820 	bic.w	r8, r3, #32
 8004e98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e9c:	d005      	beq.n	8004eaa <__cvt+0x3a>
 8004e9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ea2:	d100      	bne.n	8004ea6 <__cvt+0x36>
 8004ea4:	3501      	adds	r5, #1
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e000      	b.n	8004eac <__cvt+0x3c>
 8004eaa:	2303      	movs	r3, #3
 8004eac:	aa07      	add	r2, sp, #28
 8004eae:	9204      	str	r2, [sp, #16]
 8004eb0:	aa06      	add	r2, sp, #24
 8004eb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004eb6:	e9cd 3500 	strd	r3, r5, [sp]
 8004eba:	4622      	mov	r2, r4
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	f000 fce3 	bl	8005888 <_dtoa_r>
 8004ec2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	d102      	bne.n	8004ed0 <__cvt+0x60>
 8004eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ecc:	07db      	lsls	r3, r3, #31
 8004ece:	d522      	bpl.n	8004f16 <__cvt+0xa6>
 8004ed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ed4:	eb06 0905 	add.w	r9, r6, r5
 8004ed8:	d110      	bne.n	8004efc <__cvt+0x8c>
 8004eda:	7833      	ldrb	r3, [r6, #0]
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d10a      	bne.n	8004ef6 <__cvt+0x86>
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	f7fb fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8004eec:	b918      	cbnz	r0, 8004ef6 <__cvt+0x86>
 8004eee:	f1c5 0501 	rsb	r5, r5, #1
 8004ef2:	f8ca 5000 	str.w	r5, [sl]
 8004ef6:	f8da 3000 	ldr.w	r3, [sl]
 8004efa:	4499      	add	r9, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	2300      	movs	r3, #0
 8004f00:	4620      	mov	r0, r4
 8004f02:	4639      	mov	r1, r7
 8004f04:	f7fb fd50 	bl	80009a8 <__aeabi_dcmpeq>
 8004f08:	b108      	cbz	r0, 8004f0e <__cvt+0x9e>
 8004f0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f0e:	2230      	movs	r2, #48	; 0x30
 8004f10:	9b07      	ldr	r3, [sp, #28]
 8004f12:	454b      	cmp	r3, r9
 8004f14:	d307      	bcc.n	8004f26 <__cvt+0xb6>
 8004f16:	4630      	mov	r0, r6
 8004f18:	9b07      	ldr	r3, [sp, #28]
 8004f1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f1c:	1b9b      	subs	r3, r3, r6
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	b008      	add	sp, #32
 8004f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	9107      	str	r1, [sp, #28]
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e7f0      	b.n	8004f10 <__cvt+0xa0>

08004f2e <__exponent>:
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f32:	2900      	cmp	r1, #0
 8004f34:	f803 2b02 	strb.w	r2, [r3], #2
 8004f38:	bfb6      	itet	lt
 8004f3a:	222d      	movlt	r2, #45	; 0x2d
 8004f3c:	222b      	movge	r2, #43	; 0x2b
 8004f3e:	4249      	neglt	r1, r1
 8004f40:	2909      	cmp	r1, #9
 8004f42:	7042      	strb	r2, [r0, #1]
 8004f44:	dd2b      	ble.n	8004f9e <__exponent+0x70>
 8004f46:	f10d 0407 	add.w	r4, sp, #7
 8004f4a:	46a4      	mov	ip, r4
 8004f4c:	270a      	movs	r7, #10
 8004f4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f52:	460a      	mov	r2, r1
 8004f54:	46a6      	mov	lr, r4
 8004f56:	fb07 1516 	mls	r5, r7, r6, r1
 8004f5a:	2a63      	cmp	r2, #99	; 0x63
 8004f5c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004f60:	4631      	mov	r1, r6
 8004f62:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f6a:	dcf0      	bgt.n	8004f4e <__exponent+0x20>
 8004f6c:	3130      	adds	r1, #48	; 0x30
 8004f6e:	f1ae 0502 	sub.w	r5, lr, #2
 8004f72:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f76:	4629      	mov	r1, r5
 8004f78:	1c44      	adds	r4, r0, #1
 8004f7a:	4561      	cmp	r1, ip
 8004f7c:	d30a      	bcc.n	8004f94 <__exponent+0x66>
 8004f7e:	f10d 0209 	add.w	r2, sp, #9
 8004f82:	eba2 020e 	sub.w	r2, r2, lr
 8004f86:	4565      	cmp	r5, ip
 8004f88:	bf88      	it	hi
 8004f8a:	2200      	movhi	r2, #0
 8004f8c:	4413      	add	r3, r2
 8004f8e:	1a18      	subs	r0, r3, r0
 8004f90:	b003      	add	sp, #12
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f98:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f9c:	e7ed      	b.n	8004f7a <__exponent+0x4c>
 8004f9e:	2330      	movs	r3, #48	; 0x30
 8004fa0:	3130      	adds	r1, #48	; 0x30
 8004fa2:	7083      	strb	r3, [r0, #2]
 8004fa4:	70c1      	strb	r1, [r0, #3]
 8004fa6:	1d03      	adds	r3, r0, #4
 8004fa8:	e7f1      	b.n	8004f8e <__exponent+0x60>
	...

08004fac <_printf_float>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	b091      	sub	sp, #68	; 0x44
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004fb8:	4616      	mov	r6, r2
 8004fba:	461f      	mov	r7, r3
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	f001 fa51 	bl	8006464 <_localeconv_r>
 8004fc2:	6803      	ldr	r3, [r0, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc8:	f7fb f8c2 	bl	8000150 <strlen>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	930e      	str	r3, [sp, #56]	; 0x38
 8004fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd4:	900a      	str	r0, [sp, #40]	; 0x28
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	f023 0307 	bic.w	r3, r3, #7
 8004fdc:	f103 0208 	add.w	r2, r3, #8
 8004fe0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004fe4:	f8d4 b000 	ldr.w	fp, [r4]
 8004fe8:	f8c8 2000 	str.w	r2, [r8]
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ff4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ff8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	4640      	mov	r0, r8
 8005004:	4b9c      	ldr	r3, [pc, #624]	; (8005278 <_printf_float+0x2cc>)
 8005006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005008:	f7fb fd00 	bl	8000a0c <__aeabi_dcmpun>
 800500c:	bb70      	cbnz	r0, 800506c <_printf_float+0xc0>
 800500e:	f04f 32ff 	mov.w	r2, #4294967295
 8005012:	4640      	mov	r0, r8
 8005014:	4b98      	ldr	r3, [pc, #608]	; (8005278 <_printf_float+0x2cc>)
 8005016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005018:	f7fb fcda 	bl	80009d0 <__aeabi_dcmple>
 800501c:	bb30      	cbnz	r0, 800506c <_printf_float+0xc0>
 800501e:	2200      	movs	r2, #0
 8005020:	2300      	movs	r3, #0
 8005022:	4640      	mov	r0, r8
 8005024:	4651      	mov	r1, sl
 8005026:	f7fb fcc9 	bl	80009bc <__aeabi_dcmplt>
 800502a:	b110      	cbz	r0, 8005032 <_printf_float+0x86>
 800502c:	232d      	movs	r3, #45	; 0x2d
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005032:	4b92      	ldr	r3, [pc, #584]	; (800527c <_printf_float+0x2d0>)
 8005034:	4892      	ldr	r0, [pc, #584]	; (8005280 <_printf_float+0x2d4>)
 8005036:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800503a:	bf94      	ite	ls
 800503c:	4698      	movls	r8, r3
 800503e:	4680      	movhi	r8, r0
 8005040:	2303      	movs	r3, #3
 8005042:	f04f 0a00 	mov.w	sl, #0
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	f02b 0304 	bic.w	r3, fp, #4
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	4633      	mov	r3, r6
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	9700      	str	r7, [sp, #0]
 8005056:	aa0f      	add	r2, sp, #60	; 0x3c
 8005058:	f000 f9d4 	bl	8005404 <_printf_common>
 800505c:	3001      	adds	r0, #1
 800505e:	f040 8090 	bne.w	8005182 <_printf_float+0x1d6>
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	b011      	add	sp, #68	; 0x44
 8005068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506c:	4642      	mov	r2, r8
 800506e:	4653      	mov	r3, sl
 8005070:	4640      	mov	r0, r8
 8005072:	4651      	mov	r1, sl
 8005074:	f7fb fcca 	bl	8000a0c <__aeabi_dcmpun>
 8005078:	b148      	cbz	r0, 800508e <_printf_float+0xe2>
 800507a:	f1ba 0f00 	cmp.w	sl, #0
 800507e:	bfb8      	it	lt
 8005080:	232d      	movlt	r3, #45	; 0x2d
 8005082:	4880      	ldr	r0, [pc, #512]	; (8005284 <_printf_float+0x2d8>)
 8005084:	bfb8      	it	lt
 8005086:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800508a:	4b7f      	ldr	r3, [pc, #508]	; (8005288 <_printf_float+0x2dc>)
 800508c:	e7d3      	b.n	8005036 <_printf_float+0x8a>
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	d142      	bne.n	800511e <_printf_float+0x172>
 8005098:	2306      	movs	r3, #6
 800509a:	6063      	str	r3, [r4, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	9206      	str	r2, [sp, #24]
 80050a0:	aa0e      	add	r2, sp, #56	; 0x38
 80050a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80050a6:	aa0d      	add	r2, sp, #52	; 0x34
 80050a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80050ac:	9203      	str	r2, [sp, #12]
 80050ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80050b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	4642      	mov	r2, r8
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4628      	mov	r0, r5
 80050c0:	4653      	mov	r3, sl
 80050c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80050c4:	f7ff fed4 	bl	8004e70 <__cvt>
 80050c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050ca:	4680      	mov	r8, r0
 80050cc:	2947      	cmp	r1, #71	; 0x47
 80050ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050d0:	d108      	bne.n	80050e4 <_printf_float+0x138>
 80050d2:	1cc8      	adds	r0, r1, #3
 80050d4:	db02      	blt.n	80050dc <_printf_float+0x130>
 80050d6:	6863      	ldr	r3, [r4, #4]
 80050d8:	4299      	cmp	r1, r3
 80050da:	dd40      	ble.n	800515e <_printf_float+0x1b2>
 80050dc:	f1a9 0902 	sub.w	r9, r9, #2
 80050e0:	fa5f f989 	uxtb.w	r9, r9
 80050e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80050e8:	d81f      	bhi.n	800512a <_printf_float+0x17e>
 80050ea:	464a      	mov	r2, r9
 80050ec:	3901      	subs	r1, #1
 80050ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050f2:	910d      	str	r1, [sp, #52]	; 0x34
 80050f4:	f7ff ff1b 	bl	8004f2e <__exponent>
 80050f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050fa:	4682      	mov	sl, r0
 80050fc:	1813      	adds	r3, r2, r0
 80050fe:	2a01      	cmp	r2, #1
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	dc02      	bgt.n	800510a <_printf_float+0x15e>
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	07d2      	lsls	r2, r2, #31
 8005108:	d501      	bpl.n	800510e <_printf_float+0x162>
 800510a:	3301      	adds	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005112:	2b00      	cmp	r3, #0
 8005114:	d09b      	beq.n	800504e <_printf_float+0xa2>
 8005116:	232d      	movs	r3, #45	; 0x2d
 8005118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511c:	e797      	b.n	800504e <_printf_float+0xa2>
 800511e:	2947      	cmp	r1, #71	; 0x47
 8005120:	d1bc      	bne.n	800509c <_printf_float+0xf0>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ba      	bne.n	800509c <_printf_float+0xf0>
 8005126:	2301      	movs	r3, #1
 8005128:	e7b7      	b.n	800509a <_printf_float+0xee>
 800512a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800512e:	d118      	bne.n	8005162 <_printf_float+0x1b6>
 8005130:	2900      	cmp	r1, #0
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	dd0b      	ble.n	800514e <_printf_float+0x1a2>
 8005136:	6121      	str	r1, [r4, #16]
 8005138:	b913      	cbnz	r3, 8005140 <_printf_float+0x194>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	07d0      	lsls	r0, r2, #31
 800513e:	d502      	bpl.n	8005146 <_printf_float+0x19a>
 8005140:	3301      	adds	r3, #1
 8005142:	440b      	add	r3, r1
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	f04f 0a00 	mov.w	sl, #0
 800514a:	65a1      	str	r1, [r4, #88]	; 0x58
 800514c:	e7df      	b.n	800510e <_printf_float+0x162>
 800514e:	b913      	cbnz	r3, 8005156 <_printf_float+0x1aa>
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	07d2      	lsls	r2, r2, #31
 8005154:	d501      	bpl.n	800515a <_printf_float+0x1ae>
 8005156:	3302      	adds	r3, #2
 8005158:	e7f4      	b.n	8005144 <_printf_float+0x198>
 800515a:	2301      	movs	r3, #1
 800515c:	e7f2      	b.n	8005144 <_printf_float+0x198>
 800515e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005164:	4299      	cmp	r1, r3
 8005166:	db05      	blt.n	8005174 <_printf_float+0x1c8>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	6121      	str	r1, [r4, #16]
 800516c:	07d8      	lsls	r0, r3, #31
 800516e:	d5ea      	bpl.n	8005146 <_printf_float+0x19a>
 8005170:	1c4b      	adds	r3, r1, #1
 8005172:	e7e7      	b.n	8005144 <_printf_float+0x198>
 8005174:	2900      	cmp	r1, #0
 8005176:	bfcc      	ite	gt
 8005178:	2201      	movgt	r2, #1
 800517a:	f1c1 0202 	rsble	r2, r1, #2
 800517e:	4413      	add	r3, r2
 8005180:	e7e0      	b.n	8005144 <_printf_float+0x198>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	055a      	lsls	r2, r3, #21
 8005186:	d407      	bmi.n	8005198 <_printf_float+0x1ec>
 8005188:	6923      	ldr	r3, [r4, #16]
 800518a:	4642      	mov	r2, r8
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	d12b      	bne.n	80051ee <_printf_float+0x242>
 8005196:	e764      	b.n	8005062 <_printf_float+0xb6>
 8005198:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800519c:	f240 80dd 	bls.w	800535a <_printf_float+0x3ae>
 80051a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	f7fb fbfe 	bl	80009a8 <__aeabi_dcmpeq>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d033      	beq.n	8005218 <_printf_float+0x26c>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4631      	mov	r1, r6
 80051b4:	4628      	mov	r0, r5
 80051b6:	4a35      	ldr	r2, [pc, #212]	; (800528c <_printf_float+0x2e0>)
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	f43f af51 	beq.w	8005062 <_printf_float+0xb6>
 80051c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051c4:	429a      	cmp	r2, r3
 80051c6:	db02      	blt.n	80051ce <_printf_float+0x222>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	07d8      	lsls	r0, r3, #31
 80051cc:	d50f      	bpl.n	80051ee <_printf_float+0x242>
 80051ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	47b8      	blx	r7
 80051d8:	3001      	adds	r0, #1
 80051da:	f43f af42 	beq.w	8005062 <_printf_float+0xb6>
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	f104 091a 	add.w	r9, r4, #26
 80051e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051e8:	3b01      	subs	r3, #1
 80051ea:	4543      	cmp	r3, r8
 80051ec:	dc09      	bgt.n	8005202 <_printf_float+0x256>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	079b      	lsls	r3, r3, #30
 80051f2:	f100 8102 	bmi.w	80053fa <_printf_float+0x44e>
 80051f6:	68e0      	ldr	r0, [r4, #12]
 80051f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051fa:	4298      	cmp	r0, r3
 80051fc:	bfb8      	it	lt
 80051fe:	4618      	movlt	r0, r3
 8005200:	e731      	b.n	8005066 <_printf_float+0xba>
 8005202:	2301      	movs	r3, #1
 8005204:	464a      	mov	r2, r9
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	f43f af28 	beq.w	8005062 <_printf_float+0xb6>
 8005212:	f108 0801 	add.w	r8, r8, #1
 8005216:	e7e6      	b.n	80051e6 <_printf_float+0x23a>
 8005218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800521a:	2b00      	cmp	r3, #0
 800521c:	dc38      	bgt.n	8005290 <_printf_float+0x2e4>
 800521e:	2301      	movs	r3, #1
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <_printf_float+0x2e0>)
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	f43f af1a 	beq.w	8005062 <_printf_float+0xb6>
 800522e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005232:	4313      	orrs	r3, r2
 8005234:	d102      	bne.n	800523c <_printf_float+0x290>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	07d9      	lsls	r1, r3, #31
 800523a:	d5d8      	bpl.n	80051ee <_printf_float+0x242>
 800523c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	f43f af0b 	beq.w	8005062 <_printf_float+0xb6>
 800524c:	f04f 0900 	mov.w	r9, #0
 8005250:	f104 0a1a 	add.w	sl, r4, #26
 8005254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005256:	425b      	negs	r3, r3
 8005258:	454b      	cmp	r3, r9
 800525a:	dc01      	bgt.n	8005260 <_printf_float+0x2b4>
 800525c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525e:	e794      	b.n	800518a <_printf_float+0x1de>
 8005260:	2301      	movs	r3, #1
 8005262:	4652      	mov	r2, sl
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f aef9 	beq.w	8005062 <_printf_float+0xb6>
 8005270:	f109 0901 	add.w	r9, r9, #1
 8005274:	e7ee      	b.n	8005254 <_printf_float+0x2a8>
 8005276:	bf00      	nop
 8005278:	7fefffff 	.word	0x7fefffff
 800527c:	08008fb4 	.word	0x08008fb4
 8005280:	08008fb8 	.word	0x08008fb8
 8005284:	08008fc0 	.word	0x08008fc0
 8005288:	08008fbc 	.word	0x08008fbc
 800528c:	08008fc4 	.word	0x08008fc4
 8005290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005292:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005294:	429a      	cmp	r2, r3
 8005296:	bfa8      	it	ge
 8005298:	461a      	movge	r2, r3
 800529a:	2a00      	cmp	r2, #0
 800529c:	4691      	mov	r9, r2
 800529e:	dc37      	bgt.n	8005310 <_printf_float+0x364>
 80052a0:	f04f 0b00 	mov.w	fp, #0
 80052a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a8:	f104 021a 	add.w	r2, r4, #26
 80052ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80052b0:	ebaa 0309 	sub.w	r3, sl, r9
 80052b4:	455b      	cmp	r3, fp
 80052b6:	dc33      	bgt.n	8005320 <_printf_float+0x374>
 80052b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052bc:	429a      	cmp	r2, r3
 80052be:	db3b      	blt.n	8005338 <_printf_float+0x38c>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	07da      	lsls	r2, r3, #31
 80052c4:	d438      	bmi.n	8005338 <_printf_float+0x38c>
 80052c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052ca:	eba3 020a 	sub.w	r2, r3, sl
 80052ce:	eba3 0901 	sub.w	r9, r3, r1
 80052d2:	4591      	cmp	r9, r2
 80052d4:	bfa8      	it	ge
 80052d6:	4691      	movge	r9, r2
 80052d8:	f1b9 0f00 	cmp.w	r9, #0
 80052dc:	dc34      	bgt.n	8005348 <_printf_float+0x39c>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052e6:	f104 0a1a 	add.w	sl, r4, #26
 80052ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	eba3 0309 	sub.w	r3, r3, r9
 80052f4:	4543      	cmp	r3, r8
 80052f6:	f77f af7a 	ble.w	80051ee <_printf_float+0x242>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4652      	mov	r2, sl
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	f43f aeac 	beq.w	8005062 <_printf_float+0xb6>
 800530a:	f108 0801 	add.w	r8, r8, #1
 800530e:	e7ec      	b.n	80052ea <_printf_float+0x33e>
 8005310:	4613      	mov	r3, r2
 8005312:	4631      	mov	r1, r6
 8005314:	4642      	mov	r2, r8
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	d1c0      	bne.n	80052a0 <_printf_float+0x2f4>
 800531e:	e6a0      	b.n	8005062 <_printf_float+0xb6>
 8005320:	2301      	movs	r3, #1
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	920b      	str	r2, [sp, #44]	; 0x2c
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	f43f ae99 	beq.w	8005062 <_printf_float+0xb6>
 8005330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005332:	f10b 0b01 	add.w	fp, fp, #1
 8005336:	e7b9      	b.n	80052ac <_printf_float+0x300>
 8005338:	4631      	mov	r1, r6
 800533a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800533e:	4628      	mov	r0, r5
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	d1bf      	bne.n	80052c6 <_printf_float+0x31a>
 8005346:	e68c      	b.n	8005062 <_printf_float+0xb6>
 8005348:	464b      	mov	r3, r9
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	eb08 020a 	add.w	r2, r8, sl
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	d1c2      	bne.n	80052de <_printf_float+0x332>
 8005358:	e683      	b.n	8005062 <_printf_float+0xb6>
 800535a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800535c:	2a01      	cmp	r2, #1
 800535e:	dc01      	bgt.n	8005364 <_printf_float+0x3b8>
 8005360:	07db      	lsls	r3, r3, #31
 8005362:	d537      	bpl.n	80053d4 <_printf_float+0x428>
 8005364:	2301      	movs	r3, #1
 8005366:	4642      	mov	r2, r8
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	f43f ae77 	beq.w	8005062 <_printf_float+0xb6>
 8005374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	f43f ae6f 	beq.w	8005062 <_printf_float+0xb6>
 8005384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005388:	2200      	movs	r2, #0
 800538a:	2300      	movs	r3, #0
 800538c:	f7fb fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005390:	b9d8      	cbnz	r0, 80053ca <_printf_float+0x41e>
 8005392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005394:	f108 0201 	add.w	r2, r8, #1
 8005398:	3b01      	subs	r3, #1
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	d10e      	bne.n	80053c2 <_printf_float+0x416>
 80053a4:	e65d      	b.n	8005062 <_printf_float+0xb6>
 80053a6:	2301      	movs	r3, #1
 80053a8:	464a      	mov	r2, r9
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f ae56 	beq.w	8005062 <_printf_float+0xb6>
 80053b6:	f108 0801 	add.w	r8, r8, #1
 80053ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053bc:	3b01      	subs	r3, #1
 80053be:	4543      	cmp	r3, r8
 80053c0:	dcf1      	bgt.n	80053a6 <_printf_float+0x3fa>
 80053c2:	4653      	mov	r3, sl
 80053c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c8:	e6e0      	b.n	800518c <_printf_float+0x1e0>
 80053ca:	f04f 0800 	mov.w	r8, #0
 80053ce:	f104 091a 	add.w	r9, r4, #26
 80053d2:	e7f2      	b.n	80053ba <_printf_float+0x40e>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4642      	mov	r2, r8
 80053d8:	e7df      	b.n	800539a <_printf_float+0x3ee>
 80053da:	2301      	movs	r3, #1
 80053dc:	464a      	mov	r2, r9
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f ae3c 	beq.w	8005062 <_printf_float+0xb6>
 80053ea:	f108 0801 	add.w	r8, r8, #1
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80053f2:	1a5b      	subs	r3, r3, r1
 80053f4:	4543      	cmp	r3, r8
 80053f6:	dcf0      	bgt.n	80053da <_printf_float+0x42e>
 80053f8:	e6fd      	b.n	80051f6 <_printf_float+0x24a>
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	f104 0919 	add.w	r9, r4, #25
 8005402:	e7f4      	b.n	80053ee <_printf_float+0x442>

08005404 <_printf_common>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	4616      	mov	r6, r2
 800540a:	4699      	mov	r9, r3
 800540c:	688a      	ldr	r2, [r1, #8]
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	4607      	mov	r7, r0
 8005412:	4293      	cmp	r3, r2
 8005414:	bfb8      	it	lt
 8005416:	4613      	movlt	r3, r2
 8005418:	6033      	str	r3, [r6, #0]
 800541a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800541e:	460c      	mov	r4, r1
 8005420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005424:	b10a      	cbz	r2, 800542a <_printf_common+0x26>
 8005426:	3301      	adds	r3, #1
 8005428:	6033      	str	r3, [r6, #0]
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	0699      	lsls	r1, r3, #26
 800542e:	bf42      	ittt	mi
 8005430:	6833      	ldrmi	r3, [r6, #0]
 8005432:	3302      	addmi	r3, #2
 8005434:	6033      	strmi	r3, [r6, #0]
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	f015 0506 	ands.w	r5, r5, #6
 800543c:	d106      	bne.n	800544c <_printf_common+0x48>
 800543e:	f104 0a19 	add.w	sl, r4, #25
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	6832      	ldr	r2, [r6, #0]
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	42ab      	cmp	r3, r5
 800544a:	dc28      	bgt.n	800549e <_printf_common+0x9a>
 800544c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005450:	1e13      	subs	r3, r2, #0
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	bf18      	it	ne
 8005456:	2301      	movne	r3, #1
 8005458:	0692      	lsls	r2, r2, #26
 800545a:	d42d      	bmi.n	80054b8 <_printf_common+0xb4>
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d020      	beq.n	80054ac <_printf_common+0xa8>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	68e5      	ldr	r5, [r4, #12]
 800546e:	f003 0306 	and.w	r3, r3, #6
 8005472:	2b04      	cmp	r3, #4
 8005474:	bf18      	it	ne
 8005476:	2500      	movne	r5, #0
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	f04f 0600 	mov.w	r6, #0
 800547e:	68a3      	ldr	r3, [r4, #8]
 8005480:	bf08      	it	eq
 8005482:	1aad      	subeq	r5, r5, r2
 8005484:	6922      	ldr	r2, [r4, #16]
 8005486:	bf08      	it	eq
 8005488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800548c:	4293      	cmp	r3, r2
 800548e:	bfc4      	itt	gt
 8005490:	1a9b      	subgt	r3, r3, r2
 8005492:	18ed      	addgt	r5, r5, r3
 8005494:	341a      	adds	r4, #26
 8005496:	42b5      	cmp	r5, r6
 8005498:	d11a      	bne.n	80054d0 <_printf_common+0xcc>
 800549a:	2000      	movs	r0, #0
 800549c:	e008      	b.n	80054b0 <_printf_common+0xac>
 800549e:	2301      	movs	r3, #1
 80054a0:	4652      	mov	r2, sl
 80054a2:	4649      	mov	r1, r9
 80054a4:	4638      	mov	r0, r7
 80054a6:	47c0      	blx	r8
 80054a8:	3001      	adds	r0, #1
 80054aa:	d103      	bne.n	80054b4 <_printf_common+0xb0>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b4:	3501      	adds	r5, #1
 80054b6:	e7c4      	b.n	8005442 <_printf_common+0x3e>
 80054b8:	2030      	movs	r0, #48	; 0x30
 80054ba:	18e1      	adds	r1, r4, r3
 80054bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c6:	4422      	add	r2, r4
 80054c8:	3302      	adds	r3, #2
 80054ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ce:	e7c5      	b.n	800545c <_printf_common+0x58>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4622      	mov	r2, r4
 80054d4:	4649      	mov	r1, r9
 80054d6:	4638      	mov	r0, r7
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d0e6      	beq.n	80054ac <_printf_common+0xa8>
 80054de:	3601      	adds	r6, #1
 80054e0:	e7d9      	b.n	8005496 <_printf_common+0x92>
	...

080054e4 <_printf_i>:
 80054e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	7e0f      	ldrb	r7, [r1, #24]
 80054ea:	4691      	mov	r9, r2
 80054ec:	2f78      	cmp	r7, #120	; 0x78
 80054ee:	4680      	mov	r8, r0
 80054f0:	460c      	mov	r4, r1
 80054f2:	469a      	mov	sl, r3
 80054f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054fa:	d807      	bhi.n	800550c <_printf_i+0x28>
 80054fc:	2f62      	cmp	r7, #98	; 0x62
 80054fe:	d80a      	bhi.n	8005516 <_printf_i+0x32>
 8005500:	2f00      	cmp	r7, #0
 8005502:	f000 80d9 	beq.w	80056b8 <_printf_i+0x1d4>
 8005506:	2f58      	cmp	r7, #88	; 0x58
 8005508:	f000 80a4 	beq.w	8005654 <_printf_i+0x170>
 800550c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005514:	e03a      	b.n	800558c <_printf_i+0xa8>
 8005516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800551a:	2b15      	cmp	r3, #21
 800551c:	d8f6      	bhi.n	800550c <_printf_i+0x28>
 800551e:	a101      	add	r1, pc, #4	; (adr r1, 8005524 <_printf_i+0x40>)
 8005520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005524:	0800557d 	.word	0x0800557d
 8005528:	08005591 	.word	0x08005591
 800552c:	0800550d 	.word	0x0800550d
 8005530:	0800550d 	.word	0x0800550d
 8005534:	0800550d 	.word	0x0800550d
 8005538:	0800550d 	.word	0x0800550d
 800553c:	08005591 	.word	0x08005591
 8005540:	0800550d 	.word	0x0800550d
 8005544:	0800550d 	.word	0x0800550d
 8005548:	0800550d 	.word	0x0800550d
 800554c:	0800550d 	.word	0x0800550d
 8005550:	0800569f 	.word	0x0800569f
 8005554:	080055c1 	.word	0x080055c1
 8005558:	08005681 	.word	0x08005681
 800555c:	0800550d 	.word	0x0800550d
 8005560:	0800550d 	.word	0x0800550d
 8005564:	080056c1 	.word	0x080056c1
 8005568:	0800550d 	.word	0x0800550d
 800556c:	080055c1 	.word	0x080055c1
 8005570:	0800550d 	.word	0x0800550d
 8005574:	0800550d 	.word	0x0800550d
 8005578:	08005689 	.word	0x08005689
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	602a      	str	r2, [r5, #0]
 8005584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800558c:	2301      	movs	r3, #1
 800558e:	e0a4      	b.n	80056da <_printf_i+0x1f6>
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	6829      	ldr	r1, [r5, #0]
 8005594:	0606      	lsls	r6, r0, #24
 8005596:	f101 0304 	add.w	r3, r1, #4
 800559a:	d50a      	bpl.n	80055b2 <_printf_i+0xce>
 800559c:	680e      	ldr	r6, [r1, #0]
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	2e00      	cmp	r6, #0
 80055a2:	da03      	bge.n	80055ac <_printf_i+0xc8>
 80055a4:	232d      	movs	r3, #45	; 0x2d
 80055a6:	4276      	negs	r6, r6
 80055a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ac:	230a      	movs	r3, #10
 80055ae:	485e      	ldr	r0, [pc, #376]	; (8005728 <_printf_i+0x244>)
 80055b0:	e019      	b.n	80055e6 <_printf_i+0x102>
 80055b2:	680e      	ldr	r6, [r1, #0]
 80055b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	bf18      	it	ne
 80055bc:	b236      	sxthne	r6, r6
 80055be:	e7ef      	b.n	80055a0 <_printf_i+0xbc>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	1d19      	adds	r1, r3, #4
 80055c6:	6029      	str	r1, [r5, #0]
 80055c8:	0601      	lsls	r1, r0, #24
 80055ca:	d501      	bpl.n	80055d0 <_printf_i+0xec>
 80055cc:	681e      	ldr	r6, [r3, #0]
 80055ce:	e002      	b.n	80055d6 <_printf_i+0xf2>
 80055d0:	0646      	lsls	r6, r0, #25
 80055d2:	d5fb      	bpl.n	80055cc <_printf_i+0xe8>
 80055d4:	881e      	ldrh	r6, [r3, #0]
 80055d6:	2f6f      	cmp	r7, #111	; 0x6f
 80055d8:	bf0c      	ite	eq
 80055da:	2308      	moveq	r3, #8
 80055dc:	230a      	movne	r3, #10
 80055de:	4852      	ldr	r0, [pc, #328]	; (8005728 <_printf_i+0x244>)
 80055e0:	2100      	movs	r1, #0
 80055e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e6:	6865      	ldr	r5, [r4, #4]
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	bfa8      	it	ge
 80055ec:	6821      	ldrge	r1, [r4, #0]
 80055ee:	60a5      	str	r5, [r4, #8]
 80055f0:	bfa4      	itt	ge
 80055f2:	f021 0104 	bicge.w	r1, r1, #4
 80055f6:	6021      	strge	r1, [r4, #0]
 80055f8:	b90e      	cbnz	r6, 80055fe <_printf_i+0x11a>
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	d04d      	beq.n	800569a <_printf_i+0x1b6>
 80055fe:	4615      	mov	r5, r2
 8005600:	fbb6 f1f3 	udiv	r1, r6, r3
 8005604:	fb03 6711 	mls	r7, r3, r1, r6
 8005608:	5dc7      	ldrb	r7, [r0, r7]
 800560a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800560e:	4637      	mov	r7, r6
 8005610:	42bb      	cmp	r3, r7
 8005612:	460e      	mov	r6, r1
 8005614:	d9f4      	bls.n	8005600 <_printf_i+0x11c>
 8005616:	2b08      	cmp	r3, #8
 8005618:	d10b      	bne.n	8005632 <_printf_i+0x14e>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	07de      	lsls	r6, r3, #31
 800561e:	d508      	bpl.n	8005632 <_printf_i+0x14e>
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	6861      	ldr	r1, [r4, #4]
 8005624:	4299      	cmp	r1, r3
 8005626:	bfde      	ittt	le
 8005628:	2330      	movle	r3, #48	; 0x30
 800562a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800562e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005632:	1b52      	subs	r2, r2, r5
 8005634:	6122      	str	r2, [r4, #16]
 8005636:	464b      	mov	r3, r9
 8005638:	4621      	mov	r1, r4
 800563a:	4640      	mov	r0, r8
 800563c:	f8cd a000 	str.w	sl, [sp]
 8005640:	aa03      	add	r2, sp, #12
 8005642:	f7ff fedf 	bl	8005404 <_printf_common>
 8005646:	3001      	adds	r0, #1
 8005648:	d14c      	bne.n	80056e4 <_printf_i+0x200>
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	b004      	add	sp, #16
 8005650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005654:	4834      	ldr	r0, [pc, #208]	; (8005728 <_printf_i+0x244>)
 8005656:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800565a:	6829      	ldr	r1, [r5, #0]
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005662:	6029      	str	r1, [r5, #0]
 8005664:	061d      	lsls	r5, r3, #24
 8005666:	d514      	bpl.n	8005692 <_printf_i+0x1ae>
 8005668:	07df      	lsls	r7, r3, #31
 800566a:	bf44      	itt	mi
 800566c:	f043 0320 	orrmi.w	r3, r3, #32
 8005670:	6023      	strmi	r3, [r4, #0]
 8005672:	b91e      	cbnz	r6, 800567c <_printf_i+0x198>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	2310      	movs	r3, #16
 800567e:	e7af      	b.n	80055e0 <_printf_i+0xfc>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	f043 0320 	orr.w	r3, r3, #32
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	2378      	movs	r3, #120	; 0x78
 800568a:	4828      	ldr	r0, [pc, #160]	; (800572c <_printf_i+0x248>)
 800568c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005690:	e7e3      	b.n	800565a <_printf_i+0x176>
 8005692:	0659      	lsls	r1, r3, #25
 8005694:	bf48      	it	mi
 8005696:	b2b6      	uxthmi	r6, r6
 8005698:	e7e6      	b.n	8005668 <_printf_i+0x184>
 800569a:	4615      	mov	r5, r2
 800569c:	e7bb      	b.n	8005616 <_printf_i+0x132>
 800569e:	682b      	ldr	r3, [r5, #0]
 80056a0:	6826      	ldr	r6, [r4, #0]
 80056a2:	1d18      	adds	r0, r3, #4
 80056a4:	6961      	ldr	r1, [r4, #20]
 80056a6:	6028      	str	r0, [r5, #0]
 80056a8:	0635      	lsls	r5, r6, #24
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	d501      	bpl.n	80056b2 <_printf_i+0x1ce>
 80056ae:	6019      	str	r1, [r3, #0]
 80056b0:	e002      	b.n	80056b8 <_printf_i+0x1d4>
 80056b2:	0670      	lsls	r0, r6, #25
 80056b4:	d5fb      	bpl.n	80056ae <_printf_i+0x1ca>
 80056b6:	8019      	strh	r1, [r3, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	4615      	mov	r5, r2
 80056bc:	6123      	str	r3, [r4, #16]
 80056be:	e7ba      	b.n	8005636 <_printf_i+0x152>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2100      	movs	r1, #0
 80056c4:	1d1a      	adds	r2, r3, #4
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 fed5 	bl	800647c <memchr>
 80056d2:	b108      	cbz	r0, 80056d8 <_printf_i+0x1f4>
 80056d4:	1b40      	subs	r0, r0, r5
 80056d6:	6060      	str	r0, [r4, #4]
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	2300      	movs	r3, #0
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	e7a8      	b.n	8005636 <_printf_i+0x152>
 80056e4:	462a      	mov	r2, r5
 80056e6:	4649      	mov	r1, r9
 80056e8:	4640      	mov	r0, r8
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	47d0      	blx	sl
 80056ee:	3001      	adds	r0, #1
 80056f0:	d0ab      	beq.n	800564a <_printf_i+0x166>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	079b      	lsls	r3, r3, #30
 80056f6:	d413      	bmi.n	8005720 <_printf_i+0x23c>
 80056f8:	68e0      	ldr	r0, [r4, #12]
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	4298      	cmp	r0, r3
 80056fe:	bfb8      	it	lt
 8005700:	4618      	movlt	r0, r3
 8005702:	e7a4      	b.n	800564e <_printf_i+0x16a>
 8005704:	2301      	movs	r3, #1
 8005706:	4632      	mov	r2, r6
 8005708:	4649      	mov	r1, r9
 800570a:	4640      	mov	r0, r8
 800570c:	47d0      	blx	sl
 800570e:	3001      	adds	r0, #1
 8005710:	d09b      	beq.n	800564a <_printf_i+0x166>
 8005712:	3501      	adds	r5, #1
 8005714:	68e3      	ldr	r3, [r4, #12]
 8005716:	9903      	ldr	r1, [sp, #12]
 8005718:	1a5b      	subs	r3, r3, r1
 800571a:	42ab      	cmp	r3, r5
 800571c:	dcf2      	bgt.n	8005704 <_printf_i+0x220>
 800571e:	e7eb      	b.n	80056f8 <_printf_i+0x214>
 8005720:	2500      	movs	r5, #0
 8005722:	f104 0619 	add.w	r6, r4, #25
 8005726:	e7f5      	b.n	8005714 <_printf_i+0x230>
 8005728:	08008fc6 	.word	0x08008fc6
 800572c:	08008fd7 	.word	0x08008fd7

08005730 <siprintf>:
 8005730:	b40e      	push	{r1, r2, r3}
 8005732:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005736:	b500      	push	{lr}
 8005738:	b09c      	sub	sp, #112	; 0x70
 800573a:	ab1d      	add	r3, sp, #116	; 0x74
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	9006      	str	r0, [sp, #24]
 8005740:	9107      	str	r1, [sp, #28]
 8005742:	9104      	str	r1, [sp, #16]
 8005744:	4808      	ldr	r0, [pc, #32]	; (8005768 <siprintf+0x38>)
 8005746:	4909      	ldr	r1, [pc, #36]	; (800576c <siprintf+0x3c>)
 8005748:	f853 2b04 	ldr.w	r2, [r3], #4
 800574c:	9105      	str	r1, [sp, #20]
 800574e:	6800      	ldr	r0, [r0, #0]
 8005750:	a902      	add	r1, sp, #8
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	f001 fb7c 	bl	8006e50 <_svfiprintf_r>
 8005758:	2200      	movs	r2, #0
 800575a:	9b02      	ldr	r3, [sp, #8]
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	b01c      	add	sp, #112	; 0x70
 8005760:	f85d eb04 	ldr.w	lr, [sp], #4
 8005764:	b003      	add	sp, #12
 8005766:	4770      	bx	lr
 8005768:	20000014 	.word	0x20000014
 800576c:	ffff0208 	.word	0xffff0208

08005770 <quorem>:
 8005770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	6903      	ldr	r3, [r0, #16]
 8005776:	690c      	ldr	r4, [r1, #16]
 8005778:	4607      	mov	r7, r0
 800577a:	42a3      	cmp	r3, r4
 800577c:	f2c0 8082 	blt.w	8005884 <quorem+0x114>
 8005780:	3c01      	subs	r4, #1
 8005782:	f100 0514 	add.w	r5, r0, #20
 8005786:	f101 0814 	add.w	r8, r1, #20
 800578a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005798:	3301      	adds	r3, #1
 800579a:	429a      	cmp	r2, r3
 800579c:	fbb2 f6f3 	udiv	r6, r2, r3
 80057a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057a8:	d331      	bcc.n	800580e <quorem+0x9e>
 80057aa:	f04f 0e00 	mov.w	lr, #0
 80057ae:	4640      	mov	r0, r8
 80057b0:	46ac      	mov	ip, r5
 80057b2:	46f2      	mov	sl, lr
 80057b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80057b8:	b293      	uxth	r3, r2
 80057ba:	fb06 e303 	mla	r3, r6, r3, lr
 80057be:	0c12      	lsrs	r2, r2, #16
 80057c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	fb06 e202 	mla	r2, r6, r2, lr
 80057ca:	ebaa 0303 	sub.w	r3, sl, r3
 80057ce:	f8dc a000 	ldr.w	sl, [ip]
 80057d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057d6:	fa1f fa8a 	uxth.w	sl, sl
 80057da:	4453      	add	r3, sl
 80057dc:	f8dc a000 	ldr.w	sl, [ip]
 80057e0:	b292      	uxth	r2, r2
 80057e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f0:	4581      	cmp	r9, r0
 80057f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057f6:	f84c 3b04 	str.w	r3, [ip], #4
 80057fa:	d2db      	bcs.n	80057b4 <quorem+0x44>
 80057fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005800:	b92b      	cbnz	r3, 800580e <quorem+0x9e>
 8005802:	9b01      	ldr	r3, [sp, #4]
 8005804:	3b04      	subs	r3, #4
 8005806:	429d      	cmp	r5, r3
 8005808:	461a      	mov	r2, r3
 800580a:	d32f      	bcc.n	800586c <quorem+0xfc>
 800580c:	613c      	str	r4, [r7, #16]
 800580e:	4638      	mov	r0, r7
 8005810:	f001 f8ce 	bl	80069b0 <__mcmp>
 8005814:	2800      	cmp	r0, #0
 8005816:	db25      	blt.n	8005864 <quorem+0xf4>
 8005818:	4628      	mov	r0, r5
 800581a:	f04f 0c00 	mov.w	ip, #0
 800581e:	3601      	adds	r6, #1
 8005820:	f858 1b04 	ldr.w	r1, [r8], #4
 8005824:	f8d0 e000 	ldr.w	lr, [r0]
 8005828:	b28b      	uxth	r3, r1
 800582a:	ebac 0303 	sub.w	r3, ip, r3
 800582e:	fa1f f28e 	uxth.w	r2, lr
 8005832:	4413      	add	r3, r2
 8005834:	0c0a      	lsrs	r2, r1, #16
 8005836:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800583a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005844:	45c1      	cmp	r9, r8
 8005846:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800584a:	f840 3b04 	str.w	r3, [r0], #4
 800584e:	d2e7      	bcs.n	8005820 <quorem+0xb0>
 8005850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005858:	b922      	cbnz	r2, 8005864 <quorem+0xf4>
 800585a:	3b04      	subs	r3, #4
 800585c:	429d      	cmp	r5, r3
 800585e:	461a      	mov	r2, r3
 8005860:	d30a      	bcc.n	8005878 <quorem+0x108>
 8005862:	613c      	str	r4, [r7, #16]
 8005864:	4630      	mov	r0, r6
 8005866:	b003      	add	sp, #12
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	3b04      	subs	r3, #4
 8005870:	2a00      	cmp	r2, #0
 8005872:	d1cb      	bne.n	800580c <quorem+0x9c>
 8005874:	3c01      	subs	r4, #1
 8005876:	e7c6      	b.n	8005806 <quorem+0x96>
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	3b04      	subs	r3, #4
 800587c:	2a00      	cmp	r2, #0
 800587e:	d1f0      	bne.n	8005862 <quorem+0xf2>
 8005880:	3c01      	subs	r4, #1
 8005882:	e7eb      	b.n	800585c <quorem+0xec>
 8005884:	2000      	movs	r0, #0
 8005886:	e7ee      	b.n	8005866 <quorem+0xf6>

08005888 <_dtoa_r>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	4616      	mov	r6, r2
 800588e:	461f      	mov	r7, r3
 8005890:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005892:	b099      	sub	sp, #100	; 0x64
 8005894:	4605      	mov	r5, r0
 8005896:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800589a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800589e:	b974      	cbnz	r4, 80058be <_dtoa_r+0x36>
 80058a0:	2010      	movs	r0, #16
 80058a2:	f000 fde3 	bl	800646c <malloc>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6268      	str	r0, [r5, #36]	; 0x24
 80058aa:	b920      	cbnz	r0, 80058b6 <_dtoa_r+0x2e>
 80058ac:	21ea      	movs	r1, #234	; 0xea
 80058ae:	4ba8      	ldr	r3, [pc, #672]	; (8005b50 <_dtoa_r+0x2c8>)
 80058b0:	48a8      	ldr	r0, [pc, #672]	; (8005b54 <_dtoa_r+0x2cc>)
 80058b2:	f001 fbdd 	bl	8007070 <__assert_func>
 80058b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058ba:	6004      	str	r4, [r0, #0]
 80058bc:	60c4      	str	r4, [r0, #12]
 80058be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	b151      	cbz	r1, 80058da <_dtoa_r+0x52>
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	2301      	movs	r3, #1
 80058c8:	4093      	lsls	r3, r2
 80058ca:	604a      	str	r2, [r1, #4]
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fe30 	bl	8006534 <_Bfree>
 80058d4:	2200      	movs	r2, #0
 80058d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	1e3b      	subs	r3, r7, #0
 80058dc:	bfaf      	iteee	ge
 80058de:	2300      	movge	r3, #0
 80058e0:	2201      	movlt	r2, #1
 80058e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058e6:	9305      	strlt	r3, [sp, #20]
 80058e8:	bfa8      	it	ge
 80058ea:	f8c8 3000 	strge.w	r3, [r8]
 80058ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <_dtoa_r+0x2d0>)
 80058f4:	bfb8      	it	lt
 80058f6:	f8c8 2000 	strlt.w	r2, [r8]
 80058fa:	ea33 0309 	bics.w	r3, r3, r9
 80058fe:	d119      	bne.n	8005934 <_dtoa_r+0xac>
 8005900:	f242 730f 	movw	r3, #9999	; 0x270f
 8005904:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800590c:	4333      	orrs	r3, r6
 800590e:	f000 857f 	beq.w	8006410 <_dtoa_r+0xb88>
 8005912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005914:	b953      	cbnz	r3, 800592c <_dtoa_r+0xa4>
 8005916:	4b91      	ldr	r3, [pc, #580]	; (8005b5c <_dtoa_r+0x2d4>)
 8005918:	e022      	b.n	8005960 <_dtoa_r+0xd8>
 800591a:	4b91      	ldr	r3, [pc, #580]	; (8005b60 <_dtoa_r+0x2d8>)
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	3308      	adds	r3, #8
 8005920:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	9803      	ldr	r0, [sp, #12]
 8005926:	b019      	add	sp, #100	; 0x64
 8005928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592c:	4b8b      	ldr	r3, [pc, #556]	; (8005b5c <_dtoa_r+0x2d4>)
 800592e:	9303      	str	r3, [sp, #12]
 8005930:	3303      	adds	r3, #3
 8005932:	e7f5      	b.n	8005920 <_dtoa_r+0x98>
 8005934:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005938:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800593c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005940:	2200      	movs	r2, #0
 8005942:	2300      	movs	r3, #0
 8005944:	f7fb f830 	bl	80009a8 <__aeabi_dcmpeq>
 8005948:	4680      	mov	r8, r0
 800594a:	b158      	cbz	r0, 8005964 <_dtoa_r+0xdc>
 800594c:	2301      	movs	r3, #1
 800594e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8558 	beq.w	800640a <_dtoa_r+0xb82>
 800595a:	4882      	ldr	r0, [pc, #520]	; (8005b64 <_dtoa_r+0x2dc>)
 800595c:	6018      	str	r0, [r3, #0]
 800595e:	1e43      	subs	r3, r0, #1
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	e7df      	b.n	8005924 <_dtoa_r+0x9c>
 8005964:	ab16      	add	r3, sp, #88	; 0x58
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	ab17      	add	r3, sp, #92	; 0x5c
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4628      	mov	r0, r5
 800596e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005972:	f001 f8c5 	bl	8006b00 <__d2b>
 8005976:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800597a:	4683      	mov	fp, r0
 800597c:	2c00      	cmp	r4, #0
 800597e:	d07f      	beq.n	8005a80 <_dtoa_r+0x1f8>
 8005980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005986:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800598a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800598e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005992:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005996:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800599a:	2200      	movs	r2, #0
 800599c:	4b72      	ldr	r3, [pc, #456]	; (8005b68 <_dtoa_r+0x2e0>)
 800599e:	f7fa fbe3 	bl	8000168 <__aeabi_dsub>
 80059a2:	a365      	add	r3, pc, #404	; (adr r3, 8005b38 <_dtoa_r+0x2b0>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fd96 	bl	80004d8 <__aeabi_dmul>
 80059ac:	a364      	add	r3, pc, #400	; (adr r3, 8005b40 <_dtoa_r+0x2b8>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fbdb 	bl	800016c <__adddf3>
 80059b6:	4606      	mov	r6, r0
 80059b8:	4620      	mov	r0, r4
 80059ba:	460f      	mov	r7, r1
 80059bc:	f7fa fd22 	bl	8000404 <__aeabi_i2d>
 80059c0:	a361      	add	r3, pc, #388	; (adr r3, 8005b48 <_dtoa_r+0x2c0>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fd87 	bl	80004d8 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fbcb 	bl	800016c <__adddf3>
 80059d6:	4606      	mov	r6, r0
 80059d8:	460f      	mov	r7, r1
 80059da:	f7fb f82d 	bl	8000a38 <__aeabi_d2iz>
 80059de:	2200      	movs	r2, #0
 80059e0:	4682      	mov	sl, r0
 80059e2:	2300      	movs	r3, #0
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa ffe8 	bl	80009bc <__aeabi_dcmplt>
 80059ec:	b148      	cbz	r0, 8005a02 <_dtoa_r+0x17a>
 80059ee:	4650      	mov	r0, sl
 80059f0:	f7fa fd08 	bl	8000404 <__aeabi_i2d>
 80059f4:	4632      	mov	r2, r6
 80059f6:	463b      	mov	r3, r7
 80059f8:	f7fa ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80059fc:	b908      	cbnz	r0, 8005a02 <_dtoa_r+0x17a>
 80059fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a02:	f1ba 0f16 	cmp.w	sl, #22
 8005a06:	d858      	bhi.n	8005aba <_dtoa_r+0x232>
 8005a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a0c:	4b57      	ldr	r3, [pc, #348]	; (8005b6c <_dtoa_r+0x2e4>)
 8005a0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f7fa ffd1 	bl	80009bc <__aeabi_dcmplt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d04f      	beq.n	8005abe <_dtoa_r+0x236>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a28:	1b1c      	subs	r4, r3, r4
 8005a2a:	1e63      	subs	r3, r4, #1
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	bf49      	itett	mi
 8005a30:	f1c4 0301 	rsbmi	r3, r4, #1
 8005a34:	2300      	movpl	r3, #0
 8005a36:	9306      	strmi	r3, [sp, #24]
 8005a38:	2300      	movmi	r3, #0
 8005a3a:	bf54      	ite	pl
 8005a3c:	9306      	strpl	r3, [sp, #24]
 8005a3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005a40:	f1ba 0f00 	cmp.w	sl, #0
 8005a44:	db3d      	blt.n	8005ac2 <_dtoa_r+0x23a>
 8005a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005a4c:	4453      	add	r3, sl
 8005a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a50:	2300      	movs	r3, #0
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	f200 808c 	bhi.w	8005b74 <_dtoa_r+0x2ec>
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	bfc4      	itt	gt
 8005a60:	3b04      	subgt	r3, #4
 8005a62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a66:	bfc8      	it	gt
 8005a68:	2400      	movgt	r4, #0
 8005a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8005a6e:	bfd8      	it	le
 8005a70:	2401      	movle	r4, #1
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	f200 808a 	bhi.w	8005b8c <_dtoa_r+0x304>
 8005a78:	e8df f003 	tbb	[pc, r3]
 8005a7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005a80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005a84:	441c      	add	r4, r3
 8005a86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	bfc3      	ittte	gt
 8005a8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005a96:	fa09 f303 	lslgt.w	r3, r9, r3
 8005a9a:	f1c3 0320 	rsble	r3, r3, #32
 8005a9e:	bfc6      	itte	gt
 8005aa0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005aa4:	4318      	orrgt	r0, r3
 8005aa6:	fa06 f003 	lslle.w	r0, r6, r3
 8005aaa:	f7fa fc9b 	bl	80003e4 <__aeabi_ui2d>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005ab4:	3c01      	subs	r4, #1
 8005ab6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ab8:	e76f      	b.n	800599a <_dtoa_r+0x112>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7b2      	b.n	8005a24 <_dtoa_r+0x19c>
 8005abe:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ac0:	e7b1      	b.n	8005a26 <_dtoa_r+0x19e>
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	eba3 030a 	sub.w	r3, r3, sl
 8005ac8:	9306      	str	r3, [sp, #24]
 8005aca:	f1ca 0300 	rsb	r3, sl, #0
 8005ace:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ad4:	e7be      	b.n	8005a54 <_dtoa_r+0x1cc>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dc58      	bgt.n	8005b92 <_dtoa_r+0x30a>
 8005ae0:	f04f 0901 	mov.w	r9, #1
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	f8cd 9020 	str.w	r9, [sp, #32]
 8005aea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005aee:	2200      	movs	r2, #0
 8005af0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005af2:	6042      	str	r2, [r0, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f102 0614 	add.w	r6, r2, #20
 8005afa:	429e      	cmp	r6, r3
 8005afc:	6841      	ldr	r1, [r0, #4]
 8005afe:	d94e      	bls.n	8005b9e <_dtoa_r+0x316>
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 fcd7 	bl	80064b4 <_Balloc>
 8005b06:	9003      	str	r0, [sp, #12]
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d14c      	bne.n	8005ba6 <_dtoa_r+0x31e>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b12:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <_dtoa_r+0x2e8>)
 8005b14:	e6cc      	b.n	80058b0 <_dtoa_r+0x28>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e7de      	b.n	8005ad8 <_dtoa_r+0x250>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b20:	eb0a 0903 	add.w	r9, sl, r3
 8005b24:	f109 0301 	add.w	r3, r9, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	9308      	str	r3, [sp, #32]
 8005b2c:	bfb8      	it	lt
 8005b2e:	2301      	movlt	r3, #1
 8005b30:	e7dd      	b.n	8005aee <_dtoa_r+0x266>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e7f2      	b.n	8005b1c <_dtoa_r+0x294>
 8005b36:	bf00      	nop
 8005b38:	636f4361 	.word	0x636f4361
 8005b3c:	3fd287a7 	.word	0x3fd287a7
 8005b40:	8b60c8b3 	.word	0x8b60c8b3
 8005b44:	3fc68a28 	.word	0x3fc68a28
 8005b48:	509f79fb 	.word	0x509f79fb
 8005b4c:	3fd34413 	.word	0x3fd34413
 8005b50:	08008ff5 	.word	0x08008ff5
 8005b54:	0800900c 	.word	0x0800900c
 8005b58:	7ff00000 	.word	0x7ff00000
 8005b5c:	08008ff1 	.word	0x08008ff1
 8005b60:	08008fe8 	.word	0x08008fe8
 8005b64:	08008fc5 	.word	0x08008fc5
 8005b68:	3ff80000 	.word	0x3ff80000
 8005b6c:	08009100 	.word	0x08009100
 8005b70:	08009067 	.word	0x08009067
 8005b74:	2401      	movs	r4, #1
 8005b76:	2300      	movs	r3, #0
 8005b78:	940b      	str	r4, [sp, #44]	; 0x2c
 8005b7a:	9322      	str	r3, [sp, #136]	; 0x88
 8005b7c:	f04f 39ff 	mov.w	r9, #4294967295
 8005b80:	2200      	movs	r2, #0
 8005b82:	2312      	movs	r3, #18
 8005b84:	f8cd 9020 	str.w	r9, [sp, #32]
 8005b88:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b8a:	e7b0      	b.n	8005aee <_dtoa_r+0x266>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b90:	e7f4      	b.n	8005b7c <_dtoa_r+0x2f4>
 8005b92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005b96:	464b      	mov	r3, r9
 8005b98:	f8cd 9020 	str.w	r9, [sp, #32]
 8005b9c:	e7a7      	b.n	8005aee <_dtoa_r+0x266>
 8005b9e:	3101      	adds	r1, #1
 8005ba0:	6041      	str	r1, [r0, #4]
 8005ba2:	0052      	lsls	r2, r2, #1
 8005ba4:	e7a7      	b.n	8005af6 <_dtoa_r+0x26e>
 8005ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ba8:	9a03      	ldr	r2, [sp, #12]
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	9b08      	ldr	r3, [sp, #32]
 8005bae:	2b0e      	cmp	r3, #14
 8005bb0:	f200 80a8 	bhi.w	8005d04 <_dtoa_r+0x47c>
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	f000 80a5 	beq.w	8005d04 <_dtoa_r+0x47c>
 8005bba:	f1ba 0f00 	cmp.w	sl, #0
 8005bbe:	dd34      	ble.n	8005c2a <_dtoa_r+0x3a2>
 8005bc0:	4a9a      	ldr	r2, [pc, #616]	; (8005e2c <_dtoa_r+0x5a4>)
 8005bc2:	f00a 030f 	and.w	r3, sl, #15
 8005bc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005bce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005bd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005bda:	d016      	beq.n	8005c0a <_dtoa_r+0x382>
 8005bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005be0:	4b93      	ldr	r3, [pc, #588]	; (8005e30 <_dtoa_r+0x5a8>)
 8005be2:	2703      	movs	r7, #3
 8005be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005be8:	f7fa fda0 	bl	800072c <__aeabi_ddiv>
 8005bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bf0:	f004 040f 	and.w	r4, r4, #15
 8005bf4:	4e8e      	ldr	r6, [pc, #568]	; (8005e30 <_dtoa_r+0x5a8>)
 8005bf6:	b954      	cbnz	r4, 8005c0e <_dtoa_r+0x386>
 8005bf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c00:	f7fa fd94 	bl	800072c <__aeabi_ddiv>
 8005c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c08:	e029      	b.n	8005c5e <_dtoa_r+0x3d6>
 8005c0a:	2702      	movs	r7, #2
 8005c0c:	e7f2      	b.n	8005bf4 <_dtoa_r+0x36c>
 8005c0e:	07e1      	lsls	r1, r4, #31
 8005c10:	d508      	bpl.n	8005c24 <_dtoa_r+0x39c>
 8005c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c22:	3701      	adds	r7, #1
 8005c24:	1064      	asrs	r4, r4, #1
 8005c26:	3608      	adds	r6, #8
 8005c28:	e7e5      	b.n	8005bf6 <_dtoa_r+0x36e>
 8005c2a:	f000 80a5 	beq.w	8005d78 <_dtoa_r+0x4f0>
 8005c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c32:	f1ca 0400 	rsb	r4, sl, #0
 8005c36:	4b7d      	ldr	r3, [pc, #500]	; (8005e2c <_dtoa_r+0x5a4>)
 8005c38:	f004 020f 	and.w	r2, r4, #15
 8005c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa fc48 	bl	80004d8 <__aeabi_dmul>
 8005c48:	2702      	movs	r7, #2
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c50:	4e77      	ldr	r6, [pc, #476]	; (8005e30 <_dtoa_r+0x5a8>)
 8005c52:	1124      	asrs	r4, r4, #4
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	f040 8084 	bne.w	8005d62 <_dtoa_r+0x4da>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1d2      	bne.n	8005c04 <_dtoa_r+0x37c>
 8005c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 808b 	beq.w	8005d7c <_dtoa_r+0x4f4>
 8005c66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c72:	2200      	movs	r2, #0
 8005c74:	4b6f      	ldr	r3, [pc, #444]	; (8005e34 <_dtoa_r+0x5ac>)
 8005c76:	f7fa fea1 	bl	80009bc <__aeabi_dcmplt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d07e      	beq.n	8005d7c <_dtoa_r+0x4f4>
 8005c7e:	9b08      	ldr	r3, [sp, #32]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d07b      	beq.n	8005d7c <_dtoa_r+0x4f4>
 8005c84:	f1b9 0f00 	cmp.w	r9, #0
 8005c88:	dd38      	ble.n	8005cfc <_dtoa_r+0x474>
 8005c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4b69      	ldr	r3, [pc, #420]	; (8005e38 <_dtoa_r+0x5b0>)
 8005c92:	f7fa fc21 	bl	80004d8 <__aeabi_dmul>
 8005c96:	464c      	mov	r4, r9
 8005c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c9c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005ca0:	3701      	adds	r7, #1
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f7fa fbae 	bl	8000404 <__aeabi_i2d>
 8005ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cac:	f7fa fc14 	bl	80004d8 <__aeabi_dmul>
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4b62      	ldr	r3, [pc, #392]	; (8005e3c <_dtoa_r+0x5b4>)
 8005cb4:	f7fa fa5a 	bl	800016c <__adddf3>
 8005cb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005cbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cc0:	9611      	str	r6, [sp, #68]	; 0x44
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	d15d      	bne.n	8005d82 <_dtoa_r+0x4fa>
 8005cc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4b5c      	ldr	r3, [pc, #368]	; (8005e40 <_dtoa_r+0x5b8>)
 8005cce:	f7fa fa4b 	bl	8000168 <__aeabi_dsub>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cda:	4633      	mov	r3, r6
 8005cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cde:	f7fa fe8b 	bl	80009f8 <__aeabi_dcmpgt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f040 829c 	bne.w	8006220 <_dtoa_r+0x998>
 8005ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005cf2:	f7fa fe63 	bl	80009bc <__aeabi_dcmplt>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f040 8290 	bne.w	800621c <_dtoa_r+0x994>
 8005cfc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f2c0 8152 	blt.w	8005fb0 <_dtoa_r+0x728>
 8005d0c:	f1ba 0f0e 	cmp.w	sl, #14
 8005d10:	f300 814e 	bgt.w	8005fb0 <_dtoa_r+0x728>
 8005d14:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <_dtoa_r+0x5a4>)
 8005d16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f280 80db 	bge.w	8005ee0 <_dtoa_r+0x658>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f300 80d7 	bgt.w	8005ee0 <_dtoa_r+0x658>
 8005d32:	f040 8272 	bne.w	800621a <_dtoa_r+0x992>
 8005d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <_dtoa_r+0x5b8>)
 8005d3e:	f7fa fbcb 	bl	80004d8 <__aeabi_dmul>
 8005d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d46:	f7fa fe4d 	bl	80009e4 <__aeabi_dcmpge>
 8005d4a:	9c08      	ldr	r4, [sp, #32]
 8005d4c:	4626      	mov	r6, r4
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	f040 8248 	bne.w	80061e4 <_dtoa_r+0x95c>
 8005d54:	2331      	movs	r3, #49	; 0x31
 8005d56:	9f03      	ldr	r7, [sp, #12]
 8005d58:	f10a 0a01 	add.w	sl, sl, #1
 8005d5c:	f807 3b01 	strb.w	r3, [r7], #1
 8005d60:	e244      	b.n	80061ec <_dtoa_r+0x964>
 8005d62:	07e2      	lsls	r2, r4, #31
 8005d64:	d505      	bpl.n	8005d72 <_dtoa_r+0x4ea>
 8005d66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d6a:	f7fa fbb5 	bl	80004d8 <__aeabi_dmul>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	3701      	adds	r7, #1
 8005d72:	1064      	asrs	r4, r4, #1
 8005d74:	3608      	adds	r6, #8
 8005d76:	e76d      	b.n	8005c54 <_dtoa_r+0x3cc>
 8005d78:	2702      	movs	r7, #2
 8005d7a:	e770      	b.n	8005c5e <_dtoa_r+0x3d6>
 8005d7c:	46d0      	mov	r8, sl
 8005d7e:	9c08      	ldr	r4, [sp, #32]
 8005d80:	e78f      	b.n	8005ca2 <_dtoa_r+0x41a>
 8005d82:	9903      	ldr	r1, [sp, #12]
 8005d84:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <_dtoa_r+0x5a4>)
 8005d86:	4421      	add	r1, r4
 8005d88:	9112      	str	r1, [sp, #72]	; 0x48
 8005d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d98:	2900      	cmp	r1, #0
 8005d9a:	d055      	beq.n	8005e48 <_dtoa_r+0x5c0>
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4929      	ldr	r1, [pc, #164]	; (8005e44 <_dtoa_r+0x5bc>)
 8005da0:	f7fa fcc4 	bl	800072c <__aeabi_ddiv>
 8005da4:	463b      	mov	r3, r7
 8005da6:	4632      	mov	r2, r6
 8005da8:	f7fa f9de 	bl	8000168 <__aeabi_dsub>
 8005dac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005db0:	9f03      	ldr	r7, [sp, #12]
 8005db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005db6:	f7fa fe3f 	bl	8000a38 <__aeabi_d2iz>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	f7fa fb22 	bl	8000404 <__aeabi_i2d>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dc8:	f7fa f9ce 	bl	8000168 <__aeabi_dsub>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	3430      	adds	r4, #48	; 0x30
 8005dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dda:	f807 4b01 	strb.w	r4, [r7], #1
 8005dde:	f7fa fded 	bl	80009bc <__aeabi_dcmplt>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d174      	bne.n	8005ed0 <_dtoa_r+0x648>
 8005de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dea:	2000      	movs	r0, #0
 8005dec:	4911      	ldr	r1, [pc, #68]	; (8005e34 <_dtoa_r+0x5ac>)
 8005dee:	f7fa f9bb 	bl	8000168 <__aeabi_dsub>
 8005df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005df6:	f7fa fde1 	bl	80009bc <__aeabi_dcmplt>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f040 80b7 	bne.w	8005f6e <_dtoa_r+0x6e6>
 8005e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e02:	429f      	cmp	r7, r3
 8005e04:	f43f af7a 	beq.w	8005cfc <_dtoa_r+0x474>
 8005e08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <_dtoa_r+0x5b0>)
 8005e10:	f7fa fb62 	bl	80004d8 <__aeabi_dmul>
 8005e14:	2200      	movs	r2, #0
 8005e16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <_dtoa_r+0x5b0>)
 8005e20:	f7fa fb5a 	bl	80004d8 <__aeabi_dmul>
 8005e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e28:	e7c3      	b.n	8005db2 <_dtoa_r+0x52a>
 8005e2a:	bf00      	nop
 8005e2c:	08009100 	.word	0x08009100
 8005e30:	080090d8 	.word	0x080090d8
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	40240000 	.word	0x40240000
 8005e3c:	401c0000 	.word	0x401c0000
 8005e40:	40140000 	.word	0x40140000
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	4630      	mov	r0, r6
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	f7fa fb44 	bl	80004d8 <__aeabi_dmul>
 8005e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e56:	9c03      	ldr	r4, [sp, #12]
 8005e58:	9314      	str	r3, [sp, #80]	; 0x50
 8005e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e5e:	f7fa fdeb 	bl	8000a38 <__aeabi_d2iz>
 8005e62:	9015      	str	r0, [sp, #84]	; 0x54
 8005e64:	f7fa face 	bl	8000404 <__aeabi_i2d>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e70:	f7fa f97a 	bl	8000168 <__aeabi_dsub>
 8005e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e76:	4606      	mov	r6, r0
 8005e78:	3330      	adds	r3, #48	; 0x30
 8005e7a:	f804 3b01 	strb.w	r3, [r4], #1
 8005e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e80:	460f      	mov	r7, r1
 8005e82:	429c      	cmp	r4, r3
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	d124      	bne.n	8005ed4 <_dtoa_r+0x64c>
 8005e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e8e:	4bb0      	ldr	r3, [pc, #704]	; (8006150 <_dtoa_r+0x8c8>)
 8005e90:	f7fa f96c 	bl	800016c <__adddf3>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4630      	mov	r0, r6
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	f7fa fdac 	bl	80009f8 <__aeabi_dcmpgt>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d163      	bne.n	8005f6c <_dtoa_r+0x6e4>
 8005ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	49a9      	ldr	r1, [pc, #676]	; (8006150 <_dtoa_r+0x8c8>)
 8005eac:	f7fa f95c 	bl	8000168 <__aeabi_dsub>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa fd80 	bl	80009bc <__aeabi_dcmplt>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f43f af1d 	beq.w	8005cfc <_dtoa_r+0x474>
 8005ec2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ec4:	1e7b      	subs	r3, r7, #1
 8005ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8005ec8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ecc:	2b30      	cmp	r3, #48	; 0x30
 8005ece:	d0f8      	beq.n	8005ec2 <_dtoa_r+0x63a>
 8005ed0:	46c2      	mov	sl, r8
 8005ed2:	e03b      	b.n	8005f4c <_dtoa_r+0x6c4>
 8005ed4:	4b9f      	ldr	r3, [pc, #636]	; (8006154 <_dtoa_r+0x8cc>)
 8005ed6:	f7fa faff 	bl	80004d8 <__aeabi_dmul>
 8005eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ede:	e7bc      	b.n	8005e5a <_dtoa_r+0x5d2>
 8005ee0:	9f03      	ldr	r7, [sp, #12]
 8005ee2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa fc1d 	bl	800072c <__aeabi_ddiv>
 8005ef2:	f7fa fda1 	bl	8000a38 <__aeabi_d2iz>
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	f7fa fa84 	bl	8000404 <__aeabi_i2d>
 8005efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f00:	f7fa faea 	bl	80004d8 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	f7fa f92c 	bl	8000168 <__aeabi_dsub>
 8005f10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f14:	f807 6b01 	strb.w	r6, [r7], #1
 8005f18:	9e03      	ldr	r6, [sp, #12]
 8005f1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005f1e:	1bbe      	subs	r6, r7, r6
 8005f20:	45b4      	cmp	ip, r6
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	d136      	bne.n	8005f96 <_dtoa_r+0x70e>
 8005f28:	f7fa f920 	bl	800016c <__adddf3>
 8005f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f30:	4680      	mov	r8, r0
 8005f32:	4689      	mov	r9, r1
 8005f34:	f7fa fd60 	bl	80009f8 <__aeabi_dcmpgt>
 8005f38:	bb58      	cbnz	r0, 8005f92 <_dtoa_r+0x70a>
 8005f3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4649      	mov	r1, r9
 8005f42:	f7fa fd31 	bl	80009a8 <__aeabi_dcmpeq>
 8005f46:	b108      	cbz	r0, 8005f4c <_dtoa_r+0x6c4>
 8005f48:	07e1      	lsls	r1, r4, #31
 8005f4a:	d422      	bmi.n	8005f92 <_dtoa_r+0x70a>
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f000 faf0 	bl	8006534 <_Bfree>
 8005f54:	2300      	movs	r3, #0
 8005f56:	703b      	strb	r3, [r7, #0]
 8005f58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005f5a:	f10a 0001 	add.w	r0, sl, #1
 8005f5e:	6018      	str	r0, [r3, #0]
 8005f60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f43f acde 	beq.w	8005924 <_dtoa_r+0x9c>
 8005f68:	601f      	str	r7, [r3, #0]
 8005f6a:	e4db      	b.n	8005924 <_dtoa_r+0x9c>
 8005f6c:	4627      	mov	r7, r4
 8005f6e:	463b      	mov	r3, r7
 8005f70:	461f      	mov	r7, r3
 8005f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f76:	2a39      	cmp	r2, #57	; 0x39
 8005f78:	d107      	bne.n	8005f8a <_dtoa_r+0x702>
 8005f7a:	9a03      	ldr	r2, [sp, #12]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1f7      	bne.n	8005f70 <_dtoa_r+0x6e8>
 8005f80:	2230      	movs	r2, #48	; 0x30
 8005f82:	9903      	ldr	r1, [sp, #12]
 8005f84:	f108 0801 	add.w	r8, r8, #1
 8005f88:	700a      	strb	r2, [r1, #0]
 8005f8a:	781a      	ldrb	r2, [r3, #0]
 8005f8c:	3201      	adds	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e79e      	b.n	8005ed0 <_dtoa_r+0x648>
 8005f92:	46d0      	mov	r8, sl
 8005f94:	e7eb      	b.n	8005f6e <_dtoa_r+0x6e6>
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b6e      	ldr	r3, [pc, #440]	; (8006154 <_dtoa_r+0x8cc>)
 8005f9a:	f7fa fa9d 	bl	80004d8 <__aeabi_dmul>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	4689      	mov	r9, r1
 8005fa6:	f7fa fcff 	bl	80009a8 <__aeabi_dcmpeq>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d09b      	beq.n	8005ee6 <_dtoa_r+0x65e>
 8005fae:	e7cd      	b.n	8005f4c <_dtoa_r+0x6c4>
 8005fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	f000 80d0 	beq.w	8006158 <_dtoa_r+0x8d0>
 8005fb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fba:	2a01      	cmp	r2, #1
 8005fbc:	f300 80ae 	bgt.w	800611c <_dtoa_r+0x894>
 8005fc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	f000 80a6 	beq.w	8006114 <_dtoa_r+0x88c>
 8005fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fce:	9f06      	ldr	r7, [sp, #24]
 8005fd0:	9a06      	ldr	r2, [sp, #24]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	441a      	add	r2, r3
 8005fd6:	9206      	str	r2, [sp, #24]
 8005fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fda:	4628      	mov	r0, r5
 8005fdc:	441a      	add	r2, r3
 8005fde:	9209      	str	r2, [sp, #36]	; 0x24
 8005fe0:	f000 fb5e 	bl	80066a0 <__i2b>
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	dd0c      	ble.n	8006004 <_dtoa_r+0x77c>
 8005fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd09      	ble.n	8006004 <_dtoa_r+0x77c>
 8005ff0:	42bb      	cmp	r3, r7
 8005ff2:	bfa8      	it	ge
 8005ff4:	463b      	movge	r3, r7
 8005ff6:	9a06      	ldr	r2, [sp, #24]
 8005ff8:	1aff      	subs	r7, r7, r3
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	9206      	str	r2, [sp, #24]
 8005ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	9309      	str	r3, [sp, #36]	; 0x24
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	b1f3      	cbz	r3, 8006046 <_dtoa_r+0x7be>
 8006008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80a8 	beq.w	8006160 <_dtoa_r+0x8d8>
 8006010:	2c00      	cmp	r4, #0
 8006012:	dd10      	ble.n	8006036 <_dtoa_r+0x7ae>
 8006014:	4631      	mov	r1, r6
 8006016:	4622      	mov	r2, r4
 8006018:	4628      	mov	r0, r5
 800601a:	f000 fbff 	bl	800681c <__pow5mult>
 800601e:	465a      	mov	r2, fp
 8006020:	4601      	mov	r1, r0
 8006022:	4606      	mov	r6, r0
 8006024:	4628      	mov	r0, r5
 8006026:	f000 fb51 	bl	80066cc <__multiply>
 800602a:	4680      	mov	r8, r0
 800602c:	4659      	mov	r1, fp
 800602e:	4628      	mov	r0, r5
 8006030:	f000 fa80 	bl	8006534 <_Bfree>
 8006034:	46c3      	mov	fp, r8
 8006036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006038:	1b1a      	subs	r2, r3, r4
 800603a:	d004      	beq.n	8006046 <_dtoa_r+0x7be>
 800603c:	4659      	mov	r1, fp
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fbec 	bl	800681c <__pow5mult>
 8006044:	4683      	mov	fp, r0
 8006046:	2101      	movs	r1, #1
 8006048:	4628      	mov	r0, r5
 800604a:	f000 fb29 	bl	80066a0 <__i2b>
 800604e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006050:	4604      	mov	r4, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f340 8086 	ble.w	8006164 <_dtoa_r+0x8dc>
 8006058:	461a      	mov	r2, r3
 800605a:	4601      	mov	r1, r0
 800605c:	4628      	mov	r0, r5
 800605e:	f000 fbdd 	bl	800681c <__pow5mult>
 8006062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006064:	4604      	mov	r4, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	dd7f      	ble.n	800616a <_dtoa_r+0x8e2>
 800606a:	f04f 0800 	mov.w	r8, #0
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006074:	6918      	ldr	r0, [r3, #16]
 8006076:	f000 fac5 	bl	8006604 <__hi0bits>
 800607a:	f1c0 0020 	rsb	r0, r0, #32
 800607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006080:	4418      	add	r0, r3
 8006082:	f010 001f 	ands.w	r0, r0, #31
 8006086:	f000 8092 	beq.w	80061ae <_dtoa_r+0x926>
 800608a:	f1c0 0320 	rsb	r3, r0, #32
 800608e:	2b04      	cmp	r3, #4
 8006090:	f340 808a 	ble.w	80061a8 <_dtoa_r+0x920>
 8006094:	f1c0 001c 	rsb	r0, r0, #28
 8006098:	9b06      	ldr	r3, [sp, #24]
 800609a:	4407      	add	r7, r0
 800609c:	4403      	add	r3, r0
 800609e:	9306      	str	r3, [sp, #24]
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	4403      	add	r3, r0
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	9b06      	ldr	r3, [sp, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dd05      	ble.n	80060b8 <_dtoa_r+0x830>
 80060ac:	4659      	mov	r1, fp
 80060ae:	461a      	mov	r2, r3
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 fc0d 	bl	80068d0 <__lshift>
 80060b6:	4683      	mov	fp, r0
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dd05      	ble.n	80060ca <_dtoa_r+0x842>
 80060be:	4621      	mov	r1, r4
 80060c0:	461a      	mov	r2, r3
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 fc04 	bl	80068d0 <__lshift>
 80060c8:	4604      	mov	r4, r0
 80060ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d070      	beq.n	80061b2 <_dtoa_r+0x92a>
 80060d0:	4621      	mov	r1, r4
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fc6c 	bl	80069b0 <__mcmp>
 80060d8:	2800      	cmp	r0, #0
 80060da:	da6a      	bge.n	80061b2 <_dtoa_r+0x92a>
 80060dc:	2300      	movs	r3, #0
 80060de:	4659      	mov	r1, fp
 80060e0:	220a      	movs	r2, #10
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 fa48 	bl	8006578 <__multadd>
 80060e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ea:	4683      	mov	fp, r0
 80060ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8194 	beq.w	800641e <_dtoa_r+0xb96>
 80060f6:	4631      	mov	r1, r6
 80060f8:	2300      	movs	r3, #0
 80060fa:	220a      	movs	r2, #10
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fa3b 	bl	8006578 <__multadd>
 8006102:	f1b9 0f00 	cmp.w	r9, #0
 8006106:	4606      	mov	r6, r0
 8006108:	f300 8093 	bgt.w	8006232 <_dtoa_r+0x9aa>
 800610c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800610e:	2b02      	cmp	r3, #2
 8006110:	dc57      	bgt.n	80061c2 <_dtoa_r+0x93a>
 8006112:	e08e      	b.n	8006232 <_dtoa_r+0x9aa>
 8006114:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800611a:	e757      	b.n	8005fcc <_dtoa_r+0x744>
 800611c:	9b08      	ldr	r3, [sp, #32]
 800611e:	1e5c      	subs	r4, r3, #1
 8006120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006122:	42a3      	cmp	r3, r4
 8006124:	bfb7      	itett	lt
 8006126:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006128:	1b1c      	subge	r4, r3, r4
 800612a:	1ae2      	sublt	r2, r4, r3
 800612c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800612e:	bfbe      	ittt	lt
 8006130:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006132:	189b      	addlt	r3, r3, r2
 8006134:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006136:	9b08      	ldr	r3, [sp, #32]
 8006138:	bfb8      	it	lt
 800613a:	2400      	movlt	r4, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	bfbb      	ittet	lt
 8006140:	9b06      	ldrlt	r3, [sp, #24]
 8006142:	9a08      	ldrlt	r2, [sp, #32]
 8006144:	9f06      	ldrge	r7, [sp, #24]
 8006146:	1a9f      	sublt	r7, r3, r2
 8006148:	bfac      	ite	ge
 800614a:	9b08      	ldrge	r3, [sp, #32]
 800614c:	2300      	movlt	r3, #0
 800614e:	e73f      	b.n	8005fd0 <_dtoa_r+0x748>
 8006150:	3fe00000 	.word	0x3fe00000
 8006154:	40240000 	.word	0x40240000
 8006158:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800615a:	9f06      	ldr	r7, [sp, #24]
 800615c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800615e:	e742      	b.n	8005fe6 <_dtoa_r+0x75e>
 8006160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006162:	e76b      	b.n	800603c <_dtoa_r+0x7b4>
 8006164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006166:	2b01      	cmp	r3, #1
 8006168:	dc19      	bgt.n	800619e <_dtoa_r+0x916>
 800616a:	9b04      	ldr	r3, [sp, #16]
 800616c:	b9bb      	cbnz	r3, 800619e <_dtoa_r+0x916>
 800616e:	9b05      	ldr	r3, [sp, #20]
 8006170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006174:	b99b      	cbnz	r3, 800619e <_dtoa_r+0x916>
 8006176:	9b05      	ldr	r3, [sp, #20]
 8006178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800617c:	0d1b      	lsrs	r3, r3, #20
 800617e:	051b      	lsls	r3, r3, #20
 8006180:	b183      	cbz	r3, 80061a4 <_dtoa_r+0x91c>
 8006182:	f04f 0801 	mov.w	r8, #1
 8006186:	9b06      	ldr	r3, [sp, #24]
 8006188:	3301      	adds	r3, #1
 800618a:	9306      	str	r3, [sp, #24]
 800618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618e:	3301      	adds	r3, #1
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006194:	2b00      	cmp	r3, #0
 8006196:	f47f af6a 	bne.w	800606e <_dtoa_r+0x7e6>
 800619a:	2001      	movs	r0, #1
 800619c:	e76f      	b.n	800607e <_dtoa_r+0x7f6>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	e7f6      	b.n	8006192 <_dtoa_r+0x90a>
 80061a4:	4698      	mov	r8, r3
 80061a6:	e7f4      	b.n	8006192 <_dtoa_r+0x90a>
 80061a8:	f43f af7d 	beq.w	80060a6 <_dtoa_r+0x81e>
 80061ac:	4618      	mov	r0, r3
 80061ae:	301c      	adds	r0, #28
 80061b0:	e772      	b.n	8006098 <_dtoa_r+0x810>
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc36      	bgt.n	8006226 <_dtoa_r+0x99e>
 80061b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	dd33      	ble.n	8006226 <_dtoa_r+0x99e>
 80061be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061c2:	f1b9 0f00 	cmp.w	r9, #0
 80061c6:	d10d      	bne.n	80061e4 <_dtoa_r+0x95c>
 80061c8:	4621      	mov	r1, r4
 80061ca:	464b      	mov	r3, r9
 80061cc:	2205      	movs	r2, #5
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 f9d2 	bl	8006578 <__multadd>
 80061d4:	4601      	mov	r1, r0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4658      	mov	r0, fp
 80061da:	f000 fbe9 	bl	80069b0 <__mcmp>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f73f adb8 	bgt.w	8005d54 <_dtoa_r+0x4cc>
 80061e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061e6:	9f03      	ldr	r7, [sp, #12]
 80061e8:	ea6f 0a03 	mvn.w	sl, r3
 80061ec:	f04f 0800 	mov.w	r8, #0
 80061f0:	4621      	mov	r1, r4
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 f99e 	bl	8006534 <_Bfree>
 80061f8:	2e00      	cmp	r6, #0
 80061fa:	f43f aea7 	beq.w	8005f4c <_dtoa_r+0x6c4>
 80061fe:	f1b8 0f00 	cmp.w	r8, #0
 8006202:	d005      	beq.n	8006210 <_dtoa_r+0x988>
 8006204:	45b0      	cmp	r8, r6
 8006206:	d003      	beq.n	8006210 <_dtoa_r+0x988>
 8006208:	4641      	mov	r1, r8
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f992 	bl	8006534 <_Bfree>
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	f000 f98e 	bl	8006534 <_Bfree>
 8006218:	e698      	b.n	8005f4c <_dtoa_r+0x6c4>
 800621a:	2400      	movs	r4, #0
 800621c:	4626      	mov	r6, r4
 800621e:	e7e1      	b.n	80061e4 <_dtoa_r+0x95c>
 8006220:	46c2      	mov	sl, r8
 8006222:	4626      	mov	r6, r4
 8006224:	e596      	b.n	8005d54 <_dtoa_r+0x4cc>
 8006226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80fd 	beq.w	800642c <_dtoa_r+0xba4>
 8006232:	2f00      	cmp	r7, #0
 8006234:	dd05      	ble.n	8006242 <_dtoa_r+0x9ba>
 8006236:	4631      	mov	r1, r6
 8006238:	463a      	mov	r2, r7
 800623a:	4628      	mov	r0, r5
 800623c:	f000 fb48 	bl	80068d0 <__lshift>
 8006240:	4606      	mov	r6, r0
 8006242:	f1b8 0f00 	cmp.w	r8, #0
 8006246:	d05c      	beq.n	8006302 <_dtoa_r+0xa7a>
 8006248:	4628      	mov	r0, r5
 800624a:	6871      	ldr	r1, [r6, #4]
 800624c:	f000 f932 	bl	80064b4 <_Balloc>
 8006250:	4607      	mov	r7, r0
 8006252:	b928      	cbnz	r0, 8006260 <_dtoa_r+0x9d8>
 8006254:	4602      	mov	r2, r0
 8006256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800625a:	4b7f      	ldr	r3, [pc, #508]	; (8006458 <_dtoa_r+0xbd0>)
 800625c:	f7ff bb28 	b.w	80058b0 <_dtoa_r+0x28>
 8006260:	6932      	ldr	r2, [r6, #16]
 8006262:	f106 010c 	add.w	r1, r6, #12
 8006266:	3202      	adds	r2, #2
 8006268:	0092      	lsls	r2, r2, #2
 800626a:	300c      	adds	r0, #12
 800626c:	f000 f914 	bl	8006498 <memcpy>
 8006270:	2201      	movs	r2, #1
 8006272:	4639      	mov	r1, r7
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fb2b 	bl	80068d0 <__lshift>
 800627a:	46b0      	mov	r8, r6
 800627c:	4606      	mov	r6, r0
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	9308      	str	r3, [sp, #32]
 8006284:	9b03      	ldr	r3, [sp, #12]
 8006286:	444b      	add	r3, r9
 8006288:	930a      	str	r3, [sp, #40]	; 0x28
 800628a:	9b04      	ldr	r3, [sp, #16]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	9309      	str	r3, [sp, #36]	; 0x24
 8006292:	9b08      	ldr	r3, [sp, #32]
 8006294:	4621      	mov	r1, r4
 8006296:	3b01      	subs	r3, #1
 8006298:	4658      	mov	r0, fp
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	f7ff fa68 	bl	8005770 <quorem>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4641      	mov	r1, r8
 80062a4:	3330      	adds	r3, #48	; 0x30
 80062a6:	9006      	str	r0, [sp, #24]
 80062a8:	4658      	mov	r0, fp
 80062aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80062ac:	f000 fb80 	bl	80069b0 <__mcmp>
 80062b0:	4632      	mov	r2, r6
 80062b2:	4681      	mov	r9, r0
 80062b4:	4621      	mov	r1, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 fb96 	bl	80069e8 <__mdiff>
 80062bc:	68c2      	ldr	r2, [r0, #12]
 80062be:	4607      	mov	r7, r0
 80062c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c2:	bb02      	cbnz	r2, 8006306 <_dtoa_r+0xa7e>
 80062c4:	4601      	mov	r1, r0
 80062c6:	4658      	mov	r0, fp
 80062c8:	f000 fb72 	bl	80069b0 <__mcmp>
 80062cc:	4602      	mov	r2, r0
 80062ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d0:	4639      	mov	r1, r7
 80062d2:	4628      	mov	r0, r5
 80062d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80062d8:	f000 f92c 	bl	8006534 <_Bfree>
 80062dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062e0:	9f08      	ldr	r7, [sp, #32]
 80062e2:	ea43 0102 	orr.w	r1, r3, r2
 80062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e8:	430b      	orrs	r3, r1
 80062ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ec:	d10d      	bne.n	800630a <_dtoa_r+0xa82>
 80062ee:	2b39      	cmp	r3, #57	; 0x39
 80062f0:	d029      	beq.n	8006346 <_dtoa_r+0xabe>
 80062f2:	f1b9 0f00 	cmp.w	r9, #0
 80062f6:	dd01      	ble.n	80062fc <_dtoa_r+0xa74>
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	3331      	adds	r3, #49	; 0x31
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	7013      	strb	r3, [r2, #0]
 8006300:	e776      	b.n	80061f0 <_dtoa_r+0x968>
 8006302:	4630      	mov	r0, r6
 8006304:	e7b9      	b.n	800627a <_dtoa_r+0x9f2>
 8006306:	2201      	movs	r2, #1
 8006308:	e7e2      	b.n	80062d0 <_dtoa_r+0xa48>
 800630a:	f1b9 0f00 	cmp.w	r9, #0
 800630e:	db06      	blt.n	800631e <_dtoa_r+0xa96>
 8006310:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006312:	ea41 0909 	orr.w	r9, r1, r9
 8006316:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006318:	ea59 0101 	orrs.w	r1, r9, r1
 800631c:	d120      	bne.n	8006360 <_dtoa_r+0xad8>
 800631e:	2a00      	cmp	r2, #0
 8006320:	ddec      	ble.n	80062fc <_dtoa_r+0xa74>
 8006322:	4659      	mov	r1, fp
 8006324:	2201      	movs	r2, #1
 8006326:	4628      	mov	r0, r5
 8006328:	9308      	str	r3, [sp, #32]
 800632a:	f000 fad1 	bl	80068d0 <__lshift>
 800632e:	4621      	mov	r1, r4
 8006330:	4683      	mov	fp, r0
 8006332:	f000 fb3d 	bl	80069b0 <__mcmp>
 8006336:	2800      	cmp	r0, #0
 8006338:	9b08      	ldr	r3, [sp, #32]
 800633a:	dc02      	bgt.n	8006342 <_dtoa_r+0xaba>
 800633c:	d1de      	bne.n	80062fc <_dtoa_r+0xa74>
 800633e:	07da      	lsls	r2, r3, #31
 8006340:	d5dc      	bpl.n	80062fc <_dtoa_r+0xa74>
 8006342:	2b39      	cmp	r3, #57	; 0x39
 8006344:	d1d8      	bne.n	80062f8 <_dtoa_r+0xa70>
 8006346:	2339      	movs	r3, #57	; 0x39
 8006348:	9a04      	ldr	r2, [sp, #16]
 800634a:	7013      	strb	r3, [r2, #0]
 800634c:	463b      	mov	r3, r7
 800634e:	461f      	mov	r7, r3
 8006350:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006354:	3b01      	subs	r3, #1
 8006356:	2a39      	cmp	r2, #57	; 0x39
 8006358:	d050      	beq.n	80063fc <_dtoa_r+0xb74>
 800635a:	3201      	adds	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e747      	b.n	80061f0 <_dtoa_r+0x968>
 8006360:	2a00      	cmp	r2, #0
 8006362:	dd03      	ble.n	800636c <_dtoa_r+0xae4>
 8006364:	2b39      	cmp	r3, #57	; 0x39
 8006366:	d0ee      	beq.n	8006346 <_dtoa_r+0xabe>
 8006368:	3301      	adds	r3, #1
 800636a:	e7c7      	b.n	80062fc <_dtoa_r+0xa74>
 800636c:	9a08      	ldr	r2, [sp, #32]
 800636e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006370:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006374:	428a      	cmp	r2, r1
 8006376:	d02a      	beq.n	80063ce <_dtoa_r+0xb46>
 8006378:	4659      	mov	r1, fp
 800637a:	2300      	movs	r3, #0
 800637c:	220a      	movs	r2, #10
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f8fa 	bl	8006578 <__multadd>
 8006384:	45b0      	cmp	r8, r6
 8006386:	4683      	mov	fp, r0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	f04f 020a 	mov.w	r2, #10
 8006390:	4641      	mov	r1, r8
 8006392:	4628      	mov	r0, r5
 8006394:	d107      	bne.n	80063a6 <_dtoa_r+0xb1e>
 8006396:	f000 f8ef 	bl	8006578 <__multadd>
 800639a:	4680      	mov	r8, r0
 800639c:	4606      	mov	r6, r0
 800639e:	9b08      	ldr	r3, [sp, #32]
 80063a0:	3301      	adds	r3, #1
 80063a2:	9308      	str	r3, [sp, #32]
 80063a4:	e775      	b.n	8006292 <_dtoa_r+0xa0a>
 80063a6:	f000 f8e7 	bl	8006578 <__multadd>
 80063aa:	4631      	mov	r1, r6
 80063ac:	4680      	mov	r8, r0
 80063ae:	2300      	movs	r3, #0
 80063b0:	220a      	movs	r2, #10
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f8e0 	bl	8006578 <__multadd>
 80063b8:	4606      	mov	r6, r0
 80063ba:	e7f0      	b.n	800639e <_dtoa_r+0xb16>
 80063bc:	f1b9 0f00 	cmp.w	r9, #0
 80063c0:	bfcc      	ite	gt
 80063c2:	464f      	movgt	r7, r9
 80063c4:	2701      	movle	r7, #1
 80063c6:	f04f 0800 	mov.w	r8, #0
 80063ca:	9a03      	ldr	r2, [sp, #12]
 80063cc:	4417      	add	r7, r2
 80063ce:	4659      	mov	r1, fp
 80063d0:	2201      	movs	r2, #1
 80063d2:	4628      	mov	r0, r5
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	f000 fa7b 	bl	80068d0 <__lshift>
 80063da:	4621      	mov	r1, r4
 80063dc:	4683      	mov	fp, r0
 80063de:	f000 fae7 	bl	80069b0 <__mcmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	dcb2      	bgt.n	800634c <_dtoa_r+0xac4>
 80063e6:	d102      	bne.n	80063ee <_dtoa_r+0xb66>
 80063e8:	9b08      	ldr	r3, [sp, #32]
 80063ea:	07db      	lsls	r3, r3, #31
 80063ec:	d4ae      	bmi.n	800634c <_dtoa_r+0xac4>
 80063ee:	463b      	mov	r3, r7
 80063f0:	461f      	mov	r7, r3
 80063f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f6:	2a30      	cmp	r2, #48	; 0x30
 80063f8:	d0fa      	beq.n	80063f0 <_dtoa_r+0xb68>
 80063fa:	e6f9      	b.n	80061f0 <_dtoa_r+0x968>
 80063fc:	9a03      	ldr	r2, [sp, #12]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d1a5      	bne.n	800634e <_dtoa_r+0xac6>
 8006402:	2331      	movs	r3, #49	; 0x31
 8006404:	f10a 0a01 	add.w	sl, sl, #1
 8006408:	e779      	b.n	80062fe <_dtoa_r+0xa76>
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <_dtoa_r+0xbd4>)
 800640c:	f7ff baa8 	b.w	8005960 <_dtoa_r+0xd8>
 8006410:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006412:	2b00      	cmp	r3, #0
 8006414:	f47f aa81 	bne.w	800591a <_dtoa_r+0x92>
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <_dtoa_r+0xbd8>)
 800641a:	f7ff baa1 	b.w	8005960 <_dtoa_r+0xd8>
 800641e:	f1b9 0f00 	cmp.w	r9, #0
 8006422:	dc03      	bgt.n	800642c <_dtoa_r+0xba4>
 8006424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006426:	2b02      	cmp	r3, #2
 8006428:	f73f aecb 	bgt.w	80061c2 <_dtoa_r+0x93a>
 800642c:	9f03      	ldr	r7, [sp, #12]
 800642e:	4621      	mov	r1, r4
 8006430:	4658      	mov	r0, fp
 8006432:	f7ff f99d 	bl	8005770 <quorem>
 8006436:	9a03      	ldr	r2, [sp, #12]
 8006438:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800643c:	f807 3b01 	strb.w	r3, [r7], #1
 8006440:	1aba      	subs	r2, r7, r2
 8006442:	4591      	cmp	r9, r2
 8006444:	ddba      	ble.n	80063bc <_dtoa_r+0xb34>
 8006446:	4659      	mov	r1, fp
 8006448:	2300      	movs	r3, #0
 800644a:	220a      	movs	r2, #10
 800644c:	4628      	mov	r0, r5
 800644e:	f000 f893 	bl	8006578 <__multadd>
 8006452:	4683      	mov	fp, r0
 8006454:	e7eb      	b.n	800642e <_dtoa_r+0xba6>
 8006456:	bf00      	nop
 8006458:	08009067 	.word	0x08009067
 800645c:	08008fc4 	.word	0x08008fc4
 8006460:	08008fe8 	.word	0x08008fe8

08006464 <_localeconv_r>:
 8006464:	4800      	ldr	r0, [pc, #0]	; (8006468 <_localeconv_r+0x4>)
 8006466:	4770      	bx	lr
 8006468:	20000168 	.word	0x20000168

0800646c <malloc>:
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <malloc+0xc>)
 800646e:	4601      	mov	r1, r0
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	f000 bc1d 	b.w	8006cb0 <_malloc_r>
 8006476:	bf00      	nop
 8006478:	20000014 	.word	0x20000014

0800647c <memchr>:
 800647c:	4603      	mov	r3, r0
 800647e:	b510      	push	{r4, lr}
 8006480:	b2c9      	uxtb	r1, r1
 8006482:	4402      	add	r2, r0
 8006484:	4293      	cmp	r3, r2
 8006486:	4618      	mov	r0, r3
 8006488:	d101      	bne.n	800648e <memchr+0x12>
 800648a:	2000      	movs	r0, #0
 800648c:	e003      	b.n	8006496 <memchr+0x1a>
 800648e:	7804      	ldrb	r4, [r0, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	428c      	cmp	r4, r1
 8006494:	d1f6      	bne.n	8006484 <memchr+0x8>
 8006496:	bd10      	pop	{r4, pc}

08006498 <memcpy>:
 8006498:	440a      	add	r2, r1
 800649a:	4291      	cmp	r1, r2
 800649c:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a0:	d100      	bne.n	80064a4 <memcpy+0xc>
 80064a2:	4770      	bx	lr
 80064a4:	b510      	push	{r4, lr}
 80064a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064aa:	4291      	cmp	r1, r2
 80064ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b0:	d1f9      	bne.n	80064a6 <memcpy+0xe>
 80064b2:	bd10      	pop	{r4, pc}

080064b4 <_Balloc>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	b976      	cbnz	r6, 80064dc <_Balloc+0x28>
 80064be:	2010      	movs	r0, #16
 80064c0:	f7ff ffd4 	bl	800646c <malloc>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6260      	str	r0, [r4, #36]	; 0x24
 80064c8:	b920      	cbnz	r0, 80064d4 <_Balloc+0x20>
 80064ca:	2166      	movs	r1, #102	; 0x66
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <_Balloc+0x78>)
 80064ce:	4818      	ldr	r0, [pc, #96]	; (8006530 <_Balloc+0x7c>)
 80064d0:	f000 fdce 	bl	8007070 <__assert_func>
 80064d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064d8:	6006      	str	r6, [r0, #0]
 80064da:	60c6      	str	r6, [r0, #12]
 80064dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064de:	68f3      	ldr	r3, [r6, #12]
 80064e0:	b183      	cbz	r3, 8006504 <_Balloc+0x50>
 80064e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ea:	b9b8      	cbnz	r0, 800651c <_Balloc+0x68>
 80064ec:	2101      	movs	r1, #1
 80064ee:	fa01 f605 	lsl.w	r6, r1, r5
 80064f2:	1d72      	adds	r2, r6, #5
 80064f4:	4620      	mov	r0, r4
 80064f6:	0092      	lsls	r2, r2, #2
 80064f8:	f000 fb5e 	bl	8006bb8 <_calloc_r>
 80064fc:	b160      	cbz	r0, 8006518 <_Balloc+0x64>
 80064fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006502:	e00e      	b.n	8006522 <_Balloc+0x6e>
 8006504:	2221      	movs	r2, #33	; 0x21
 8006506:	2104      	movs	r1, #4
 8006508:	4620      	mov	r0, r4
 800650a:	f000 fb55 	bl	8006bb8 <_calloc_r>
 800650e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006510:	60f0      	str	r0, [r6, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e4      	bne.n	80064e2 <_Balloc+0x2e>
 8006518:	2000      	movs	r0, #0
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	6802      	ldr	r2, [r0, #0]
 800651e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006522:	2300      	movs	r3, #0
 8006524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006528:	e7f7      	b.n	800651a <_Balloc+0x66>
 800652a:	bf00      	nop
 800652c:	08008ff5 	.word	0x08008ff5
 8006530:	08009078 	.word	0x08009078

08006534 <_Bfree>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006538:	4605      	mov	r5, r0
 800653a:	460c      	mov	r4, r1
 800653c:	b976      	cbnz	r6, 800655c <_Bfree+0x28>
 800653e:	2010      	movs	r0, #16
 8006540:	f7ff ff94 	bl	800646c <malloc>
 8006544:	4602      	mov	r2, r0
 8006546:	6268      	str	r0, [r5, #36]	; 0x24
 8006548:	b920      	cbnz	r0, 8006554 <_Bfree+0x20>
 800654a:	218a      	movs	r1, #138	; 0x8a
 800654c:	4b08      	ldr	r3, [pc, #32]	; (8006570 <_Bfree+0x3c>)
 800654e:	4809      	ldr	r0, [pc, #36]	; (8006574 <_Bfree+0x40>)
 8006550:	f000 fd8e 	bl	8007070 <__assert_func>
 8006554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006558:	6006      	str	r6, [r0, #0]
 800655a:	60c6      	str	r6, [r0, #12]
 800655c:	b13c      	cbz	r4, 800656e <_Bfree+0x3a>
 800655e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006560:	6862      	ldr	r2, [r4, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006568:	6021      	str	r1, [r4, #0]
 800656a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	08008ff5 	.word	0x08008ff5
 8006574:	08009078 	.word	0x08009078

08006578 <__multadd>:
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	4607      	mov	r7, r0
 800657e:	460c      	mov	r4, r1
 8006580:	461e      	mov	r6, r3
 8006582:	2000      	movs	r0, #0
 8006584:	690d      	ldr	r5, [r1, #16]
 8006586:	f101 0c14 	add.w	ip, r1, #20
 800658a:	f8dc 3000 	ldr.w	r3, [ip]
 800658e:	3001      	adds	r0, #1
 8006590:	b299      	uxth	r1, r3
 8006592:	fb02 6101 	mla	r1, r2, r1, r6
 8006596:	0c1e      	lsrs	r6, r3, #16
 8006598:	0c0b      	lsrs	r3, r1, #16
 800659a:	fb02 3306 	mla	r3, r2, r6, r3
 800659e:	b289      	uxth	r1, r1
 80065a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065a4:	4285      	cmp	r5, r0
 80065a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065aa:	f84c 1b04 	str.w	r1, [ip], #4
 80065ae:	dcec      	bgt.n	800658a <__multadd+0x12>
 80065b0:	b30e      	cbz	r6, 80065f6 <__multadd+0x7e>
 80065b2:	68a3      	ldr	r3, [r4, #8]
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc19      	bgt.n	80065ec <__multadd+0x74>
 80065b8:	6861      	ldr	r1, [r4, #4]
 80065ba:	4638      	mov	r0, r7
 80065bc:	3101      	adds	r1, #1
 80065be:	f7ff ff79 	bl	80064b4 <_Balloc>
 80065c2:	4680      	mov	r8, r0
 80065c4:	b928      	cbnz	r0, 80065d2 <__multadd+0x5a>
 80065c6:	4602      	mov	r2, r0
 80065c8:	21b5      	movs	r1, #181	; 0xb5
 80065ca:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <__multadd+0x84>)
 80065cc:	480c      	ldr	r0, [pc, #48]	; (8006600 <__multadd+0x88>)
 80065ce:	f000 fd4f 	bl	8007070 <__assert_func>
 80065d2:	6922      	ldr	r2, [r4, #16]
 80065d4:	f104 010c 	add.w	r1, r4, #12
 80065d8:	3202      	adds	r2, #2
 80065da:	0092      	lsls	r2, r2, #2
 80065dc:	300c      	adds	r0, #12
 80065de:	f7ff ff5b 	bl	8006498 <memcpy>
 80065e2:	4621      	mov	r1, r4
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff ffa5 	bl	8006534 <_Bfree>
 80065ea:	4644      	mov	r4, r8
 80065ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065f0:	3501      	adds	r5, #1
 80065f2:	615e      	str	r6, [r3, #20]
 80065f4:	6125      	str	r5, [r4, #16]
 80065f6:	4620      	mov	r0, r4
 80065f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fc:	08009067 	.word	0x08009067
 8006600:	08009078 	.word	0x08009078

08006604 <__hi0bits>:
 8006604:	0c02      	lsrs	r2, r0, #16
 8006606:	0412      	lsls	r2, r2, #16
 8006608:	4603      	mov	r3, r0
 800660a:	b9ca      	cbnz	r2, 8006640 <__hi0bits+0x3c>
 800660c:	0403      	lsls	r3, r0, #16
 800660e:	2010      	movs	r0, #16
 8006610:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006614:	bf04      	itt	eq
 8006616:	021b      	lsleq	r3, r3, #8
 8006618:	3008      	addeq	r0, #8
 800661a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800661e:	bf04      	itt	eq
 8006620:	011b      	lsleq	r3, r3, #4
 8006622:	3004      	addeq	r0, #4
 8006624:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006628:	bf04      	itt	eq
 800662a:	009b      	lsleq	r3, r3, #2
 800662c:	3002      	addeq	r0, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	db05      	blt.n	800663e <__hi0bits+0x3a>
 8006632:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006636:	f100 0001 	add.w	r0, r0, #1
 800663a:	bf08      	it	eq
 800663c:	2020      	moveq	r0, #32
 800663e:	4770      	bx	lr
 8006640:	2000      	movs	r0, #0
 8006642:	e7e5      	b.n	8006610 <__hi0bits+0xc>

08006644 <__lo0bits>:
 8006644:	6803      	ldr	r3, [r0, #0]
 8006646:	4602      	mov	r2, r0
 8006648:	f013 0007 	ands.w	r0, r3, #7
 800664c:	d00b      	beq.n	8006666 <__lo0bits+0x22>
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d421      	bmi.n	8006696 <__lo0bits+0x52>
 8006652:	0798      	lsls	r0, r3, #30
 8006654:	bf49      	itett	mi
 8006656:	085b      	lsrmi	r3, r3, #1
 8006658:	089b      	lsrpl	r3, r3, #2
 800665a:	2001      	movmi	r0, #1
 800665c:	6013      	strmi	r3, [r2, #0]
 800665e:	bf5c      	itt	pl
 8006660:	2002      	movpl	r0, #2
 8006662:	6013      	strpl	r3, [r2, #0]
 8006664:	4770      	bx	lr
 8006666:	b299      	uxth	r1, r3
 8006668:	b909      	cbnz	r1, 800666e <__lo0bits+0x2a>
 800666a:	2010      	movs	r0, #16
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b2d9      	uxtb	r1, r3
 8006670:	b909      	cbnz	r1, 8006676 <__lo0bits+0x32>
 8006672:	3008      	adds	r0, #8
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	0719      	lsls	r1, r3, #28
 8006678:	bf04      	itt	eq
 800667a:	091b      	lsreq	r3, r3, #4
 800667c:	3004      	addeq	r0, #4
 800667e:	0799      	lsls	r1, r3, #30
 8006680:	bf04      	itt	eq
 8006682:	089b      	lsreq	r3, r3, #2
 8006684:	3002      	addeq	r0, #2
 8006686:	07d9      	lsls	r1, r3, #31
 8006688:	d403      	bmi.n	8006692 <__lo0bits+0x4e>
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	f100 0001 	add.w	r0, r0, #1
 8006690:	d003      	beq.n	800669a <__lo0bits+0x56>
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	4770      	bx	lr
 8006696:	2000      	movs	r0, #0
 8006698:	4770      	bx	lr
 800669a:	2020      	movs	r0, #32
 800669c:	4770      	bx	lr
	...

080066a0 <__i2b>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	460c      	mov	r4, r1
 80066a4:	2101      	movs	r1, #1
 80066a6:	f7ff ff05 	bl	80064b4 <_Balloc>
 80066aa:	4602      	mov	r2, r0
 80066ac:	b928      	cbnz	r0, 80066ba <__i2b+0x1a>
 80066ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066b2:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <__i2b+0x24>)
 80066b4:	4804      	ldr	r0, [pc, #16]	; (80066c8 <__i2b+0x28>)
 80066b6:	f000 fcdb 	bl	8007070 <__assert_func>
 80066ba:	2301      	movs	r3, #1
 80066bc:	6144      	str	r4, [r0, #20]
 80066be:	6103      	str	r3, [r0, #16]
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	bf00      	nop
 80066c4:	08009067 	.word	0x08009067
 80066c8:	08009078 	.word	0x08009078

080066cc <__multiply>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	4691      	mov	r9, r2
 80066d2:	690a      	ldr	r2, [r1, #16]
 80066d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066d8:	460c      	mov	r4, r1
 80066da:	429a      	cmp	r2, r3
 80066dc:	bfbe      	ittt	lt
 80066de:	460b      	movlt	r3, r1
 80066e0:	464c      	movlt	r4, r9
 80066e2:	4699      	movlt	r9, r3
 80066e4:	6927      	ldr	r7, [r4, #16]
 80066e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	6861      	ldr	r1, [r4, #4]
 80066ee:	eb07 060a 	add.w	r6, r7, sl
 80066f2:	42b3      	cmp	r3, r6
 80066f4:	b085      	sub	sp, #20
 80066f6:	bfb8      	it	lt
 80066f8:	3101      	addlt	r1, #1
 80066fa:	f7ff fedb 	bl	80064b4 <_Balloc>
 80066fe:	b930      	cbnz	r0, 800670e <__multiply+0x42>
 8006700:	4602      	mov	r2, r0
 8006702:	f240 115d 	movw	r1, #349	; 0x15d
 8006706:	4b43      	ldr	r3, [pc, #268]	; (8006814 <__multiply+0x148>)
 8006708:	4843      	ldr	r0, [pc, #268]	; (8006818 <__multiply+0x14c>)
 800670a:	f000 fcb1 	bl	8007070 <__assert_func>
 800670e:	f100 0514 	add.w	r5, r0, #20
 8006712:	462b      	mov	r3, r5
 8006714:	2200      	movs	r2, #0
 8006716:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800671a:	4543      	cmp	r3, r8
 800671c:	d321      	bcc.n	8006762 <__multiply+0x96>
 800671e:	f104 0314 	add.w	r3, r4, #20
 8006722:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006726:	f109 0314 	add.w	r3, r9, #20
 800672a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800672e:	9202      	str	r2, [sp, #8]
 8006730:	1b3a      	subs	r2, r7, r4
 8006732:	3a15      	subs	r2, #21
 8006734:	f022 0203 	bic.w	r2, r2, #3
 8006738:	3204      	adds	r2, #4
 800673a:	f104 0115 	add.w	r1, r4, #21
 800673e:	428f      	cmp	r7, r1
 8006740:	bf38      	it	cc
 8006742:	2204      	movcc	r2, #4
 8006744:	9201      	str	r2, [sp, #4]
 8006746:	9a02      	ldr	r2, [sp, #8]
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	429a      	cmp	r2, r3
 800674c:	d80c      	bhi.n	8006768 <__multiply+0x9c>
 800674e:	2e00      	cmp	r6, #0
 8006750:	dd03      	ble.n	800675a <__multiply+0x8e>
 8006752:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006756:	2b00      	cmp	r3, #0
 8006758:	d059      	beq.n	800680e <__multiply+0x142>
 800675a:	6106      	str	r6, [r0, #16]
 800675c:	b005      	add	sp, #20
 800675e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006762:	f843 2b04 	str.w	r2, [r3], #4
 8006766:	e7d8      	b.n	800671a <__multiply+0x4e>
 8006768:	f8b3 a000 	ldrh.w	sl, [r3]
 800676c:	f1ba 0f00 	cmp.w	sl, #0
 8006770:	d023      	beq.n	80067ba <__multiply+0xee>
 8006772:	46a9      	mov	r9, r5
 8006774:	f04f 0c00 	mov.w	ip, #0
 8006778:	f104 0e14 	add.w	lr, r4, #20
 800677c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006780:	f8d9 1000 	ldr.w	r1, [r9]
 8006784:	fa1f fb82 	uxth.w	fp, r2
 8006788:	b289      	uxth	r1, r1
 800678a:	fb0a 110b 	mla	r1, sl, fp, r1
 800678e:	4461      	add	r1, ip
 8006790:	f8d9 c000 	ldr.w	ip, [r9]
 8006794:	0c12      	lsrs	r2, r2, #16
 8006796:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800679a:	fb0a c202 	mla	r2, sl, r2, ip
 800679e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067a2:	b289      	uxth	r1, r1
 80067a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067a8:	4577      	cmp	r7, lr
 80067aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067ae:	f849 1b04 	str.w	r1, [r9], #4
 80067b2:	d8e3      	bhi.n	800677c <__multiply+0xb0>
 80067b4:	9a01      	ldr	r2, [sp, #4]
 80067b6:	f845 c002 	str.w	ip, [r5, r2]
 80067ba:	9a03      	ldr	r2, [sp, #12]
 80067bc:	3304      	adds	r3, #4
 80067be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067c2:	f1b9 0f00 	cmp.w	r9, #0
 80067c6:	d020      	beq.n	800680a <__multiply+0x13e>
 80067c8:	46ae      	mov	lr, r5
 80067ca:	f04f 0a00 	mov.w	sl, #0
 80067ce:	6829      	ldr	r1, [r5, #0]
 80067d0:	f104 0c14 	add.w	ip, r4, #20
 80067d4:	f8bc b000 	ldrh.w	fp, [ip]
 80067d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067dc:	b289      	uxth	r1, r1
 80067de:	fb09 220b 	mla	r2, r9, fp, r2
 80067e2:	4492      	add	sl, r2
 80067e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067e8:	f84e 1b04 	str.w	r1, [lr], #4
 80067ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067f0:	f8be 1000 	ldrh.w	r1, [lr]
 80067f4:	0c12      	lsrs	r2, r2, #16
 80067f6:	fb09 1102 	mla	r1, r9, r2, r1
 80067fa:	4567      	cmp	r7, ip
 80067fc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006800:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006804:	d8e6      	bhi.n	80067d4 <__multiply+0x108>
 8006806:	9a01      	ldr	r2, [sp, #4]
 8006808:	50a9      	str	r1, [r5, r2]
 800680a:	3504      	adds	r5, #4
 800680c:	e79b      	b.n	8006746 <__multiply+0x7a>
 800680e:	3e01      	subs	r6, #1
 8006810:	e79d      	b.n	800674e <__multiply+0x82>
 8006812:	bf00      	nop
 8006814:	08009067 	.word	0x08009067
 8006818:	08009078 	.word	0x08009078

0800681c <__pow5mult>:
 800681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006820:	4615      	mov	r5, r2
 8006822:	f012 0203 	ands.w	r2, r2, #3
 8006826:	4606      	mov	r6, r0
 8006828:	460f      	mov	r7, r1
 800682a:	d007      	beq.n	800683c <__pow5mult+0x20>
 800682c:	4c25      	ldr	r4, [pc, #148]	; (80068c4 <__pow5mult+0xa8>)
 800682e:	3a01      	subs	r2, #1
 8006830:	2300      	movs	r3, #0
 8006832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006836:	f7ff fe9f 	bl	8006578 <__multadd>
 800683a:	4607      	mov	r7, r0
 800683c:	10ad      	asrs	r5, r5, #2
 800683e:	d03d      	beq.n	80068bc <__pow5mult+0xa0>
 8006840:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006842:	b97c      	cbnz	r4, 8006864 <__pow5mult+0x48>
 8006844:	2010      	movs	r0, #16
 8006846:	f7ff fe11 	bl	800646c <malloc>
 800684a:	4602      	mov	r2, r0
 800684c:	6270      	str	r0, [r6, #36]	; 0x24
 800684e:	b928      	cbnz	r0, 800685c <__pow5mult+0x40>
 8006850:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006854:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <__pow5mult+0xac>)
 8006856:	481d      	ldr	r0, [pc, #116]	; (80068cc <__pow5mult+0xb0>)
 8006858:	f000 fc0a 	bl	8007070 <__assert_func>
 800685c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006860:	6004      	str	r4, [r0, #0]
 8006862:	60c4      	str	r4, [r0, #12]
 8006864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800686c:	b94c      	cbnz	r4, 8006882 <__pow5mult+0x66>
 800686e:	f240 2171 	movw	r1, #625	; 0x271
 8006872:	4630      	mov	r0, r6
 8006874:	f7ff ff14 	bl	80066a0 <__i2b>
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	07eb      	lsls	r3, r5, #31
 8006888:	d50a      	bpl.n	80068a0 <__pow5mult+0x84>
 800688a:	4639      	mov	r1, r7
 800688c:	4622      	mov	r2, r4
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ff1c 	bl	80066cc <__multiply>
 8006894:	4680      	mov	r8, r0
 8006896:	4639      	mov	r1, r7
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff fe4b 	bl	8006534 <_Bfree>
 800689e:	4647      	mov	r7, r8
 80068a0:	106d      	asrs	r5, r5, #1
 80068a2:	d00b      	beq.n	80068bc <__pow5mult+0xa0>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	b938      	cbnz	r0, 80068b8 <__pow5mult+0x9c>
 80068a8:	4622      	mov	r2, r4
 80068aa:	4621      	mov	r1, r4
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7ff ff0d 	bl	80066cc <__multiply>
 80068b2:	6020      	str	r0, [r4, #0]
 80068b4:	f8c0 9000 	str.w	r9, [r0]
 80068b8:	4604      	mov	r4, r0
 80068ba:	e7e4      	b.n	8006886 <__pow5mult+0x6a>
 80068bc:	4638      	mov	r0, r7
 80068be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c2:	bf00      	nop
 80068c4:	080091c8 	.word	0x080091c8
 80068c8:	08008ff5 	.word	0x08008ff5
 80068cc:	08009078 	.word	0x08009078

080068d0 <__lshift>:
 80068d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	460c      	mov	r4, r1
 80068d6:	4607      	mov	r7, r0
 80068d8:	4691      	mov	r9, r2
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	6849      	ldr	r1, [r1, #4]
 80068de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068e8:	f108 0601 	add.w	r6, r8, #1
 80068ec:	42b3      	cmp	r3, r6
 80068ee:	db0b      	blt.n	8006908 <__lshift+0x38>
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff fddf 	bl	80064b4 <_Balloc>
 80068f6:	4605      	mov	r5, r0
 80068f8:	b948      	cbnz	r0, 800690e <__lshift+0x3e>
 80068fa:	4602      	mov	r2, r0
 80068fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006900:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <__lshift+0xd8>)
 8006902:	482a      	ldr	r0, [pc, #168]	; (80069ac <__lshift+0xdc>)
 8006904:	f000 fbb4 	bl	8007070 <__assert_func>
 8006908:	3101      	adds	r1, #1
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	e7ee      	b.n	80068ec <__lshift+0x1c>
 800690e:	2300      	movs	r3, #0
 8006910:	f100 0114 	add.w	r1, r0, #20
 8006914:	f100 0210 	add.w	r2, r0, #16
 8006918:	4618      	mov	r0, r3
 800691a:	4553      	cmp	r3, sl
 800691c:	db37      	blt.n	800698e <__lshift+0xbe>
 800691e:	6920      	ldr	r0, [r4, #16]
 8006920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006924:	f104 0314 	add.w	r3, r4, #20
 8006928:	f019 091f 	ands.w	r9, r9, #31
 800692c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006930:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006934:	d02f      	beq.n	8006996 <__lshift+0xc6>
 8006936:	468a      	mov	sl, r1
 8006938:	f04f 0c00 	mov.w	ip, #0
 800693c:	f1c9 0e20 	rsb	lr, r9, #32
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	fa02 f209 	lsl.w	r2, r2, r9
 8006946:	ea42 020c 	orr.w	r2, r2, ip
 800694a:	f84a 2b04 	str.w	r2, [sl], #4
 800694e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006952:	4298      	cmp	r0, r3
 8006954:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006958:	d8f2      	bhi.n	8006940 <__lshift+0x70>
 800695a:	1b03      	subs	r3, r0, r4
 800695c:	3b15      	subs	r3, #21
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	3304      	adds	r3, #4
 8006964:	f104 0215 	add.w	r2, r4, #21
 8006968:	4290      	cmp	r0, r2
 800696a:	bf38      	it	cc
 800696c:	2304      	movcc	r3, #4
 800696e:	f841 c003 	str.w	ip, [r1, r3]
 8006972:	f1bc 0f00 	cmp.w	ip, #0
 8006976:	d001      	beq.n	800697c <__lshift+0xac>
 8006978:	f108 0602 	add.w	r6, r8, #2
 800697c:	3e01      	subs	r6, #1
 800697e:	4638      	mov	r0, r7
 8006980:	4621      	mov	r1, r4
 8006982:	612e      	str	r6, [r5, #16]
 8006984:	f7ff fdd6 	bl	8006534 <_Bfree>
 8006988:	4628      	mov	r0, r5
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006992:	3301      	adds	r3, #1
 8006994:	e7c1      	b.n	800691a <__lshift+0x4a>
 8006996:	3904      	subs	r1, #4
 8006998:	f853 2b04 	ldr.w	r2, [r3], #4
 800699c:	4298      	cmp	r0, r3
 800699e:	f841 2f04 	str.w	r2, [r1, #4]!
 80069a2:	d8f9      	bhi.n	8006998 <__lshift+0xc8>
 80069a4:	e7ea      	b.n	800697c <__lshift+0xac>
 80069a6:	bf00      	nop
 80069a8:	08009067 	.word	0x08009067
 80069ac:	08009078 	.word	0x08009078

080069b0 <__mcmp>:
 80069b0:	4603      	mov	r3, r0
 80069b2:	690a      	ldr	r2, [r1, #16]
 80069b4:	6900      	ldr	r0, [r0, #16]
 80069b6:	b530      	push	{r4, r5, lr}
 80069b8:	1a80      	subs	r0, r0, r2
 80069ba:	d10d      	bne.n	80069d8 <__mcmp+0x28>
 80069bc:	3314      	adds	r3, #20
 80069be:	3114      	adds	r1, #20
 80069c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069d0:	4295      	cmp	r5, r2
 80069d2:	d002      	beq.n	80069da <__mcmp+0x2a>
 80069d4:	d304      	bcc.n	80069e0 <__mcmp+0x30>
 80069d6:	2001      	movs	r0, #1
 80069d8:	bd30      	pop	{r4, r5, pc}
 80069da:	42a3      	cmp	r3, r4
 80069dc:	d3f4      	bcc.n	80069c8 <__mcmp+0x18>
 80069de:	e7fb      	b.n	80069d8 <__mcmp+0x28>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e7f8      	b.n	80069d8 <__mcmp+0x28>
	...

080069e8 <__mdiff>:
 80069e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	460d      	mov	r5, r1
 80069ee:	4607      	mov	r7, r0
 80069f0:	4611      	mov	r1, r2
 80069f2:	4628      	mov	r0, r5
 80069f4:	4614      	mov	r4, r2
 80069f6:	f7ff ffdb 	bl	80069b0 <__mcmp>
 80069fa:	1e06      	subs	r6, r0, #0
 80069fc:	d111      	bne.n	8006a22 <__mdiff+0x3a>
 80069fe:	4631      	mov	r1, r6
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7ff fd57 	bl	80064b4 <_Balloc>
 8006a06:	4602      	mov	r2, r0
 8006a08:	b928      	cbnz	r0, 8006a16 <__mdiff+0x2e>
 8006a0a:	f240 2132 	movw	r1, #562	; 0x232
 8006a0e:	4b3a      	ldr	r3, [pc, #232]	; (8006af8 <__mdiff+0x110>)
 8006a10:	483a      	ldr	r0, [pc, #232]	; (8006afc <__mdiff+0x114>)
 8006a12:	f000 fb2d 	bl	8007070 <__assert_func>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	bfa4      	itt	ge
 8006a24:	4623      	movge	r3, r4
 8006a26:	462c      	movge	r4, r5
 8006a28:	4638      	mov	r0, r7
 8006a2a:	6861      	ldr	r1, [r4, #4]
 8006a2c:	bfa6      	itte	ge
 8006a2e:	461d      	movge	r5, r3
 8006a30:	2600      	movge	r6, #0
 8006a32:	2601      	movlt	r6, #1
 8006a34:	f7ff fd3e 	bl	80064b4 <_Balloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	b918      	cbnz	r0, 8006a44 <__mdiff+0x5c>
 8006a3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a40:	4b2d      	ldr	r3, [pc, #180]	; (8006af8 <__mdiff+0x110>)
 8006a42:	e7e5      	b.n	8006a10 <__mdiff+0x28>
 8006a44:	f102 0814 	add.w	r8, r2, #20
 8006a48:	46c2      	mov	sl, r8
 8006a4a:	f04f 0c00 	mov.w	ip, #0
 8006a4e:	6927      	ldr	r7, [r4, #16]
 8006a50:	60c6      	str	r6, [r0, #12]
 8006a52:	692e      	ldr	r6, [r5, #16]
 8006a54:	f104 0014 	add.w	r0, r4, #20
 8006a58:	f105 0914 	add.w	r9, r5, #20
 8006a5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006a60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a64:	3410      	adds	r4, #16
 8006a66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006a6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a6e:	fa1f f18b 	uxth.w	r1, fp
 8006a72:	448c      	add	ip, r1
 8006a74:	b299      	uxth	r1, r3
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	ebac 0101 	sub.w	r1, ip, r1
 8006a7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a84:	b289      	uxth	r1, r1
 8006a86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006a8a:	454e      	cmp	r6, r9
 8006a8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a90:	f84a 3b04 	str.w	r3, [sl], #4
 8006a94:	d8e7      	bhi.n	8006a66 <__mdiff+0x7e>
 8006a96:	1b73      	subs	r3, r6, r5
 8006a98:	3b15      	subs	r3, #21
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	3515      	adds	r5, #21
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	42ae      	cmp	r6, r5
 8006aa4:	bf38      	it	cc
 8006aa6:	2304      	movcc	r3, #4
 8006aa8:	4418      	add	r0, r3
 8006aaa:	4443      	add	r3, r8
 8006aac:	461e      	mov	r6, r3
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4575      	cmp	r5, lr
 8006ab2:	d30e      	bcc.n	8006ad2 <__mdiff+0xea>
 8006ab4:	f10e 0103 	add.w	r1, lr, #3
 8006ab8:	1a09      	subs	r1, r1, r0
 8006aba:	f021 0103 	bic.w	r1, r1, #3
 8006abe:	3803      	subs	r0, #3
 8006ac0:	4586      	cmp	lr, r0
 8006ac2:	bf38      	it	cc
 8006ac4:	2100      	movcc	r1, #0
 8006ac6:	4419      	add	r1, r3
 8006ac8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006acc:	b18b      	cbz	r3, 8006af2 <__mdiff+0x10a>
 8006ace:	6117      	str	r7, [r2, #16]
 8006ad0:	e7a4      	b.n	8006a1c <__mdiff+0x34>
 8006ad2:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ad6:	fa1f f188 	uxth.w	r1, r8
 8006ada:	4461      	add	r1, ip
 8006adc:	140c      	asrs	r4, r1, #16
 8006ade:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ae2:	b289      	uxth	r1, r1
 8006ae4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ae8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006aec:	f846 1b04 	str.w	r1, [r6], #4
 8006af0:	e7de      	b.n	8006ab0 <__mdiff+0xc8>
 8006af2:	3f01      	subs	r7, #1
 8006af4:	e7e8      	b.n	8006ac8 <__mdiff+0xe0>
 8006af6:	bf00      	nop
 8006af8:	08009067 	.word	0x08009067
 8006afc:	08009078 	.word	0x08009078

08006b00 <__d2b>:
 8006b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b04:	2101      	movs	r1, #1
 8006b06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006b0a:	4690      	mov	r8, r2
 8006b0c:	461d      	mov	r5, r3
 8006b0e:	f7ff fcd1 	bl	80064b4 <_Balloc>
 8006b12:	4604      	mov	r4, r0
 8006b14:	b930      	cbnz	r0, 8006b24 <__d2b+0x24>
 8006b16:	4602      	mov	r2, r0
 8006b18:	f240 310a 	movw	r1, #778	; 0x30a
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <__d2b+0xb0>)
 8006b1e:	4825      	ldr	r0, [pc, #148]	; (8006bb4 <__d2b+0xb4>)
 8006b20:	f000 faa6 	bl	8007070 <__assert_func>
 8006b24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006b28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006b2c:	bb2d      	cbnz	r5, 8006b7a <__d2b+0x7a>
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	f1b8 0300 	subs.w	r3, r8, #0
 8006b34:	d026      	beq.n	8006b84 <__d2b+0x84>
 8006b36:	4668      	mov	r0, sp
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	f7ff fd83 	bl	8006644 <__lo0bits>
 8006b3e:	9900      	ldr	r1, [sp, #0]
 8006b40:	b1f0      	cbz	r0, 8006b80 <__d2b+0x80>
 8006b42:	9a01      	ldr	r2, [sp, #4]
 8006b44:	f1c0 0320 	rsb	r3, r0, #32
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	40c2      	lsrs	r2, r0
 8006b50:	6163      	str	r3, [r4, #20]
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bf14      	ite	ne
 8006b5a:	2102      	movne	r1, #2
 8006b5c:	2101      	moveq	r1, #1
 8006b5e:	61a3      	str	r3, [r4, #24]
 8006b60:	6121      	str	r1, [r4, #16]
 8006b62:	b1c5      	cbz	r5, 8006b96 <__d2b+0x96>
 8006b64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b68:	4405      	add	r5, r0
 8006b6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b6e:	603d      	str	r5, [r7, #0]
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	4620      	mov	r0, r4
 8006b74:	b002      	add	sp, #8
 8006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b7e:	e7d6      	b.n	8006b2e <__d2b+0x2e>
 8006b80:	6161      	str	r1, [r4, #20]
 8006b82:	e7e7      	b.n	8006b54 <__d2b+0x54>
 8006b84:	a801      	add	r0, sp, #4
 8006b86:	f7ff fd5d 	bl	8006644 <__lo0bits>
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	6121      	str	r1, [r4, #16]
 8006b90:	6163      	str	r3, [r4, #20]
 8006b92:	3020      	adds	r0, #32
 8006b94:	e7e5      	b.n	8006b62 <__d2b+0x62>
 8006b96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006b9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b9e:	6038      	str	r0, [r7, #0]
 8006ba0:	6918      	ldr	r0, [r3, #16]
 8006ba2:	f7ff fd2f 	bl	8006604 <__hi0bits>
 8006ba6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006baa:	6031      	str	r1, [r6, #0]
 8006bac:	e7e1      	b.n	8006b72 <__d2b+0x72>
 8006bae:	bf00      	nop
 8006bb0:	08009067 	.word	0x08009067
 8006bb4:	08009078 	.word	0x08009078

08006bb8 <_calloc_r>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	fba1 5402 	umull	r5, r4, r1, r2
 8006bbe:	b934      	cbnz	r4, 8006bce <_calloc_r+0x16>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f000 f875 	bl	8006cb0 <_malloc_r>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	b928      	cbnz	r0, 8006bd6 <_calloc_r+0x1e>
 8006bca:	4630      	mov	r0, r6
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
 8006bce:	220c      	movs	r2, #12
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	6002      	str	r2, [r0, #0]
 8006bd4:	e7f9      	b.n	8006bca <_calloc_r+0x12>
 8006bd6:	462a      	mov	r2, r5
 8006bd8:	4621      	mov	r1, r4
 8006bda:	f7fe f941 	bl	8004e60 <memset>
 8006bde:	e7f4      	b.n	8006bca <_calloc_r+0x12>

08006be0 <_free_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4605      	mov	r5, r0
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d040      	beq.n	8006c6a <_free_r+0x8a>
 8006be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bec:	1f0c      	subs	r4, r1, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bfb8      	it	lt
 8006bf2:	18e4      	addlt	r4, r4, r3
 8006bf4:	f000 fa98 	bl	8007128 <__malloc_lock>
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <_free_r+0x8c>)
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	b933      	cbnz	r3, 8006c0c <_free_r+0x2c>
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	4628      	mov	r0, r5
 8006c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c08:	f000 ba94 	b.w	8007134 <__malloc_unlock>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d908      	bls.n	8006c22 <_free_r+0x42>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	1821      	adds	r1, r4, r0
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf01      	itttt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	1809      	addeq	r1, r1, r0
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	e7ed      	b.n	8006bfe <_free_r+0x1e>
 8006c22:	461a      	mov	r2, r3
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b10b      	cbz	r3, 8006c2c <_free_r+0x4c>
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d9fa      	bls.n	8006c22 <_free_r+0x42>
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	1850      	adds	r0, r2, r1
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d10b      	bne.n	8006c4c <_free_r+0x6c>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	4401      	add	r1, r0
 8006c38:	1850      	adds	r0, r2, r1
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	d1e0      	bne.n	8006c02 <_free_r+0x22>
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4401      	add	r1, r0
 8006c46:	6011      	str	r1, [r2, #0]
 8006c48:	6053      	str	r3, [r2, #4]
 8006c4a:	e7da      	b.n	8006c02 <_free_r+0x22>
 8006c4c:	d902      	bls.n	8006c54 <_free_r+0x74>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	e7d6      	b.n	8006c02 <_free_r+0x22>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	1821      	adds	r1, r4, r0
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf01      	itttt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	1809      	addeq	r1, r1, r0
 8006c62:	6021      	streq	r1, [r4, #0]
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	6054      	str	r4, [r2, #4]
 8006c68:	e7cb      	b.n	8006c02 <_free_r+0x22>
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	20000b34 	.word	0x20000b34

08006c70 <sbrk_aligned>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	4e0e      	ldr	r6, [pc, #56]	; (8006cac <sbrk_aligned+0x3c>)
 8006c74:	460c      	mov	r4, r1
 8006c76:	6831      	ldr	r1, [r6, #0]
 8006c78:	4605      	mov	r5, r0
 8006c7a:	b911      	cbnz	r1, 8006c82 <sbrk_aligned+0x12>
 8006c7c:	f000 f9e8 	bl	8007050 <_sbrk_r>
 8006c80:	6030      	str	r0, [r6, #0]
 8006c82:	4621      	mov	r1, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 f9e3 	bl	8007050 <_sbrk_r>
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	d00a      	beq.n	8006ca4 <sbrk_aligned+0x34>
 8006c8e:	1cc4      	adds	r4, r0, #3
 8006c90:	f024 0403 	bic.w	r4, r4, #3
 8006c94:	42a0      	cmp	r0, r4
 8006c96:	d007      	beq.n	8006ca8 <sbrk_aligned+0x38>
 8006c98:	1a21      	subs	r1, r4, r0
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f000 f9d8 	bl	8007050 <_sbrk_r>
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d101      	bne.n	8006ca8 <sbrk_aligned+0x38>
 8006ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ca8:	4620      	mov	r0, r4
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	20000b38 	.word	0x20000b38

08006cb0 <_malloc_r>:
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	1ccd      	adds	r5, r1, #3
 8006cb6:	f025 0503 	bic.w	r5, r5, #3
 8006cba:	3508      	adds	r5, #8
 8006cbc:	2d0c      	cmp	r5, #12
 8006cbe:	bf38      	it	cc
 8006cc0:	250c      	movcc	r5, #12
 8006cc2:	2d00      	cmp	r5, #0
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	db01      	blt.n	8006ccc <_malloc_r+0x1c>
 8006cc8:	42a9      	cmp	r1, r5
 8006cca:	d905      	bls.n	8006cd8 <_malloc_r+0x28>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	2600      	movs	r6, #0
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd8:	4e2e      	ldr	r6, [pc, #184]	; (8006d94 <_malloc_r+0xe4>)
 8006cda:	f000 fa25 	bl	8007128 <__malloc_lock>
 8006cde:	6833      	ldr	r3, [r6, #0]
 8006ce0:	461c      	mov	r4, r3
 8006ce2:	bb34      	cbnz	r4, 8006d32 <_malloc_r+0x82>
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7ff ffc2 	bl	8006c70 <sbrk_aligned>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	4604      	mov	r4, r0
 8006cf0:	d14d      	bne.n	8006d8e <_malloc_r+0xde>
 8006cf2:	6834      	ldr	r4, [r6, #0]
 8006cf4:	4626      	mov	r6, r4
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	d140      	bne.n	8006d7c <_malloc_r+0xcc>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4638      	mov	r0, r7
 8006d00:	eb04 0803 	add.w	r8, r4, r3
 8006d04:	f000 f9a4 	bl	8007050 <_sbrk_r>
 8006d08:	4580      	cmp	r8, r0
 8006d0a:	d13a      	bne.n	8006d82 <_malloc_r+0xd2>
 8006d0c:	6821      	ldr	r1, [r4, #0]
 8006d0e:	3503      	adds	r5, #3
 8006d10:	1a6d      	subs	r5, r5, r1
 8006d12:	f025 0503 	bic.w	r5, r5, #3
 8006d16:	3508      	adds	r5, #8
 8006d18:	2d0c      	cmp	r5, #12
 8006d1a:	bf38      	it	cc
 8006d1c:	250c      	movcc	r5, #12
 8006d1e:	4638      	mov	r0, r7
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7ff ffa5 	bl	8006c70 <sbrk_aligned>
 8006d26:	3001      	adds	r0, #1
 8006d28:	d02b      	beq.n	8006d82 <_malloc_r+0xd2>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	442b      	add	r3, r5
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	e00e      	b.n	8006d50 <_malloc_r+0xa0>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	1b52      	subs	r2, r2, r5
 8006d36:	d41e      	bmi.n	8006d76 <_malloc_r+0xc6>
 8006d38:	2a0b      	cmp	r2, #11
 8006d3a:	d916      	bls.n	8006d6a <_malloc_r+0xba>
 8006d3c:	1961      	adds	r1, r4, r5
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	6025      	str	r5, [r4, #0]
 8006d42:	bf18      	it	ne
 8006d44:	6059      	strne	r1, [r3, #4]
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	bf08      	it	eq
 8006d4a:	6031      	streq	r1, [r6, #0]
 8006d4c:	5162      	str	r2, [r4, r5]
 8006d4e:	604b      	str	r3, [r1, #4]
 8006d50:	4638      	mov	r0, r7
 8006d52:	f104 060b 	add.w	r6, r4, #11
 8006d56:	f000 f9ed 	bl	8007134 <__malloc_unlock>
 8006d5a:	f026 0607 	bic.w	r6, r6, #7
 8006d5e:	1d23      	adds	r3, r4, #4
 8006d60:	1af2      	subs	r2, r6, r3
 8006d62:	d0b6      	beq.n	8006cd2 <_malloc_r+0x22>
 8006d64:	1b9b      	subs	r3, r3, r6
 8006d66:	50a3      	str	r3, [r4, r2]
 8006d68:	e7b3      	b.n	8006cd2 <_malloc_r+0x22>
 8006d6a:	6862      	ldr	r2, [r4, #4]
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	bf0c      	ite	eq
 8006d70:	6032      	streq	r2, [r6, #0]
 8006d72:	605a      	strne	r2, [r3, #4]
 8006d74:	e7ec      	b.n	8006d50 <_malloc_r+0xa0>
 8006d76:	4623      	mov	r3, r4
 8006d78:	6864      	ldr	r4, [r4, #4]
 8006d7a:	e7b2      	b.n	8006ce2 <_malloc_r+0x32>
 8006d7c:	4634      	mov	r4, r6
 8006d7e:	6876      	ldr	r6, [r6, #4]
 8006d80:	e7b9      	b.n	8006cf6 <_malloc_r+0x46>
 8006d82:	230c      	movs	r3, #12
 8006d84:	4638      	mov	r0, r7
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	f000 f9d4 	bl	8007134 <__malloc_unlock>
 8006d8c:	e7a1      	b.n	8006cd2 <_malloc_r+0x22>
 8006d8e:	6025      	str	r5, [r4, #0]
 8006d90:	e7de      	b.n	8006d50 <_malloc_r+0xa0>
 8006d92:	bf00      	nop
 8006d94:	20000b34 	.word	0x20000b34

08006d98 <__ssputs_r>:
 8006d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	688e      	ldr	r6, [r1, #8]
 8006d9e:	4682      	mov	sl, r0
 8006da0:	429e      	cmp	r6, r3
 8006da2:	460c      	mov	r4, r1
 8006da4:	4690      	mov	r8, r2
 8006da6:	461f      	mov	r7, r3
 8006da8:	d838      	bhi.n	8006e1c <__ssputs_r+0x84>
 8006daa:	898a      	ldrh	r2, [r1, #12]
 8006dac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006db0:	d032      	beq.n	8006e18 <__ssputs_r+0x80>
 8006db2:	6825      	ldr	r5, [r4, #0]
 8006db4:	6909      	ldr	r1, [r1, #16]
 8006db6:	3301      	adds	r3, #1
 8006db8:	eba5 0901 	sub.w	r9, r5, r1
 8006dbc:	6965      	ldr	r5, [r4, #20]
 8006dbe:	444b      	add	r3, r9
 8006dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dc8:	106d      	asrs	r5, r5, #1
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	bf38      	it	cc
 8006dce:	461d      	movcc	r5, r3
 8006dd0:	0553      	lsls	r3, r2, #21
 8006dd2:	d531      	bpl.n	8006e38 <__ssputs_r+0xa0>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7ff ff6b 	bl	8006cb0 <_malloc_r>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	b950      	cbnz	r0, 8006df4 <__ssputs_r+0x5c>
 8006dde:	230c      	movs	r3, #12
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	f8ca 3000 	str.w	r3, [sl]
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	464a      	mov	r2, r9
 8006df6:	6921      	ldr	r1, [r4, #16]
 8006df8:	f7ff fb4e 	bl	8006498 <memcpy>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	6126      	str	r6, [r4, #16]
 8006e0a:	444e      	add	r6, r9
 8006e0c:	6026      	str	r6, [r4, #0]
 8006e0e:	463e      	mov	r6, r7
 8006e10:	6165      	str	r5, [r4, #20]
 8006e12:	eba5 0509 	sub.w	r5, r5, r9
 8006e16:	60a5      	str	r5, [r4, #8]
 8006e18:	42be      	cmp	r6, r7
 8006e1a:	d900      	bls.n	8006e1e <__ssputs_r+0x86>
 8006e1c:	463e      	mov	r6, r7
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4641      	mov	r1, r8
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	f000 f966 	bl	80070f4 <memmove>
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	1b9b      	subs	r3, r3, r6
 8006e2e:	60a3      	str	r3, [r4, #8]
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	4433      	add	r3, r6
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	e7db      	b.n	8006df0 <__ssputs_r+0x58>
 8006e38:	462a      	mov	r2, r5
 8006e3a:	f000 f981 	bl	8007140 <_realloc_r>
 8006e3e:	4606      	mov	r6, r0
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d1e1      	bne.n	8006e08 <__ssputs_r+0x70>
 8006e44:	4650      	mov	r0, sl
 8006e46:	6921      	ldr	r1, [r4, #16]
 8006e48:	f7ff feca 	bl	8006be0 <_free_r>
 8006e4c:	e7c7      	b.n	8006dde <__ssputs_r+0x46>
	...

08006e50 <_svfiprintf_r>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	4698      	mov	r8, r3
 8006e56:	898b      	ldrh	r3, [r1, #12]
 8006e58:	4607      	mov	r7, r0
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	4614      	mov	r4, r2
 8006e60:	b09d      	sub	sp, #116	; 0x74
 8006e62:	d50e      	bpl.n	8006e82 <_svfiprintf_r+0x32>
 8006e64:	690b      	ldr	r3, [r1, #16]
 8006e66:	b963      	cbnz	r3, 8006e82 <_svfiprintf_r+0x32>
 8006e68:	2140      	movs	r1, #64	; 0x40
 8006e6a:	f7ff ff21 	bl	8006cb0 <_malloc_r>
 8006e6e:	6028      	str	r0, [r5, #0]
 8006e70:	6128      	str	r0, [r5, #16]
 8006e72:	b920      	cbnz	r0, 8006e7e <_svfiprintf_r+0x2e>
 8006e74:	230c      	movs	r3, #12
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e0d1      	b.n	8007022 <_svfiprintf_r+0x1d2>
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	616b      	str	r3, [r5, #20]
 8006e82:	2300      	movs	r3, #0
 8006e84:	9309      	str	r3, [sp, #36]	; 0x24
 8006e86:	2320      	movs	r3, #32
 8006e88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e8c:	2330      	movs	r3, #48	; 0x30
 8006e8e:	f04f 0901 	mov.w	r9, #1
 8006e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800703c <_svfiprintf_r+0x1ec>
 8006e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	469a      	mov	sl, r3
 8006ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea6:	b10a      	cbz	r2, 8006eac <_svfiprintf_r+0x5c>
 8006ea8:	2a25      	cmp	r2, #37	; 0x25
 8006eaa:	d1f9      	bne.n	8006ea0 <_svfiprintf_r+0x50>
 8006eac:	ebba 0b04 	subs.w	fp, sl, r4
 8006eb0:	d00b      	beq.n	8006eca <_svfiprintf_r+0x7a>
 8006eb2:	465b      	mov	r3, fp
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ff6d 	bl	8006d98 <__ssputs_r>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f000 80aa 	beq.w	8007018 <_svfiprintf_r+0x1c8>
 8006ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec6:	445a      	add	r2, fp
 8006ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8006eca:	f89a 3000 	ldrb.w	r3, [sl]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80a2 	beq.w	8007018 <_svfiprintf_r+0x1c8>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ede:	f10a 0a01 	add.w	sl, sl, #1
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	9307      	str	r3, [sp, #28]
 8006ee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eea:	931a      	str	r3, [sp, #104]	; 0x68
 8006eec:	4654      	mov	r4, sl
 8006eee:	2205      	movs	r2, #5
 8006ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef4:	4851      	ldr	r0, [pc, #324]	; (800703c <_svfiprintf_r+0x1ec>)
 8006ef6:	f7ff fac1 	bl	800647c <memchr>
 8006efa:	9a04      	ldr	r2, [sp, #16]
 8006efc:	b9d8      	cbnz	r0, 8006f36 <_svfiprintf_r+0xe6>
 8006efe:	06d0      	lsls	r0, r2, #27
 8006f00:	bf44      	itt	mi
 8006f02:	2320      	movmi	r3, #32
 8006f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f08:	0711      	lsls	r1, r2, #28
 8006f0a:	bf44      	itt	mi
 8006f0c:	232b      	movmi	r3, #43	; 0x2b
 8006f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f12:	f89a 3000 	ldrb.w	r3, [sl]
 8006f16:	2b2a      	cmp	r3, #42	; 0x2a
 8006f18:	d015      	beq.n	8006f46 <_svfiprintf_r+0xf6>
 8006f1a:	4654      	mov	r4, sl
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f04f 0c0a 	mov.w	ip, #10
 8006f22:	9a07      	ldr	r2, [sp, #28]
 8006f24:	4621      	mov	r1, r4
 8006f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f2a:	3b30      	subs	r3, #48	; 0x30
 8006f2c:	2b09      	cmp	r3, #9
 8006f2e:	d94e      	bls.n	8006fce <_svfiprintf_r+0x17e>
 8006f30:	b1b0      	cbz	r0, 8006f60 <_svfiprintf_r+0x110>
 8006f32:	9207      	str	r2, [sp, #28]
 8006f34:	e014      	b.n	8006f60 <_svfiprintf_r+0x110>
 8006f36:	eba0 0308 	sub.w	r3, r0, r8
 8006f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	46a2      	mov	sl, r4
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	e7d2      	b.n	8006eec <_svfiprintf_r+0x9c>
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	1d19      	adds	r1, r3, #4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	9103      	str	r1, [sp, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bfbb      	ittet	lt
 8006f52:	425b      	neglt	r3, r3
 8006f54:	f042 0202 	orrlt.w	r2, r2, #2
 8006f58:	9307      	strge	r3, [sp, #28]
 8006f5a:	9307      	strlt	r3, [sp, #28]
 8006f5c:	bfb8      	it	lt
 8006f5e:	9204      	strlt	r2, [sp, #16]
 8006f60:	7823      	ldrb	r3, [r4, #0]
 8006f62:	2b2e      	cmp	r3, #46	; 0x2e
 8006f64:	d10c      	bne.n	8006f80 <_svfiprintf_r+0x130>
 8006f66:	7863      	ldrb	r3, [r4, #1]
 8006f68:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6a:	d135      	bne.n	8006fd8 <_svfiprintf_r+0x188>
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	3402      	adds	r4, #2
 8006f70:	1d1a      	adds	r2, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9203      	str	r2, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfb8      	it	lt
 8006f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f7e:	9305      	str	r3, [sp, #20]
 8006f80:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007040 <_svfiprintf_r+0x1f0>
 8006f84:	2203      	movs	r2, #3
 8006f86:	4650      	mov	r0, sl
 8006f88:	7821      	ldrb	r1, [r4, #0]
 8006f8a:	f7ff fa77 	bl	800647c <memchr>
 8006f8e:	b140      	cbz	r0, 8006fa2 <_svfiprintf_r+0x152>
 8006f90:	2340      	movs	r3, #64	; 0x40
 8006f92:	eba0 000a 	sub.w	r0, r0, sl
 8006f96:	fa03 f000 	lsl.w	r0, r3, r0
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	3401      	adds	r4, #1
 8006f9e:	4303      	orrs	r3, r0
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa6:	2206      	movs	r2, #6
 8006fa8:	4826      	ldr	r0, [pc, #152]	; (8007044 <_svfiprintf_r+0x1f4>)
 8006faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fae:	f7ff fa65 	bl	800647c <memchr>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d038      	beq.n	8007028 <_svfiprintf_r+0x1d8>
 8006fb6:	4b24      	ldr	r3, [pc, #144]	; (8007048 <_svfiprintf_r+0x1f8>)
 8006fb8:	bb1b      	cbnz	r3, 8007002 <_svfiprintf_r+0x1b2>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	3307      	adds	r3, #7
 8006fbe:	f023 0307 	bic.w	r3, r3, #7
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc8:	4433      	add	r3, r6
 8006fca:	9309      	str	r3, [sp, #36]	; 0x24
 8006fcc:	e767      	b.n	8006e9e <_svfiprintf_r+0x4e>
 8006fce:	460c      	mov	r4, r1
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd6:	e7a5      	b.n	8006f24 <_svfiprintf_r+0xd4>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f04f 0c0a 	mov.w	ip, #10
 8006fde:	4619      	mov	r1, r3
 8006fe0:	3401      	adds	r4, #1
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fea:	3a30      	subs	r2, #48	; 0x30
 8006fec:	2a09      	cmp	r2, #9
 8006fee:	d903      	bls.n	8006ff8 <_svfiprintf_r+0x1a8>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0c5      	beq.n	8006f80 <_svfiprintf_r+0x130>
 8006ff4:	9105      	str	r1, [sp, #20]
 8006ff6:	e7c3      	b.n	8006f80 <_svfiprintf_r+0x130>
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007000:	e7f0      	b.n	8006fe4 <_svfiprintf_r+0x194>
 8007002:	ab03      	add	r3, sp, #12
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	462a      	mov	r2, r5
 8007008:	4638      	mov	r0, r7
 800700a:	4b10      	ldr	r3, [pc, #64]	; (800704c <_svfiprintf_r+0x1fc>)
 800700c:	a904      	add	r1, sp, #16
 800700e:	f7fd ffcd 	bl	8004fac <_printf_float>
 8007012:	1c42      	adds	r2, r0, #1
 8007014:	4606      	mov	r6, r0
 8007016:	d1d6      	bne.n	8006fc6 <_svfiprintf_r+0x176>
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	065b      	lsls	r3, r3, #25
 800701c:	f53f af2c 	bmi.w	8006e78 <_svfiprintf_r+0x28>
 8007020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007022:	b01d      	add	sp, #116	; 0x74
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	ab03      	add	r3, sp, #12
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	462a      	mov	r2, r5
 800702e:	4638      	mov	r0, r7
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <_svfiprintf_r+0x1fc>)
 8007032:	a904      	add	r1, sp, #16
 8007034:	f7fe fa56 	bl	80054e4 <_printf_i>
 8007038:	e7eb      	b.n	8007012 <_svfiprintf_r+0x1c2>
 800703a:	bf00      	nop
 800703c:	080091d4 	.word	0x080091d4
 8007040:	080091da 	.word	0x080091da
 8007044:	080091de 	.word	0x080091de
 8007048:	08004fad 	.word	0x08004fad
 800704c:	08006d99 	.word	0x08006d99

08007050 <_sbrk_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	2300      	movs	r3, #0
 8007054:	4d05      	ldr	r5, [pc, #20]	; (800706c <_sbrk_r+0x1c>)
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fa fe7a 	bl	8001d54 <_sbrk>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_sbrk_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_sbrk_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000b3c 	.word	0x20000b3c

08007070 <__assert_func>:
 8007070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007072:	4614      	mov	r4, r2
 8007074:	461a      	mov	r2, r3
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <__assert_func+0x2c>)
 8007078:	4605      	mov	r5, r0
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68d8      	ldr	r0, [r3, #12]
 800707e:	b14c      	cbz	r4, 8007094 <__assert_func+0x24>
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <__assert_func+0x30>)
 8007082:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007086:	9100      	str	r1, [sp, #0]
 8007088:	462b      	mov	r3, r5
 800708a:	4906      	ldr	r1, [pc, #24]	; (80070a4 <__assert_func+0x34>)
 800708c:	f000 f80e 	bl	80070ac <fiprintf>
 8007090:	f000 faaa 	bl	80075e8 <abort>
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <__assert_func+0x38>)
 8007096:	461c      	mov	r4, r3
 8007098:	e7f3      	b.n	8007082 <__assert_func+0x12>
 800709a:	bf00      	nop
 800709c:	20000014 	.word	0x20000014
 80070a0:	080091e5 	.word	0x080091e5
 80070a4:	080091f2 	.word	0x080091f2
 80070a8:	08009220 	.word	0x08009220

080070ac <fiprintf>:
 80070ac:	b40e      	push	{r1, r2, r3}
 80070ae:	b503      	push	{r0, r1, lr}
 80070b0:	4601      	mov	r1, r0
 80070b2:	ab03      	add	r3, sp, #12
 80070b4:	4805      	ldr	r0, [pc, #20]	; (80070cc <fiprintf+0x20>)
 80070b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	f000 f895 	bl	80071ec <_vfiprintf_r>
 80070c2:	b002      	add	sp, #8
 80070c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c8:	b003      	add	sp, #12
 80070ca:	4770      	bx	lr
 80070cc:	20000014 	.word	0x20000014

080070d0 <__ascii_mbtowc>:
 80070d0:	b082      	sub	sp, #8
 80070d2:	b901      	cbnz	r1, 80070d6 <__ascii_mbtowc+0x6>
 80070d4:	a901      	add	r1, sp, #4
 80070d6:	b142      	cbz	r2, 80070ea <__ascii_mbtowc+0x1a>
 80070d8:	b14b      	cbz	r3, 80070ee <__ascii_mbtowc+0x1e>
 80070da:	7813      	ldrb	r3, [r2, #0]
 80070dc:	600b      	str	r3, [r1, #0]
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	1e10      	subs	r0, r2, #0
 80070e2:	bf18      	it	ne
 80070e4:	2001      	movne	r0, #1
 80070e6:	b002      	add	sp, #8
 80070e8:	4770      	bx	lr
 80070ea:	4610      	mov	r0, r2
 80070ec:	e7fb      	b.n	80070e6 <__ascii_mbtowc+0x16>
 80070ee:	f06f 0001 	mvn.w	r0, #1
 80070f2:	e7f8      	b.n	80070e6 <__ascii_mbtowc+0x16>

080070f4 <memmove>:
 80070f4:	4288      	cmp	r0, r1
 80070f6:	b510      	push	{r4, lr}
 80070f8:	eb01 0402 	add.w	r4, r1, r2
 80070fc:	d902      	bls.n	8007104 <memmove+0x10>
 80070fe:	4284      	cmp	r4, r0
 8007100:	4623      	mov	r3, r4
 8007102:	d807      	bhi.n	8007114 <memmove+0x20>
 8007104:	1e43      	subs	r3, r0, #1
 8007106:	42a1      	cmp	r1, r4
 8007108:	d008      	beq.n	800711c <memmove+0x28>
 800710a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800710e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007112:	e7f8      	b.n	8007106 <memmove+0x12>
 8007114:	4601      	mov	r1, r0
 8007116:	4402      	add	r2, r0
 8007118:	428a      	cmp	r2, r1
 800711a:	d100      	bne.n	800711e <memmove+0x2a>
 800711c:	bd10      	pop	{r4, pc}
 800711e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007126:	e7f7      	b.n	8007118 <memmove+0x24>

08007128 <__malloc_lock>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__malloc_lock+0x8>)
 800712a:	f000 bc19 	b.w	8007960 <__retarget_lock_acquire_recursive>
 800712e:	bf00      	nop
 8007130:	20000b40 	.word	0x20000b40

08007134 <__malloc_unlock>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__malloc_unlock+0x8>)
 8007136:	f000 bc14 	b.w	8007962 <__retarget_lock_release_recursive>
 800713a:	bf00      	nop
 800713c:	20000b40 	.word	0x20000b40

08007140 <_realloc_r>:
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	4680      	mov	r8, r0
 8007146:	4614      	mov	r4, r2
 8007148:	460e      	mov	r6, r1
 800714a:	b921      	cbnz	r1, 8007156 <_realloc_r+0x16>
 800714c:	4611      	mov	r1, r2
 800714e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007152:	f7ff bdad 	b.w	8006cb0 <_malloc_r>
 8007156:	b92a      	cbnz	r2, 8007164 <_realloc_r+0x24>
 8007158:	f7ff fd42 	bl	8006be0 <_free_r>
 800715c:	4625      	mov	r5, r4
 800715e:	4628      	mov	r0, r5
 8007160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007164:	f000 fc64 	bl	8007a30 <_malloc_usable_size_r>
 8007168:	4284      	cmp	r4, r0
 800716a:	4607      	mov	r7, r0
 800716c:	d802      	bhi.n	8007174 <_realloc_r+0x34>
 800716e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007172:	d812      	bhi.n	800719a <_realloc_r+0x5a>
 8007174:	4621      	mov	r1, r4
 8007176:	4640      	mov	r0, r8
 8007178:	f7ff fd9a 	bl	8006cb0 <_malloc_r>
 800717c:	4605      	mov	r5, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	d0ed      	beq.n	800715e <_realloc_r+0x1e>
 8007182:	42bc      	cmp	r4, r7
 8007184:	4622      	mov	r2, r4
 8007186:	4631      	mov	r1, r6
 8007188:	bf28      	it	cs
 800718a:	463a      	movcs	r2, r7
 800718c:	f7ff f984 	bl	8006498 <memcpy>
 8007190:	4631      	mov	r1, r6
 8007192:	4640      	mov	r0, r8
 8007194:	f7ff fd24 	bl	8006be0 <_free_r>
 8007198:	e7e1      	b.n	800715e <_realloc_r+0x1e>
 800719a:	4635      	mov	r5, r6
 800719c:	e7df      	b.n	800715e <_realloc_r+0x1e>

0800719e <__sfputc_r>:
 800719e:	6893      	ldr	r3, [r2, #8]
 80071a0:	b410      	push	{r4}
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	6093      	str	r3, [r2, #8]
 80071a8:	da07      	bge.n	80071ba <__sfputc_r+0x1c>
 80071aa:	6994      	ldr	r4, [r2, #24]
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	db01      	blt.n	80071b4 <__sfputc_r+0x16>
 80071b0:	290a      	cmp	r1, #10
 80071b2:	d102      	bne.n	80071ba <__sfputc_r+0x1c>
 80071b4:	bc10      	pop	{r4}
 80071b6:	f000 b949 	b.w	800744c <__swbuf_r>
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	1c58      	adds	r0, r3, #1
 80071be:	6010      	str	r0, [r2, #0]
 80071c0:	7019      	strb	r1, [r3, #0]
 80071c2:	4608      	mov	r0, r1
 80071c4:	bc10      	pop	{r4}
 80071c6:	4770      	bx	lr

080071c8 <__sfputs_r>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	4606      	mov	r6, r0
 80071cc:	460f      	mov	r7, r1
 80071ce:	4614      	mov	r4, r2
 80071d0:	18d5      	adds	r5, r2, r3
 80071d2:	42ac      	cmp	r4, r5
 80071d4:	d101      	bne.n	80071da <__sfputs_r+0x12>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e007      	b.n	80071ea <__sfputs_r+0x22>
 80071da:	463a      	mov	r2, r7
 80071dc:	4630      	mov	r0, r6
 80071de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e2:	f7ff ffdc 	bl	800719e <__sfputc_r>
 80071e6:	1c43      	adds	r3, r0, #1
 80071e8:	d1f3      	bne.n	80071d2 <__sfputs_r+0xa>
 80071ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071ec <_vfiprintf_r>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	460d      	mov	r5, r1
 80071f2:	4614      	mov	r4, r2
 80071f4:	4698      	mov	r8, r3
 80071f6:	4606      	mov	r6, r0
 80071f8:	b09d      	sub	sp, #116	; 0x74
 80071fa:	b118      	cbz	r0, 8007204 <_vfiprintf_r+0x18>
 80071fc:	6983      	ldr	r3, [r0, #24]
 80071fe:	b90b      	cbnz	r3, 8007204 <_vfiprintf_r+0x18>
 8007200:	f000 fb10 	bl	8007824 <__sinit>
 8007204:	4b89      	ldr	r3, [pc, #548]	; (800742c <_vfiprintf_r+0x240>)
 8007206:	429d      	cmp	r5, r3
 8007208:	d11b      	bne.n	8007242 <_vfiprintf_r+0x56>
 800720a:	6875      	ldr	r5, [r6, #4]
 800720c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800720e:	07d9      	lsls	r1, r3, #31
 8007210:	d405      	bmi.n	800721e <_vfiprintf_r+0x32>
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	059a      	lsls	r2, r3, #22
 8007216:	d402      	bmi.n	800721e <_vfiprintf_r+0x32>
 8007218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800721a:	f000 fba1 	bl	8007960 <__retarget_lock_acquire_recursive>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	071b      	lsls	r3, r3, #28
 8007222:	d501      	bpl.n	8007228 <_vfiprintf_r+0x3c>
 8007224:	692b      	ldr	r3, [r5, #16]
 8007226:	b9eb      	cbnz	r3, 8007264 <_vfiprintf_r+0x78>
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f000 f96e 	bl	800750c <__swsetup_r>
 8007230:	b1c0      	cbz	r0, 8007264 <_vfiprintf_r+0x78>
 8007232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007234:	07dc      	lsls	r4, r3, #31
 8007236:	d50e      	bpl.n	8007256 <_vfiprintf_r+0x6a>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	b01d      	add	sp, #116	; 0x74
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	4b7b      	ldr	r3, [pc, #492]	; (8007430 <_vfiprintf_r+0x244>)
 8007244:	429d      	cmp	r5, r3
 8007246:	d101      	bne.n	800724c <_vfiprintf_r+0x60>
 8007248:	68b5      	ldr	r5, [r6, #8]
 800724a:	e7df      	b.n	800720c <_vfiprintf_r+0x20>
 800724c:	4b79      	ldr	r3, [pc, #484]	; (8007434 <_vfiprintf_r+0x248>)
 800724e:	429d      	cmp	r5, r3
 8007250:	bf08      	it	eq
 8007252:	68f5      	ldreq	r5, [r6, #12]
 8007254:	e7da      	b.n	800720c <_vfiprintf_r+0x20>
 8007256:	89ab      	ldrh	r3, [r5, #12]
 8007258:	0598      	lsls	r0, r3, #22
 800725a:	d4ed      	bmi.n	8007238 <_vfiprintf_r+0x4c>
 800725c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800725e:	f000 fb80 	bl	8007962 <__retarget_lock_release_recursive>
 8007262:	e7e9      	b.n	8007238 <_vfiprintf_r+0x4c>
 8007264:	2300      	movs	r3, #0
 8007266:	9309      	str	r3, [sp, #36]	; 0x24
 8007268:	2320      	movs	r3, #32
 800726a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800726e:	2330      	movs	r3, #48	; 0x30
 8007270:	f04f 0901 	mov.w	r9, #1
 8007274:	f8cd 800c 	str.w	r8, [sp, #12]
 8007278:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007438 <_vfiprintf_r+0x24c>
 800727c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007280:	4623      	mov	r3, r4
 8007282:	469a      	mov	sl, r3
 8007284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007288:	b10a      	cbz	r2, 800728e <_vfiprintf_r+0xa2>
 800728a:	2a25      	cmp	r2, #37	; 0x25
 800728c:	d1f9      	bne.n	8007282 <_vfiprintf_r+0x96>
 800728e:	ebba 0b04 	subs.w	fp, sl, r4
 8007292:	d00b      	beq.n	80072ac <_vfiprintf_r+0xc0>
 8007294:	465b      	mov	r3, fp
 8007296:	4622      	mov	r2, r4
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f7ff ff94 	bl	80071c8 <__sfputs_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	f000 80aa 	beq.w	80073fa <_vfiprintf_r+0x20e>
 80072a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a8:	445a      	add	r2, fp
 80072aa:	9209      	str	r2, [sp, #36]	; 0x24
 80072ac:	f89a 3000 	ldrb.w	r3, [sl]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 80a2 	beq.w	80073fa <_vfiprintf_r+0x20e>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f04f 32ff 	mov.w	r2, #4294967295
 80072bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c0:	f10a 0a01 	add.w	sl, sl, #1
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072cc:	931a      	str	r3, [sp, #104]	; 0x68
 80072ce:	4654      	mov	r4, sl
 80072d0:	2205      	movs	r2, #5
 80072d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d6:	4858      	ldr	r0, [pc, #352]	; (8007438 <_vfiprintf_r+0x24c>)
 80072d8:	f7ff f8d0 	bl	800647c <memchr>
 80072dc:	9a04      	ldr	r2, [sp, #16]
 80072de:	b9d8      	cbnz	r0, 8007318 <_vfiprintf_r+0x12c>
 80072e0:	06d1      	lsls	r1, r2, #27
 80072e2:	bf44      	itt	mi
 80072e4:	2320      	movmi	r3, #32
 80072e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ea:	0713      	lsls	r3, r2, #28
 80072ec:	bf44      	itt	mi
 80072ee:	232b      	movmi	r3, #43	; 0x2b
 80072f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b2a      	cmp	r3, #42	; 0x2a
 80072fa:	d015      	beq.n	8007328 <_vfiprintf_r+0x13c>
 80072fc:	4654      	mov	r4, sl
 80072fe:	2000      	movs	r0, #0
 8007300:	f04f 0c0a 	mov.w	ip, #10
 8007304:	9a07      	ldr	r2, [sp, #28]
 8007306:	4621      	mov	r1, r4
 8007308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730c:	3b30      	subs	r3, #48	; 0x30
 800730e:	2b09      	cmp	r3, #9
 8007310:	d94e      	bls.n	80073b0 <_vfiprintf_r+0x1c4>
 8007312:	b1b0      	cbz	r0, 8007342 <_vfiprintf_r+0x156>
 8007314:	9207      	str	r2, [sp, #28]
 8007316:	e014      	b.n	8007342 <_vfiprintf_r+0x156>
 8007318:	eba0 0308 	sub.w	r3, r0, r8
 800731c:	fa09 f303 	lsl.w	r3, r9, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	46a2      	mov	sl, r4
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	e7d2      	b.n	80072ce <_vfiprintf_r+0xe2>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	1d19      	adds	r1, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9103      	str	r1, [sp, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	bfbb      	ittet	lt
 8007334:	425b      	neglt	r3, r3
 8007336:	f042 0202 	orrlt.w	r2, r2, #2
 800733a:	9307      	strge	r3, [sp, #28]
 800733c:	9307      	strlt	r3, [sp, #28]
 800733e:	bfb8      	it	lt
 8007340:	9204      	strlt	r2, [sp, #16]
 8007342:	7823      	ldrb	r3, [r4, #0]
 8007344:	2b2e      	cmp	r3, #46	; 0x2e
 8007346:	d10c      	bne.n	8007362 <_vfiprintf_r+0x176>
 8007348:	7863      	ldrb	r3, [r4, #1]
 800734a:	2b2a      	cmp	r3, #42	; 0x2a
 800734c:	d135      	bne.n	80073ba <_vfiprintf_r+0x1ce>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	3402      	adds	r4, #2
 8007352:	1d1a      	adds	r2, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	9203      	str	r2, [sp, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	bfb8      	it	lt
 800735c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007360:	9305      	str	r3, [sp, #20]
 8007362:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800743c <_vfiprintf_r+0x250>
 8007366:	2203      	movs	r2, #3
 8007368:	4650      	mov	r0, sl
 800736a:	7821      	ldrb	r1, [r4, #0]
 800736c:	f7ff f886 	bl	800647c <memchr>
 8007370:	b140      	cbz	r0, 8007384 <_vfiprintf_r+0x198>
 8007372:	2340      	movs	r3, #64	; 0x40
 8007374:	eba0 000a 	sub.w	r0, r0, sl
 8007378:	fa03 f000 	lsl.w	r0, r3, r0
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	3401      	adds	r4, #1
 8007380:	4303      	orrs	r3, r0
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	2206      	movs	r2, #6
 800738a:	482d      	ldr	r0, [pc, #180]	; (8007440 <_vfiprintf_r+0x254>)
 800738c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007390:	f7ff f874 	bl	800647c <memchr>
 8007394:	2800      	cmp	r0, #0
 8007396:	d03f      	beq.n	8007418 <_vfiprintf_r+0x22c>
 8007398:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <_vfiprintf_r+0x258>)
 800739a:	bb1b      	cbnz	r3, 80073e4 <_vfiprintf_r+0x1f8>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	3307      	adds	r3, #7
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	443b      	add	r3, r7
 80073ac:	9309      	str	r3, [sp, #36]	; 0x24
 80073ae:	e767      	b.n	8007280 <_vfiprintf_r+0x94>
 80073b0:	460c      	mov	r4, r1
 80073b2:	2001      	movs	r0, #1
 80073b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b8:	e7a5      	b.n	8007306 <_vfiprintf_r+0x11a>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f04f 0c0a 	mov.w	ip, #10
 80073c0:	4619      	mov	r1, r3
 80073c2:	3401      	adds	r4, #1
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	4620      	mov	r0, r4
 80073c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073cc:	3a30      	subs	r2, #48	; 0x30
 80073ce:	2a09      	cmp	r2, #9
 80073d0:	d903      	bls.n	80073da <_vfiprintf_r+0x1ee>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0c5      	beq.n	8007362 <_vfiprintf_r+0x176>
 80073d6:	9105      	str	r1, [sp, #20]
 80073d8:	e7c3      	b.n	8007362 <_vfiprintf_r+0x176>
 80073da:	4604      	mov	r4, r0
 80073dc:	2301      	movs	r3, #1
 80073de:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e2:	e7f0      	b.n	80073c6 <_vfiprintf_r+0x1da>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	4630      	mov	r0, r6
 80073ec:	4b16      	ldr	r3, [pc, #88]	; (8007448 <_vfiprintf_r+0x25c>)
 80073ee:	a904      	add	r1, sp, #16
 80073f0:	f7fd fddc 	bl	8004fac <_printf_float>
 80073f4:	4607      	mov	r7, r0
 80073f6:	1c78      	adds	r0, r7, #1
 80073f8:	d1d6      	bne.n	80073a8 <_vfiprintf_r+0x1bc>
 80073fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073fc:	07d9      	lsls	r1, r3, #31
 80073fe:	d405      	bmi.n	800740c <_vfiprintf_r+0x220>
 8007400:	89ab      	ldrh	r3, [r5, #12]
 8007402:	059a      	lsls	r2, r3, #22
 8007404:	d402      	bmi.n	800740c <_vfiprintf_r+0x220>
 8007406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007408:	f000 faab 	bl	8007962 <__retarget_lock_release_recursive>
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	065b      	lsls	r3, r3, #25
 8007410:	f53f af12 	bmi.w	8007238 <_vfiprintf_r+0x4c>
 8007414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007416:	e711      	b.n	800723c <_vfiprintf_r+0x50>
 8007418:	ab03      	add	r3, sp, #12
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	462a      	mov	r2, r5
 800741e:	4630      	mov	r0, r6
 8007420:	4b09      	ldr	r3, [pc, #36]	; (8007448 <_vfiprintf_r+0x25c>)
 8007422:	a904      	add	r1, sp, #16
 8007424:	f7fe f85e 	bl	80054e4 <_printf_i>
 8007428:	e7e4      	b.n	80073f4 <_vfiprintf_r+0x208>
 800742a:	bf00      	nop
 800742c:	0800934c 	.word	0x0800934c
 8007430:	0800936c 	.word	0x0800936c
 8007434:	0800932c 	.word	0x0800932c
 8007438:	080091d4 	.word	0x080091d4
 800743c:	080091da 	.word	0x080091da
 8007440:	080091de 	.word	0x080091de
 8007444:	08004fad 	.word	0x08004fad
 8007448:	080071c9 	.word	0x080071c9

0800744c <__swbuf_r>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	460e      	mov	r6, r1
 8007450:	4614      	mov	r4, r2
 8007452:	4605      	mov	r5, r0
 8007454:	b118      	cbz	r0, 800745e <__swbuf_r+0x12>
 8007456:	6983      	ldr	r3, [r0, #24]
 8007458:	b90b      	cbnz	r3, 800745e <__swbuf_r+0x12>
 800745a:	f000 f9e3 	bl	8007824 <__sinit>
 800745e:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <__swbuf_r+0x98>)
 8007460:	429c      	cmp	r4, r3
 8007462:	d12b      	bne.n	80074bc <__swbuf_r+0x70>
 8007464:	686c      	ldr	r4, [r5, #4]
 8007466:	69a3      	ldr	r3, [r4, #24]
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	071a      	lsls	r2, r3, #28
 800746e:	d52f      	bpl.n	80074d0 <__swbuf_r+0x84>
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	b36b      	cbz	r3, 80074d0 <__swbuf_r+0x84>
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	b2f6      	uxtb	r6, r6
 800747a:	1ac0      	subs	r0, r0, r3
 800747c:	6963      	ldr	r3, [r4, #20]
 800747e:	4637      	mov	r7, r6
 8007480:	4283      	cmp	r3, r0
 8007482:	dc04      	bgt.n	800748e <__swbuf_r+0x42>
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f938 	bl	80076fc <_fflush_r>
 800748c:	bb30      	cbnz	r0, 80074dc <__swbuf_r+0x90>
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	3001      	adds	r0, #1
 8007492:	3b01      	subs	r3, #1
 8007494:	60a3      	str	r3, [r4, #8]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	701e      	strb	r6, [r3, #0]
 800749e:	6963      	ldr	r3, [r4, #20]
 80074a0:	4283      	cmp	r3, r0
 80074a2:	d004      	beq.n	80074ae <__swbuf_r+0x62>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	07db      	lsls	r3, r3, #31
 80074a8:	d506      	bpl.n	80074b8 <__swbuf_r+0x6c>
 80074aa:	2e0a      	cmp	r6, #10
 80074ac:	d104      	bne.n	80074b8 <__swbuf_r+0x6c>
 80074ae:	4621      	mov	r1, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	f000 f923 	bl	80076fc <_fflush_r>
 80074b6:	b988      	cbnz	r0, 80074dc <__swbuf_r+0x90>
 80074b8:	4638      	mov	r0, r7
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <__swbuf_r+0x9c>)
 80074be:	429c      	cmp	r4, r3
 80074c0:	d101      	bne.n	80074c6 <__swbuf_r+0x7a>
 80074c2:	68ac      	ldr	r4, [r5, #8]
 80074c4:	e7cf      	b.n	8007466 <__swbuf_r+0x1a>
 80074c6:	4b09      	ldr	r3, [pc, #36]	; (80074ec <__swbuf_r+0xa0>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	bf08      	it	eq
 80074cc:	68ec      	ldreq	r4, [r5, #12]
 80074ce:	e7ca      	b.n	8007466 <__swbuf_r+0x1a>
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f81a 	bl	800750c <__swsetup_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0cb      	beq.n	8007474 <__swbuf_r+0x28>
 80074dc:	f04f 37ff 	mov.w	r7, #4294967295
 80074e0:	e7ea      	b.n	80074b8 <__swbuf_r+0x6c>
 80074e2:	bf00      	nop
 80074e4:	0800934c 	.word	0x0800934c
 80074e8:	0800936c 	.word	0x0800936c
 80074ec:	0800932c 	.word	0x0800932c

080074f0 <__ascii_wctomb>:
 80074f0:	4603      	mov	r3, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	b141      	cbz	r1, 8007508 <__ascii_wctomb+0x18>
 80074f6:	2aff      	cmp	r2, #255	; 0xff
 80074f8:	d904      	bls.n	8007504 <__ascii_wctomb+0x14>
 80074fa:	228a      	movs	r2, #138	; 0x8a
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	4770      	bx	lr
 8007504:	2001      	movs	r0, #1
 8007506:	700a      	strb	r2, [r1, #0]
 8007508:	4770      	bx	lr
	...

0800750c <__swsetup_r>:
 800750c:	4b32      	ldr	r3, [pc, #200]	; (80075d8 <__swsetup_r+0xcc>)
 800750e:	b570      	push	{r4, r5, r6, lr}
 8007510:	681d      	ldr	r5, [r3, #0]
 8007512:	4606      	mov	r6, r0
 8007514:	460c      	mov	r4, r1
 8007516:	b125      	cbz	r5, 8007522 <__swsetup_r+0x16>
 8007518:	69ab      	ldr	r3, [r5, #24]
 800751a:	b913      	cbnz	r3, 8007522 <__swsetup_r+0x16>
 800751c:	4628      	mov	r0, r5
 800751e:	f000 f981 	bl	8007824 <__sinit>
 8007522:	4b2e      	ldr	r3, [pc, #184]	; (80075dc <__swsetup_r+0xd0>)
 8007524:	429c      	cmp	r4, r3
 8007526:	d10f      	bne.n	8007548 <__swsetup_r+0x3c>
 8007528:	686c      	ldr	r4, [r5, #4]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007530:	0719      	lsls	r1, r3, #28
 8007532:	d42c      	bmi.n	800758e <__swsetup_r+0x82>
 8007534:	06dd      	lsls	r5, r3, #27
 8007536:	d411      	bmi.n	800755c <__swsetup_r+0x50>
 8007538:	2309      	movs	r3, #9
 800753a:	6033      	str	r3, [r6, #0]
 800753c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	e03e      	b.n	80075c6 <__swsetup_r+0xba>
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <__swsetup_r+0xd4>)
 800754a:	429c      	cmp	r4, r3
 800754c:	d101      	bne.n	8007552 <__swsetup_r+0x46>
 800754e:	68ac      	ldr	r4, [r5, #8]
 8007550:	e7eb      	b.n	800752a <__swsetup_r+0x1e>
 8007552:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <__swsetup_r+0xd8>)
 8007554:	429c      	cmp	r4, r3
 8007556:	bf08      	it	eq
 8007558:	68ec      	ldreq	r4, [r5, #12]
 800755a:	e7e6      	b.n	800752a <__swsetup_r+0x1e>
 800755c:	0758      	lsls	r0, r3, #29
 800755e:	d512      	bpl.n	8007586 <__swsetup_r+0x7a>
 8007560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007562:	b141      	cbz	r1, 8007576 <__swsetup_r+0x6a>
 8007564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007568:	4299      	cmp	r1, r3
 800756a:	d002      	beq.n	8007572 <__swsetup_r+0x66>
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff fb37 	bl	8006be0 <_free_r>
 8007572:	2300      	movs	r3, #0
 8007574:	6363      	str	r3, [r4, #52]	; 0x34
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	2300      	movs	r3, #0
 8007580:	6063      	str	r3, [r4, #4]
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f043 0308 	orr.w	r3, r3, #8
 800758c:	81a3      	strh	r3, [r4, #12]
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	b94b      	cbnz	r3, 80075a6 <__swsetup_r+0x9a>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759c:	d003      	beq.n	80075a6 <__swsetup_r+0x9a>
 800759e:	4621      	mov	r1, r4
 80075a0:	4630      	mov	r0, r6
 80075a2:	f000 fa05 	bl	80079b0 <__smakebuf_r>
 80075a6:	89a0      	ldrh	r0, [r4, #12]
 80075a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ac:	f010 0301 	ands.w	r3, r0, #1
 80075b0:	d00a      	beq.n	80075c8 <__swsetup_r+0xbc>
 80075b2:	2300      	movs	r3, #0
 80075b4:	60a3      	str	r3, [r4, #8]
 80075b6:	6963      	ldr	r3, [r4, #20]
 80075b8:	425b      	negs	r3, r3
 80075ba:	61a3      	str	r3, [r4, #24]
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	b943      	cbnz	r3, 80075d2 <__swsetup_r+0xc6>
 80075c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075c4:	d1ba      	bne.n	800753c <__swsetup_r+0x30>
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	0781      	lsls	r1, r0, #30
 80075ca:	bf58      	it	pl
 80075cc:	6963      	ldrpl	r3, [r4, #20]
 80075ce:	60a3      	str	r3, [r4, #8]
 80075d0:	e7f4      	b.n	80075bc <__swsetup_r+0xb0>
 80075d2:	2000      	movs	r0, #0
 80075d4:	e7f7      	b.n	80075c6 <__swsetup_r+0xba>
 80075d6:	bf00      	nop
 80075d8:	20000014 	.word	0x20000014
 80075dc:	0800934c 	.word	0x0800934c
 80075e0:	0800936c 	.word	0x0800936c
 80075e4:	0800932c 	.word	0x0800932c

080075e8 <abort>:
 80075e8:	2006      	movs	r0, #6
 80075ea:	b508      	push	{r3, lr}
 80075ec:	f000 fa50 	bl	8007a90 <raise>
 80075f0:	2001      	movs	r0, #1
 80075f2:	f7fa fb3c 	bl	8001c6e <_exit>
	...

080075f8 <__sflush_r>:
 80075f8:	898a      	ldrh	r2, [r1, #12]
 80075fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fc:	4605      	mov	r5, r0
 80075fe:	0710      	lsls	r0, r2, #28
 8007600:	460c      	mov	r4, r1
 8007602:	d457      	bmi.n	80076b4 <__sflush_r+0xbc>
 8007604:	684b      	ldr	r3, [r1, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	dc04      	bgt.n	8007614 <__sflush_r+0x1c>
 800760a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	dc01      	bgt.n	8007614 <__sflush_r+0x1c>
 8007610:	2000      	movs	r0, #0
 8007612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007616:	2e00      	cmp	r6, #0
 8007618:	d0fa      	beq.n	8007610 <__sflush_r+0x18>
 800761a:	2300      	movs	r3, #0
 800761c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007620:	682f      	ldr	r7, [r5, #0]
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	d032      	beq.n	800768c <__sflush_r+0x94>
 8007626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	075a      	lsls	r2, r3, #29
 800762c:	d505      	bpl.n	800763a <__sflush_r+0x42>
 800762e:	6863      	ldr	r3, [r4, #4]
 8007630:	1ac0      	subs	r0, r0, r3
 8007632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007634:	b10b      	cbz	r3, 800763a <__sflush_r+0x42>
 8007636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007638:	1ac0      	subs	r0, r0, r3
 800763a:	2300      	movs	r3, #0
 800763c:	4602      	mov	r2, r0
 800763e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007640:	4628      	mov	r0, r5
 8007642:	6a21      	ldr	r1, [r4, #32]
 8007644:	47b0      	blx	r6
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	d106      	bne.n	800765a <__sflush_r+0x62>
 800764c:	6829      	ldr	r1, [r5, #0]
 800764e:	291d      	cmp	r1, #29
 8007650:	d82c      	bhi.n	80076ac <__sflush_r+0xb4>
 8007652:	4a29      	ldr	r2, [pc, #164]	; (80076f8 <__sflush_r+0x100>)
 8007654:	40ca      	lsrs	r2, r1
 8007656:	07d6      	lsls	r6, r2, #31
 8007658:	d528      	bpl.n	80076ac <__sflush_r+0xb4>
 800765a:	2200      	movs	r2, #0
 800765c:	6062      	str	r2, [r4, #4]
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	04d9      	lsls	r1, r3, #19
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	d504      	bpl.n	8007670 <__sflush_r+0x78>
 8007666:	1c42      	adds	r2, r0, #1
 8007668:	d101      	bne.n	800766e <__sflush_r+0x76>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b903      	cbnz	r3, 8007670 <__sflush_r+0x78>
 800766e:	6560      	str	r0, [r4, #84]	; 0x54
 8007670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007672:	602f      	str	r7, [r5, #0]
 8007674:	2900      	cmp	r1, #0
 8007676:	d0cb      	beq.n	8007610 <__sflush_r+0x18>
 8007678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800767c:	4299      	cmp	r1, r3
 800767e:	d002      	beq.n	8007686 <__sflush_r+0x8e>
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff faad 	bl	8006be0 <_free_r>
 8007686:	2000      	movs	r0, #0
 8007688:	6360      	str	r0, [r4, #52]	; 0x34
 800768a:	e7c2      	b.n	8007612 <__sflush_r+0x1a>
 800768c:	6a21      	ldr	r1, [r4, #32]
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	1c41      	adds	r1, r0, #1
 8007696:	d1c7      	bne.n	8007628 <__sflush_r+0x30>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0c4      	beq.n	8007628 <__sflush_r+0x30>
 800769e:	2b1d      	cmp	r3, #29
 80076a0:	d001      	beq.n	80076a6 <__sflush_r+0xae>
 80076a2:	2b16      	cmp	r3, #22
 80076a4:	d101      	bne.n	80076aa <__sflush_r+0xb2>
 80076a6:	602f      	str	r7, [r5, #0]
 80076a8:	e7b2      	b.n	8007610 <__sflush_r+0x18>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	e7ae      	b.n	8007612 <__sflush_r+0x1a>
 80076b4:	690f      	ldr	r7, [r1, #16]
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d0aa      	beq.n	8007610 <__sflush_r+0x18>
 80076ba:	0793      	lsls	r3, r2, #30
 80076bc:	bf18      	it	ne
 80076be:	2300      	movne	r3, #0
 80076c0:	680e      	ldr	r6, [r1, #0]
 80076c2:	bf08      	it	eq
 80076c4:	694b      	ldreq	r3, [r1, #20]
 80076c6:	1bf6      	subs	r6, r6, r7
 80076c8:	600f      	str	r7, [r1, #0]
 80076ca:	608b      	str	r3, [r1, #8]
 80076cc:	2e00      	cmp	r6, #0
 80076ce:	dd9f      	ble.n	8007610 <__sflush_r+0x18>
 80076d0:	4633      	mov	r3, r6
 80076d2:	463a      	mov	r2, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076dc:	47e0      	blx	ip
 80076de:	2800      	cmp	r0, #0
 80076e0:	dc06      	bgt.n	80076f0 <__sflush_r+0xf8>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	e790      	b.n	8007612 <__sflush_r+0x1a>
 80076f0:	4407      	add	r7, r0
 80076f2:	1a36      	subs	r6, r6, r0
 80076f4:	e7ea      	b.n	80076cc <__sflush_r+0xd4>
 80076f6:	bf00      	nop
 80076f8:	20400001 	.word	0x20400001

080076fc <_fflush_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	690b      	ldr	r3, [r1, #16]
 8007700:	4605      	mov	r5, r0
 8007702:	460c      	mov	r4, r1
 8007704:	b913      	cbnz	r3, 800770c <_fflush_r+0x10>
 8007706:	2500      	movs	r5, #0
 8007708:	4628      	mov	r0, r5
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	b118      	cbz	r0, 8007716 <_fflush_r+0x1a>
 800770e:	6983      	ldr	r3, [r0, #24]
 8007710:	b90b      	cbnz	r3, 8007716 <_fflush_r+0x1a>
 8007712:	f000 f887 	bl	8007824 <__sinit>
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <_fflush_r+0x6c>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d11b      	bne.n	8007754 <_fflush_r+0x58>
 800771c:	686c      	ldr	r4, [r5, #4]
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0ef      	beq.n	8007706 <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x3a>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x3a>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f000 f915 	bl	8007960 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff5d 	bl	80075f8 <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007740:	4605      	mov	r5, r0
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d4e0      	bmi.n	8007708 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4dd      	bmi.n	8007708 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774e:	f000 f908 	bl	8007962 <__retarget_lock_release_recursive>
 8007752:	e7d9      	b.n	8007708 <_fflush_r+0xc>
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <_fflush_r+0x70>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d101      	bne.n	800775e <_fflush_r+0x62>
 800775a:	68ac      	ldr	r4, [r5, #8]
 800775c:	e7df      	b.n	800771e <_fflush_r+0x22>
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <_fflush_r+0x74>)
 8007760:	429c      	cmp	r4, r3
 8007762:	bf08      	it	eq
 8007764:	68ec      	ldreq	r4, [r5, #12]
 8007766:	e7da      	b.n	800771e <_fflush_r+0x22>
 8007768:	0800934c 	.word	0x0800934c
 800776c:	0800936c 	.word	0x0800936c
 8007770:	0800932c 	.word	0x0800932c

08007774 <std>:
 8007774:	2300      	movs	r3, #0
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	e9c0 3300 	strd	r3, r3, [r0]
 800777e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	8181      	strh	r1, [r0, #12]
 8007786:	6643      	str	r3, [r0, #100]	; 0x64
 8007788:	81c2      	strh	r2, [r0, #14]
 800778a:	6183      	str	r3, [r0, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	2208      	movs	r2, #8
 8007790:	305c      	adds	r0, #92	; 0x5c
 8007792:	f7fd fb65 	bl	8004e60 <memset>
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <std+0x38>)
 8007798:	6224      	str	r4, [r4, #32]
 800779a:	6263      	str	r3, [r4, #36]	; 0x24
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <std+0x3c>)
 800779e:	62a3      	str	r3, [r4, #40]	; 0x28
 80077a0:	4b04      	ldr	r3, [pc, #16]	; (80077b4 <std+0x40>)
 80077a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <std+0x44>)
 80077a6:	6323      	str	r3, [r4, #48]	; 0x30
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	08007ac9 	.word	0x08007ac9
 80077b0:	08007aeb 	.word	0x08007aeb
 80077b4:	08007b23 	.word	0x08007b23
 80077b8:	08007b47 	.word	0x08007b47

080077bc <_cleanup_r>:
 80077bc:	4901      	ldr	r1, [pc, #4]	; (80077c4 <_cleanup_r+0x8>)
 80077be:	f000 b8af 	b.w	8007920 <_fwalk_reent>
 80077c2:	bf00      	nop
 80077c4:	080076fd 	.word	0x080076fd

080077c8 <__sfmoreglue>:
 80077c8:	2268      	movs	r2, #104	; 0x68
 80077ca:	b570      	push	{r4, r5, r6, lr}
 80077cc:	1e4d      	subs	r5, r1, #1
 80077ce:	4355      	muls	r5, r2
 80077d0:	460e      	mov	r6, r1
 80077d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077d6:	f7ff fa6b 	bl	8006cb0 <_malloc_r>
 80077da:	4604      	mov	r4, r0
 80077dc:	b140      	cbz	r0, 80077f0 <__sfmoreglue+0x28>
 80077de:	2100      	movs	r1, #0
 80077e0:	e9c0 1600 	strd	r1, r6, [r0]
 80077e4:	300c      	adds	r0, #12
 80077e6:	60a0      	str	r0, [r4, #8]
 80077e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077ec:	f7fd fb38 	bl	8004e60 <memset>
 80077f0:	4620      	mov	r0, r4
 80077f2:	bd70      	pop	{r4, r5, r6, pc}

080077f4 <__sfp_lock_acquire>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sfp_lock_acquire+0x8>)
 80077f6:	f000 b8b3 	b.w	8007960 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000b41 	.word	0x20000b41

08007800 <__sfp_lock_release>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_release+0x8>)
 8007802:	f000 b8ae 	b.w	8007962 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20000b41 	.word	0x20000b41

0800780c <__sinit_lock_acquire>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__sinit_lock_acquire+0x8>)
 800780e:	f000 b8a7 	b.w	8007960 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	20000b42 	.word	0x20000b42

08007818 <__sinit_lock_release>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__sinit_lock_release+0x8>)
 800781a:	f000 b8a2 	b.w	8007962 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	20000b42 	.word	0x20000b42

08007824 <__sinit>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	f7ff fff0 	bl	800780c <__sinit_lock_acquire>
 800782c:	69a3      	ldr	r3, [r4, #24]
 800782e:	b11b      	cbz	r3, 8007838 <__sinit+0x14>
 8007830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007834:	f7ff bff0 	b.w	8007818 <__sinit_lock_release>
 8007838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800783c:	6523      	str	r3, [r4, #80]	; 0x50
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <__sinit+0x68>)
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <__sinit+0x6c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	62a2      	str	r2, [r4, #40]	; 0x28
 8007846:	42a3      	cmp	r3, r4
 8007848:	bf08      	it	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	4620      	mov	r0, r4
 800784e:	bf08      	it	eq
 8007850:	61a3      	streq	r3, [r4, #24]
 8007852:	f000 f81f 	bl	8007894 <__sfp>
 8007856:	6060      	str	r0, [r4, #4]
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f81b 	bl	8007894 <__sfp>
 800785e:	60a0      	str	r0, [r4, #8]
 8007860:	4620      	mov	r0, r4
 8007862:	f000 f817 	bl	8007894 <__sfp>
 8007866:	2200      	movs	r2, #0
 8007868:	2104      	movs	r1, #4
 800786a:	60e0      	str	r0, [r4, #12]
 800786c:	6860      	ldr	r0, [r4, #4]
 800786e:	f7ff ff81 	bl	8007774 <std>
 8007872:	2201      	movs	r2, #1
 8007874:	2109      	movs	r1, #9
 8007876:	68a0      	ldr	r0, [r4, #8]
 8007878:	f7ff ff7c 	bl	8007774 <std>
 800787c:	2202      	movs	r2, #2
 800787e:	2112      	movs	r1, #18
 8007880:	68e0      	ldr	r0, [r4, #12]
 8007882:	f7ff ff77 	bl	8007774 <std>
 8007886:	2301      	movs	r3, #1
 8007888:	61a3      	str	r3, [r4, #24]
 800788a:	e7d1      	b.n	8007830 <__sinit+0xc>
 800788c:	08008fb0 	.word	0x08008fb0
 8007890:	080077bd 	.word	0x080077bd

08007894 <__sfp>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	4607      	mov	r7, r0
 8007898:	f7ff ffac 	bl	80077f4 <__sfp_lock_acquire>
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <__sfp+0x84>)
 800789e:	681e      	ldr	r6, [r3, #0]
 80078a0:	69b3      	ldr	r3, [r6, #24]
 80078a2:	b913      	cbnz	r3, 80078aa <__sfp+0x16>
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffbd 	bl	8007824 <__sinit>
 80078aa:	3648      	adds	r6, #72	; 0x48
 80078ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	d503      	bpl.n	80078bc <__sfp+0x28>
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	b30b      	cbz	r3, 80078fc <__sfp+0x68>
 80078b8:	6836      	ldr	r6, [r6, #0]
 80078ba:	e7f7      	b.n	80078ac <__sfp+0x18>
 80078bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078c0:	b9d5      	cbnz	r5, 80078f8 <__sfp+0x64>
 80078c2:	4b16      	ldr	r3, [pc, #88]	; (800791c <__sfp+0x88>)
 80078c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078c8:	60e3      	str	r3, [r4, #12]
 80078ca:	6665      	str	r5, [r4, #100]	; 0x64
 80078cc:	f000 f847 	bl	800795e <__retarget_lock_init_recursive>
 80078d0:	f7ff ff96 	bl	8007800 <__sfp_lock_release>
 80078d4:	2208      	movs	r2, #8
 80078d6:	4629      	mov	r1, r5
 80078d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078e0:	6025      	str	r5, [r4, #0]
 80078e2:	61a5      	str	r5, [r4, #24]
 80078e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078e8:	f7fd faba 	bl	8004e60 <memset>
 80078ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f4:	4620      	mov	r0, r4
 80078f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f8:	3468      	adds	r4, #104	; 0x68
 80078fa:	e7d9      	b.n	80078b0 <__sfp+0x1c>
 80078fc:	2104      	movs	r1, #4
 80078fe:	4638      	mov	r0, r7
 8007900:	f7ff ff62 	bl	80077c8 <__sfmoreglue>
 8007904:	4604      	mov	r4, r0
 8007906:	6030      	str	r0, [r6, #0]
 8007908:	2800      	cmp	r0, #0
 800790a:	d1d5      	bne.n	80078b8 <__sfp+0x24>
 800790c:	f7ff ff78 	bl	8007800 <__sfp_lock_release>
 8007910:	230c      	movs	r3, #12
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	e7ee      	b.n	80078f4 <__sfp+0x60>
 8007916:	bf00      	nop
 8007918:	08008fb0 	.word	0x08008fb0
 800791c:	ffff0001 	.word	0xffff0001

08007920 <_fwalk_reent>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4606      	mov	r6, r0
 8007926:	4688      	mov	r8, r1
 8007928:	2700      	movs	r7, #0
 800792a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800792e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007932:	f1b9 0901 	subs.w	r9, r9, #1
 8007936:	d505      	bpl.n	8007944 <_fwalk_reent+0x24>
 8007938:	6824      	ldr	r4, [r4, #0]
 800793a:	2c00      	cmp	r4, #0
 800793c:	d1f7      	bne.n	800792e <_fwalk_reent+0xe>
 800793e:	4638      	mov	r0, r7
 8007940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007944:	89ab      	ldrh	r3, [r5, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d907      	bls.n	800795a <_fwalk_reent+0x3a>
 800794a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800794e:	3301      	adds	r3, #1
 8007950:	d003      	beq.n	800795a <_fwalk_reent+0x3a>
 8007952:	4629      	mov	r1, r5
 8007954:	4630      	mov	r0, r6
 8007956:	47c0      	blx	r8
 8007958:	4307      	orrs	r7, r0
 800795a:	3568      	adds	r5, #104	; 0x68
 800795c:	e7e9      	b.n	8007932 <_fwalk_reent+0x12>

0800795e <__retarget_lock_init_recursive>:
 800795e:	4770      	bx	lr

08007960 <__retarget_lock_acquire_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_release_recursive>:
 8007962:	4770      	bx	lr

08007964 <__swhatbuf_r>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	4614      	mov	r4, r2
 800796e:	2900      	cmp	r1, #0
 8007970:	461d      	mov	r5, r3
 8007972:	b096      	sub	sp, #88	; 0x58
 8007974:	da08      	bge.n	8007988 <__swhatbuf_r+0x24>
 8007976:	2200      	movs	r2, #0
 8007978:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	061a      	lsls	r2, r3, #24
 8007980:	d410      	bmi.n	80079a4 <__swhatbuf_r+0x40>
 8007982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007986:	e00e      	b.n	80079a6 <__swhatbuf_r+0x42>
 8007988:	466a      	mov	r2, sp
 800798a:	f000 f903 	bl	8007b94 <_fstat_r>
 800798e:	2800      	cmp	r0, #0
 8007990:	dbf1      	blt.n	8007976 <__swhatbuf_r+0x12>
 8007992:	9a01      	ldr	r2, [sp, #4]
 8007994:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007998:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800799c:	425a      	negs	r2, r3
 800799e:	415a      	adcs	r2, r3
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	e7ee      	b.n	8007982 <__swhatbuf_r+0x1e>
 80079a4:	2340      	movs	r3, #64	; 0x40
 80079a6:	2000      	movs	r0, #0
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	b016      	add	sp, #88	; 0x58
 80079ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080079b0 <__smakebuf_r>:
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079b4:	079d      	lsls	r5, r3, #30
 80079b6:	4606      	mov	r6, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	d507      	bpl.n	80079cc <__smakebuf_r+0x1c>
 80079bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	2301      	movs	r3, #1
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	b002      	add	sp, #8
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	466a      	mov	r2, sp
 80079ce:	ab01      	add	r3, sp, #4
 80079d0:	f7ff ffc8 	bl	8007964 <__swhatbuf_r>
 80079d4:	9900      	ldr	r1, [sp, #0]
 80079d6:	4605      	mov	r5, r0
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff f969 	bl	8006cb0 <_malloc_r>
 80079de:	b948      	cbnz	r0, 80079f4 <__smakebuf_r+0x44>
 80079e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d4ef      	bmi.n	80079c8 <__smakebuf_r+0x18>
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	e7e3      	b.n	80079bc <__smakebuf_r+0xc>
 80079f4:	4b0d      	ldr	r3, [pc, #52]	; (8007a2c <__smakebuf_r+0x7c>)
 80079f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	6020      	str	r0, [r4, #0]
 80079fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	9b00      	ldr	r3, [sp, #0]
 8007a04:	6120      	str	r0, [r4, #16]
 8007a06:	6163      	str	r3, [r4, #20]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	b15b      	cbz	r3, 8007a24 <__smakebuf_r+0x74>
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a12:	f000 f8d1 	bl	8007bb8 <_isatty_r>
 8007a16:	b128      	cbz	r0, 8007a24 <__smakebuf_r+0x74>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	89a0      	ldrh	r0, [r4, #12]
 8007a26:	4305      	orrs	r5, r0
 8007a28:	81a5      	strh	r5, [r4, #12]
 8007a2a:	e7cd      	b.n	80079c8 <__smakebuf_r+0x18>
 8007a2c:	080077bd 	.word	0x080077bd

08007a30 <_malloc_usable_size_r>:
 8007a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a34:	1f18      	subs	r0, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bfbc      	itt	lt
 8007a3a:	580b      	ldrlt	r3, [r1, r0]
 8007a3c:	18c0      	addlt	r0, r0, r3
 8007a3e:	4770      	bx	lr

08007a40 <_raise_r>:
 8007a40:	291f      	cmp	r1, #31
 8007a42:	b538      	push	{r3, r4, r5, lr}
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	d904      	bls.n	8007a54 <_raise_r+0x14>
 8007a4a:	2316      	movs	r3, #22
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a56:	b112      	cbz	r2, 8007a5e <_raise_r+0x1e>
 8007a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a5c:	b94b      	cbnz	r3, 8007a72 <_raise_r+0x32>
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 f830 	bl	8007ac4 <_getpid_r>
 8007a64:	462a      	mov	r2, r5
 8007a66:	4601      	mov	r1, r0
 8007a68:	4620      	mov	r0, r4
 8007a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6e:	f000 b817 	b.w	8007aa0 <_kill_r>
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d00a      	beq.n	8007a8c <_raise_r+0x4c>
 8007a76:	1c59      	adds	r1, r3, #1
 8007a78:	d103      	bne.n	8007a82 <_raise_r+0x42>
 8007a7a:	2316      	movs	r3, #22
 8007a7c:	6003      	str	r3, [r0, #0]
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e7e7      	b.n	8007a52 <_raise_r+0x12>
 8007a82:	2400      	movs	r4, #0
 8007a84:	4628      	mov	r0, r5
 8007a86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a8a:	4798      	blx	r3
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7e0      	b.n	8007a52 <_raise_r+0x12>

08007a90 <raise>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <raise+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f7ff bfd3 	b.w	8007a40 <_raise_r>
 8007a9a:	bf00      	nop
 8007a9c:	20000014 	.word	0x20000014

08007aa0 <_kill_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4d06      	ldr	r5, [pc, #24]	; (8007ac0 <_kill_r+0x20>)
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	4611      	mov	r1, r2
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	f7fa f8ce 	bl	8001c4e <_kill>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d102      	bne.n	8007abc <_kill_r+0x1c>
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	b103      	cbz	r3, 8007abc <_kill_r+0x1c>
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000b3c 	.word	0x20000b3c

08007ac4 <_getpid_r>:
 8007ac4:	f7fa b8bc 	b.w	8001c40 <_getpid>

08007ac8 <__sread>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad0:	f000 f894 	bl	8007bfc <_read_r>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	bfab      	itete	ge
 8007ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ada:	89a3      	ldrhlt	r3, [r4, #12]
 8007adc:	181b      	addge	r3, r3, r0
 8007ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ae2:	bfac      	ite	ge
 8007ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ae6:	81a3      	strhlt	r3, [r4, #12]
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <__swrite>:
 8007aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aee:	461f      	mov	r7, r3
 8007af0:	898b      	ldrh	r3, [r1, #12]
 8007af2:	4605      	mov	r5, r0
 8007af4:	05db      	lsls	r3, r3, #23
 8007af6:	460c      	mov	r4, r1
 8007af8:	4616      	mov	r6, r2
 8007afa:	d505      	bpl.n	8007b08 <__swrite+0x1e>
 8007afc:	2302      	movs	r3, #2
 8007afe:	2200      	movs	r2, #0
 8007b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b04:	f000 f868 	bl	8007bd8 <_lseek_r>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	4628      	mov	r0, r5
 8007b14:	463b      	mov	r3, r7
 8007b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	f000 b817 	b.w	8007b50 <_write_r>

08007b22 <__sseek>:
 8007b22:	b510      	push	{r4, lr}
 8007b24:	460c      	mov	r4, r1
 8007b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2a:	f000 f855 	bl	8007bd8 <_lseek_r>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	bf15      	itete	ne
 8007b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b3e:	81a3      	strheq	r3, [r4, #12]
 8007b40:	bf18      	it	ne
 8007b42:	81a3      	strhne	r3, [r4, #12]
 8007b44:	bd10      	pop	{r4, pc}

08007b46 <__sclose>:
 8007b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4a:	f000 b813 	b.w	8007b74 <_close_r>
	...

08007b50 <_write_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	4611      	mov	r1, r2
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4d05      	ldr	r5, [pc, #20]	; (8007b70 <_write_r+0x20>)
 8007b5c:	602a      	str	r2, [r5, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f7fa f8ac 	bl	8001cbc <_write>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_write_r+0x1e>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_write_r+0x1e>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	20000b3c 	.word	0x20000b3c

08007b74 <_close_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	2300      	movs	r3, #0
 8007b78:	4d05      	ldr	r5, [pc, #20]	; (8007b90 <_close_r+0x1c>)
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7fa f8b8 	bl	8001cf4 <_close>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_close_r+0x1a>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_close_r+0x1a>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000b3c 	.word	0x20000b3c

08007b94 <_fstat_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	2300      	movs	r3, #0
 8007b98:	4d06      	ldr	r5, [pc, #24]	; (8007bb4 <_fstat_r+0x20>)
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	f7fa f8b2 	bl	8001d0a <_fstat>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d102      	bne.n	8007bb0 <_fstat_r+0x1c>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	b103      	cbz	r3, 8007bb0 <_fstat_r+0x1c>
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000b3c 	.word	0x20000b3c

08007bb8 <_isatty_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4d05      	ldr	r5, [pc, #20]	; (8007bd4 <_isatty_r+0x1c>)
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7fa f8b0 	bl	8001d28 <_isatty>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_isatty_r+0x1a>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_isatty_r+0x1a>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20000b3c 	.word	0x20000b3c

08007bd8 <_lseek_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	4611      	mov	r1, r2
 8007be0:	2200      	movs	r2, #0
 8007be2:	4d05      	ldr	r5, [pc, #20]	; (8007bf8 <_lseek_r+0x20>)
 8007be4:	602a      	str	r2, [r5, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f7fa f8a8 	bl	8001d3c <_lseek>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_lseek_r+0x1e>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_lseek_r+0x1e>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000b3c 	.word	0x20000b3c

08007bfc <_read_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	2200      	movs	r2, #0
 8007c06:	4d05      	ldr	r5, [pc, #20]	; (8007c1c <_read_r+0x20>)
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7fa f839 	bl	8001c82 <_read>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_read_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_read_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000b3c 	.word	0x20000b3c

08007c20 <_init>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	bf00      	nop
 8007c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c26:	bc08      	pop	{r3}
 8007c28:	469e      	mov	lr, r3
 8007c2a:	4770      	bx	lr

08007c2c <_fini>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	bf00      	nop
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr
