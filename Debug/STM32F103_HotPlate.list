
STM32F103_HotPlate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008860  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001efc  08008970  08008970  00018970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a86c  0800a86c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a86c  0800a86c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a86c  0800a86c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  200001f0  0800aa64  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  0800aa64  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011624  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f9  00000000  00000000  0003183d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000352c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197ca  00000000  00000000  000361f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011efa  00000000  00000000  0004f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eba3  00000000  00000000  000618bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f045f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005640  00000000  00000000  000f04b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008958 	.word	0x08008958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008958 	.word	0x08008958

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <beep>:
uint8_t beepFlag = 0;

uint16_t beepFrequency = 1000;
uint16_t beepTime = 0;

void beep (uint16_t frequency, uint16_t time){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	80fb      	strh	r3, [r7, #6]
 8000a94:	4613      	mov	r3, r2
 8000a96:	80bb      	strh	r3, [r7, #4]
	beepFlag = 1;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <beep+0x2c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	beepFrequency = frequency;
 8000a9e:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <beep+0x30>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	8013      	strh	r3, [r2, #0]
	beepTime = time;
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <beep+0x34>)
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	8013      	strh	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	2000020c 	.word	0x2000020c
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	2000020e 	.word	0x2000020e

08000ac0 <beep_callback>:


void beep_callback(TIM_HandleTypeDef *htim, uint32_t channel){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if(beepFlag == 1){
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <beep_callback+0x48>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d116      	bne.n	8000b00 <beep_callback+0x40>
		TIM3->CCR1 = 9;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <beep_callback+0x4c>)
 8000ad4:	2209      	movs	r2, #9
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->PSC = beepFrequency;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <beep_callback+0x50>)
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <beep_callback+0x4c>)
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_PWM_Start(htim, channel);
 8000ae0:	6839      	ldr	r1, [r7, #0]
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f004 f85a 	bl	8004b9c <HAL_TIM_PWM_Start>
		HAL_Delay(beepTime);
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <beep_callback+0x54>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fbdd 	bl	80022ac <HAL_Delay>
		HAL_TIM_PWM_Stop(htim, channel);
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f004 f8f3 	bl	8004ce0 <HAL_TIM_PWM_Stop>
		beepFlag = 0;
 8000afa:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <beep_callback+0x48>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
	}
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000020c 	.word	0x2000020c
 8000b0c:	40000400 	.word	0x40000400
 8000b10:	20000000 	.word	0x20000000
 8000b14:	2000020e 	.word	0x2000020e

08000b18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d105      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x1e>
		oledRefreshActiveFlag = 1;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
		oledRefreshAll(&hspi1);
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b32:	f000 fe41 	bl	80017b8 <oledRefreshAll>
	}
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000077c 	.word	0x2000077c
 8000b44:	20000210 	.word	0x20000210

08000b48 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	oledRefreshAll(&hspi1);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <HAL_SPI_TxCpltCallback+0x18>)
 8000b52:	f000 fe31 	bl	80017b8 <oledRefreshAll>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000210 	.word	0x20000210

08000b64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_1_Pin){
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d104      	bne.n	8000b7e <HAL_GPIO_EXTI_Callback+0x1a>
		beep(500, 30);
 8000b74:	211e      	movs	r1, #30
 8000b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7a:	f7ff ff85 	bl	8000a88 <beep>
	}
	if(GPIO_Pin == ENC_1_Pin){
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d113      	bne.n	8000bac <HAL_GPIO_EXTI_Callback+0x48>
		if(HAL_GPIO_ReadPin(ENC_2_GPIO_Port, ENC_2_Pin) == GPIO_PIN_SET){
 8000b84:	2102      	movs	r1, #2
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b88:	f002 f8e4 	bl	8002d54 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d106      	bne.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x3c>
			menuPos--;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b9c:	701a      	strb	r2, [r3, #0]
		} else {
			menuPos++;
		}
	}

}
 8000b9e:	e005      	b.n	8000bac <HAL_GPIO_EXTI_Callback+0x48>
			menuPos++;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000baa:	701a      	strb	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	20000774 	.word	0x20000774

08000bbc <station_init>:

uint8_t station_init(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
	uint8_t errorFlag = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	77fb      	strb	r3, [r7, #31]
	char errorDescription[20];
	uint16_t bufTemp;

	uint8_t status = max6675_read_temperature(&hspi2, MAX6675_1_CS_GPIO_Port, MAX6675_1_CS_Pin, &bufTemp);
 8000bc6:	1dbb      	adds	r3, r7, #6
 8000bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bcc:	4914      	ldr	r1, [pc, #80]	; (8000c20 <station_init+0x64>)
 8000bce:	4815      	ldr	r0, [pc, #84]	; (8000c24 <station_init+0x68>)
 8000bd0:	f000 fc65 	bl	800149e <max6675_read_temperature>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	77bb      	strb	r3, [r7, #30]
	if(status != 0){
 8000bd8:	7fbb      	ldrb	r3, [r7, #30]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <station_init+0x32>
		errorFlag = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	77fb      	strb	r3, [r7, #31]
		sprintf(errorDescription, "temp sensor 1");
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4910      	ldr	r1, [pc, #64]	; (8000c28 <station_init+0x6c>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 fc3b 	bl	8006464 <siprintf>
	}
    status = max6675_read_temperature(&hspi2, MAX6675_2_CS_GPIO_Port, MAX6675_2_CS_Pin, &bufTemp);
 8000bee:	1dbb      	adds	r3, r7, #6
 8000bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf4:	490d      	ldr	r1, [pc, #52]	; (8000c2c <station_init+0x70>)
 8000bf6:	480b      	ldr	r0, [pc, #44]	; (8000c24 <station_init+0x68>)
 8000bf8:	f000 fc51 	bl	800149e <max6675_read_temperature>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	77bb      	strb	r3, [r7, #30]
    if(status != 0){
 8000c00:	7fbb      	ldrb	r3, [r7, #30]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <station_init+0x5a>
		errorFlag = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	77fb      	strb	r3, [r7, #31]
		sprintf(errorDescription, "temp sensor 2s");
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <station_init+0x74>)
 8000c10:	4618      	mov	r0, r3
 8000c12:	f005 fc27 	bl	8006464 <siprintf>
	}
    return errorFlag;
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	20000268 	.word	0x20000268
 8000c28:	08008970 	.word	0x08008970
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	08008980 	.word	0x08008980

08000c34 <gui_menu>:


void gui_menu(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af02      	add	r7, sp, #8
	sprintf((char*)buf,"%i", menuPos);
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <gui_menu+0x80>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	491d      	ldr	r1, [pc, #116]	; (8000cb8 <gui_menu+0x84>)
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <gui_menu+0x88>)
 8000c44:	f005 fc0e 	bl	8006464 <siprintf>
	oledDispTxt(90, 54, buf, Font_7x10, 1);
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <gui_menu+0x8c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	9201      	str	r2, [sp, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <gui_menu+0x88>)
 8000c56:	2136      	movs	r1, #54	; 0x36
 8000c58:	205a      	movs	r0, #90	; 0x5a
 8000c5a:	f000 fefe 	bl	8001a5a <oledDispTxt>
	if (menuPos == 0){
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <gui_menu+0x80>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10f      	bne.n	8000c86 <gui_menu+0x52>
		sprintf((char*)buf,"menu 0");
 8000c66:	4917      	ldr	r1, [pc, #92]	; (8000cc4 <gui_menu+0x90>)
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <gui_menu+0x88>)
 8000c6a:	f005 fbfb 	bl	8006464 <siprintf>
		oledDispTxt(0, 20, buf, Font_16x26, 1);
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <gui_menu+0x94>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	9201      	str	r2, [sp, #4]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	9200      	str	r2, [sp, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <gui_menu+0x88>)
 8000c7c:	2114      	movs	r1, #20
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 feeb 	bl	8001a5a <oledDispTxt>
	} else if (menuPos == 1){
		sprintf((char*)buf,"menu 1");
		oledDispTxt(0, 20, buf, Font_16x26, 1);
	}
}
 8000c84:	e012      	b.n	8000cac <gui_menu+0x78>
	} else if (menuPos == 1){
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <gui_menu+0x80>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10e      	bne.n	8000cac <gui_menu+0x78>
		sprintf((char*)buf,"menu 1");
 8000c8e:	490f      	ldr	r1, [pc, #60]	; (8000ccc <gui_menu+0x98>)
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <gui_menu+0x88>)
 8000c92:	f005 fbe7 	bl	8006464 <siprintf>
		oledDispTxt(0, 20, buf, Font_16x26, 1);
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <gui_menu+0x94>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	9201      	str	r2, [sp, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	9200      	str	r2, [sp, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <gui_menu+0x88>)
 8000ca4:	2114      	movs	r1, #20
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 fed7 	bl	8001a5a <oledDispTxt>
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000774 	.word	0x20000774
 8000cb8:	08008990 	.word	0x08008990
 8000cbc:	20000754 	.word	0x20000754
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	08008994 	.word	0x08008994
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	0800899c 	.word	0x0800899c

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f001 fa87 	bl	80021e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f88d 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 fb29 	bl	8001334 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce2:	f000 fb01 	bl	80012e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ce6:	f000 f8e3 	bl	8000eb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000cea:	f000 f917 	bl	8000f1c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000cee:	f000 f94b 	bl	8000f88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cf2:	f000 f9cd 	bl	8001090 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cf6:	f000 fa17 	bl	8001128 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cfa:	f000 fa6f 	bl	80011dc <MX_TIM4_Init>
  MX_USB_PCD_Init();
 8000cfe:	f000 fad1 	bl	80012a4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(MAX6675_1_CS_GPIO_Port, MAX6675_1_CS_Pin, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d08:	482f      	ldr	r0, [pc, #188]	; (8000dc8 <main+0xf8>)
 8000d0a:	f002 f83a 	bl	8002d82 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(MAX6675_2_CS_GPIO_Port, MAX6675_2_CS_Pin, 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	482d      	ldr	r0, [pc, #180]	; (8000dcc <main+0xfc>)
 8000d16:	f002 f834 	bl	8002d82 <HAL_GPIO_WritePin>

  	HAL_TIM_Base_Start_IT(&htim2);
 8000d1a:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <main+0x100>)
 8000d1c:	f003 fe4e 	bl	80049bc <HAL_TIM_Base_Start_IT>

  	oledInit(&hspi1, 1);
 8000d20:	2101      	movs	r1, #1
 8000d22:	482c      	ldr	r0, [pc, #176]	; (8000dd4 <main+0x104>)
 8000d24:	f000 fc44 	bl	80015b0 <oledInit>
  	sprintf((char*)buf,"HOT");
 8000d28:	492b      	ldr	r1, [pc, #172]	; (8000dd8 <main+0x108>)
 8000d2a:	482c      	ldr	r0, [pc, #176]	; (8000ddc <main+0x10c>)
 8000d2c:	f005 fb9a 	bl	8006464 <siprintf>
  	oledDispTxt(40, 0, buf, Font_16x26, 1);
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <main+0x110>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	9200      	str	r2, [sp, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <main+0x10c>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f000 fe8a 	bl	8001a5a <oledDispTxt>
  	sprintf((char*)buf,"PLATE");
 8000d46:	4927      	ldr	r1, [pc, #156]	; (8000de4 <main+0x114>)
 8000d48:	4824      	ldr	r0, [pc, #144]	; (8000ddc <main+0x10c>)
 8000d4a:	f005 fb8b 	bl	8006464 <siprintf>
  	oledDispTxt(20, 25, buf, Font_16x26, 1);
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <main+0x110>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	9201      	str	r2, [sp, #4]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	9200      	str	r2, [sp, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <main+0x10c>)
 8000d5c:	2119      	movs	r1, #25
 8000d5e:	2014      	movs	r0, #20
 8000d60:	f000 fe7b 	bl	8001a5a <oledDispTxt>
  	sprintf((char*)buf,"ver.1.0");
 8000d64:	4920      	ldr	r1, [pc, #128]	; (8000de8 <main+0x118>)
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <main+0x10c>)
 8000d68:	f005 fb7c 	bl	8006464 <siprintf>
  	oledDispTxt(74, 54, buf, Font_7x10, 1);
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <main+0x11c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	9201      	str	r2, [sp, #4]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	9200      	str	r2, [sp, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <main+0x10c>)
 8000d7a:	2136      	movs	r1, #54	; 0x36
 8000d7c:	204a      	movs	r0, #74	; 0x4a
 8000d7e:	f000 fe6c 	bl	8001a5a <oledDispTxt>
  	oledRefreshActiveFlag = 1;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <main+0x120>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
  	oledRefreshAll(&hspi1);
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <main+0x104>)
 8000d8a:	f000 fd15 	bl	80017b8 <oledRefreshAll>

  	beep(1400, 20);
 8000d8e:	2114      	movs	r1, #20
 8000d90:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000d94:	f7ff fe78 	bl	8000a88 <beep>
  	beep_callback(&htim3, TIM_CHANNEL_1);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4816      	ldr	r0, [pc, #88]	; (8000df4 <main+0x124>)
 8000d9c:	f7ff fe90 	bl	8000ac0 <beep_callback>

  	station_init();
 8000da0:	f7ff ff0c 	bl	8000bbc <station_init>
	HAL_Delay(2000);
 8000da4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da8:	f001 fa80 	bl	80022ac <HAL_Delay>
	oledDisplayCls(0);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 fcdb 	bl	8001768 <oledDisplayCls>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  gui_menu();
 8000db2:	f7ff ff3f 	bl	8000c34 <gui_menu>
	  HAL_Delay(200);
 8000db6:	20c8      	movs	r0, #200	; 0xc8
 8000db8:	f001 fa78 	bl	80022ac <HAL_Delay>
	  beep_callback(&htim3, TIM_CHANNEL_1);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <main+0x124>)
 8000dc0:	f7ff fe7e 	bl	8000ac0 <beep_callback>
	  gui_menu();
 8000dc4:	e7f5      	b.n	8000db2 <main+0xe2>
 8000dc6:	bf00      	nop
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	20000390 	.word	0x20000390
 8000dd4:	20000210 	.word	0x20000210
 8000dd8:	080089a4 	.word	0x080089a4
 8000ddc:	20000754 	.word	0x20000754
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	080089a8 	.word	0x080089a8
 8000de8:	080089b0 	.word	0x080089b0
 8000dec:	20000004 	.word	0x20000004
 8000df0:	2000077c 	.word	0x2000077c
 8000df4:	200003d8 	.word	0x200003d8

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e02:	2228      	movs	r2, #40	; 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fec4 	bl	8005b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 f8d3 	bl	8002ffc <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e5c:	f000 fb1a 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e60:	230f      	movs	r3, #15
 8000e62:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e70:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fb3f 	bl	8003500 <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e88:	f000 fb04 	bl	8001494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fc9a 	bl	80037d0 <HAL_RCCEx_PeriphCLKConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ea2:	f000 faf7 	bl	8001494 <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <MX_SPI1_Init+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000efc:	220a      	movs	r2, #10
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000f02:	f002 fd1b 	bl	800393c <HAL_SPI_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f0c:	f000 fac2 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000210 	.word	0x20000210
 8000f18:	40013000 	.word	0x40013000

08000f1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <MX_SPI2_Init+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f50:	2220      	movs	r2, #32
 8000f52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f68:	220a      	movs	r2, #10
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_SPI2_Init+0x64>)
 8000f6e:	f002 fce5 	bl	800393c <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f78:	f000 fa8c 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000268 	.word	0x20000268
 8000f84:	40003800 	.word	0x40003800

08000f88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b092      	sub	sp, #72	; 0x48
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2220      	movs	r2, #32
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fdee 	bl	8005b94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <MX_TIM1_Init+0x104>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <MX_TIM1_Init+0x100>)
 8000fe6:	f003 fd3b 	bl	8004a60 <HAL_TIM_OC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ff0:	f000 fa50 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001000:	4619      	mov	r1, r3
 8001002:	4821      	ldr	r0, [pc, #132]	; (8001088 <MX_TIM1_Init+0x100>)
 8001004:	f004 fc7a 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800100e:	f000 fa41 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	2208      	movs	r2, #8
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <MX_TIM1_Init+0x100>)
 8001038:	f003 ffbe 	bl	8004fb8 <HAL_TIM_OC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001042:	f000 fa27 	bl	8001494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <MX_TIM1_Init+0x100>)
 800106a:	f004 fca5 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001074:	f000 fa0e 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <MX_TIM1_Init+0x100>)
 800107a:	f000 febb 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 800107e:	bf00      	nop
 8001080:	3748      	adds	r7, #72	; 0x48
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000348 	.word	0x20000348
 800108c:	40012c00 	.word	0x40012c00

08001090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_TIM2_Init+0x94>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_TIM2_Init+0x94>)
 80010b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80010ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_TIM2_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 219;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_TIM2_Init+0x94>)
 80010c4:	22db      	movs	r2, #219	; 0xdb
 80010c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_TIM2_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_TIM2_Init+0x94>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_TIM2_Init+0x94>)
 80010d6:	f003 fc21 	bl	800491c <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 f9d8 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_TIM2_Init+0x94>)
 80010f2:	f004 f877 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010fc:	f000 f9ca 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_TIM2_Init+0x94>)
 800110e:	f004 fbf5 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f9bc 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000390 	.word	0x20000390

08001128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MX_TIM3_Init+0xac>)
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <MX_TIM3_Init+0xb0>)
 800114e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 700;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <MX_TIM3_Init+0xac>)
 8001152:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TIM3_Init+0xac>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 17;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TIM3_Init+0xac>)
 8001160:	2211      	movs	r2, #17
 8001162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_TIM3_Init+0xac>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM3_Init+0xac>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <MX_TIM3_Init+0xac>)
 8001172:	f003 fcc4 	bl	8004afe <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800117c:	f000 f98a 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4619      	mov	r1, r3
 800118e:	4811      	ldr	r0, [pc, #68]	; (80011d4 <MX_TIM3_Init+0xac>)
 8001190:	f004 fbb4 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800119a:	f000 f97b 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	; 0x60
 80011a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM3_Init+0xac>)
 80011b6:	f003 ff57 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011c0:	f000 f968 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM3_Init+0xac>)
 80011c6:	f000 fe15 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200003d8 	.word	0x200003d8
 80011d8:	40000400 	.word	0x40000400

080011dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_TIM4_Init+0xc0>)
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <MX_TIM4_Init+0xc4>)
 8001202:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <MX_TIM4_Init+0xc0>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_TIM4_Init+0xc0>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_TIM4_Init+0xc0>)
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_TIM4_Init+0xc0>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_TIM4_Init+0xc0>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001224:	481d      	ldr	r0, [pc, #116]	; (800129c <MX_TIM4_Init+0xc0>)
 8001226:	f003 fc6a 	bl	8004afe <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001230:	f000 f930 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4619      	mov	r1, r3
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <MX_TIM4_Init+0xc0>)
 8001244:	f004 fb5a 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800124e:	f000 f921 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	; 0x60
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_TIM4_Init+0xc0>)
 800126a:	f003 fefd 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001274:	f000 f90e 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2204      	movs	r2, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM4_Init+0xc0>)
 8001280:	f003 fef2 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800128a:	f000 f903 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM4_Init+0xc0>)
 8001290:	f000 fdb0 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000420 	.word	0x20000420
 80012a0:	40000800 	.word	0x40000800

080012a4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <MX_USB_PCD_Init+0x40>)
 80012ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_USB_PCD_Init+0x3c>)
 80012ce:	f001 fd89 	bl	8002de4 <HAL_PCD_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80012d8:	f000 f8dc 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000468 	.word	0x20000468
 80012e4:	40005c00 	.word	0x40005c00

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_DMA_Init+0x48>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <MX_DMA_Init+0x48>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6153      	str	r3, [r2, #20]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_DMA_Init+0x48>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	200d      	movs	r0, #13
 800130c:	f001 f8c9 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001310:	200d      	movs	r0, #13
 8001312:	f001 f8e2 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200e      	movs	r0, #14
 800131c:	f001 f8c1 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001320:	200e      	movs	r0, #14
 8001322:	f001 f8da 	bl	80024da <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <MX_GPIO_Init+0x14c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <MX_GPIO_Init+0x14c>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <MX_GPIO_Init+0x14c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <MX_GPIO_Init+0x14c>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a46      	ldr	r2, [pc, #280]	; (8001480 <MX_GPIO_Init+0x14c>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <MX_GPIO_Init+0x14c>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <MX_GPIO_Init+0x14c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a40      	ldr	r2, [pc, #256]	; (8001480 <MX_GPIO_Init+0x14c>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <MX_GPIO_Init+0x14c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <MX_GPIO_Init+0x14c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a3a      	ldr	r2, [pc, #232]	; (8001480 <MX_GPIO_Init+0x14c>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <MX_GPIO_Init+0x14c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_RES_Pin|OLED_DC_Pin|MAX6675_1_CS_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f241 0107 	movw	r1, #4103	; 0x1007
 80013ae:	4835      	ldr	r0, [pc, #212]	; (8001484 <MX_GPIO_Init+0x150>)
 80013b0:	f001 fce7 	bl	8002d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX6675_2_CS_Pin|FAN1_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013ba:	4833      	ldr	r0, [pc, #204]	; (8001488 <MX_GPIO_Init+0x154>)
 80013bc:	f001 fce1 	bl	8002d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AC_ZERO_Pin */
  GPIO_InitStruct.Pin = AC_ZERO_Pin;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <MX_GPIO_Init+0x158>)
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AC_ZERO_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	482e      	ldr	r0, [pc, #184]	; (8001490 <MX_GPIO_Init+0x15c>)
 80013d6:	f001 fb39 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_1_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = ENC_1_Pin|BUTTON_1_Pin;
 80013da:	2305      	movs	r3, #5
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <MX_GPIO_Init+0x158>)
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	4826      	ldr	r0, [pc, #152]	; (8001488 <MX_GPIO_Init+0x154>)
 80013ee:	f001 fb2d 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_2_Pin */
  GPIO_InitStruct.Pin = ENC_2_Pin;
 80013f2:	2302      	movs	r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_2_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4820      	ldr	r0, [pc, #128]	; (8001488 <MX_GPIO_Init+0x154>)
 8001406:	f001 fb21 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_RES_Pin OLED_DC_Pin MAX6675_1_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_RES_Pin|OLED_DC_Pin|MAX6675_1_CS_Pin;
 800140a:	f241 0307 	movw	r3, #4103	; 0x1007
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_GPIO_Init+0x150>)
 8001424:	f001 fb12 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX6675_2_CS_Pin FAN1_Pin */
  GPIO_InitStruct.Pin = MAX6675_2_CS_Pin|FAN1_Pin;
 8001428:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2302      	movs	r3, #2
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_GPIO_Init+0x154>)
 8001442:	f001 fb03 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2006      	movs	r0, #6
 800144c:	f001 f829 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001450:	2006      	movs	r0, #6
 8001452:	f001 f842 	bl	80024da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2008      	movs	r0, #8
 800145c:	f001 f821 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001460:	2008      	movs	r0, #8
 8001462:	f001 f83a 	bl	80024da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f001 f819 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001470:	2028      	movs	r0, #40	; 0x28
 8001472:	f001 f832 	bl	80024da <HAL_NVIC_EnableIRQ>

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40010c00 	.word	0x40010c00
 8001488:	40010800 	.word	0x40010800
 800148c:	10110000 	.word	0x10110000
 8001490:	40011000 	.word	0x40011000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>

0800149e <max6675_read_temperature>:
 */

#include "stm32f1xx_hal.h"
#include "main.h"

uint8_t max6675_read_temperature(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *temperature){
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
	uint8_t RXbuf[2];
	uint16_t status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f001 fc64 	bl	8002d82 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(hspi, RXbuf, 2, 100);
 80014ba:	f107 0114 	add.w	r1, r7, #20
 80014be:	2364      	movs	r3, #100	; 0x64
 80014c0:	2202      	movs	r2, #2
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f002 fbfa 	bl	8003cbc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4619      	mov	r1, r3
 80014ce:	68b8      	ldr	r0, [r7, #8]
 80014d0:	f001 fc57 	bl	8002d82 <HAL_GPIO_WritePin>
	*temperature = ((RXbuf[0] << 8) + RXbuf[1]) >> 5;
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	7d7a      	ldrb	r2, [r7, #21]
 80014da:	4413      	add	r3, r2
 80014dc:	115b      	asrs	r3, r3, #5
 80014de:	b29a      	uxth	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	801a      	strh	r2, [r3, #0]
	status = (RXbuf[1] & 0b00000100) >> 2;
 80014e4:	7d7b      	ldrb	r3, [r7, #21]
 80014e6:	109b      	asrs	r3, r3, #2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	82fb      	strh	r3, [r7, #22]
	return status;
 80014f0:	8afb      	ldrh	r3, [r7, #22]
 80014f2:	b2db      	uxtb	r3, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <oledWriteSpi>:

uint8_t DispBuff [SSD1306_HEIGHT/8][SSD1306_TOTAL_WIDTH];



void oledWriteSpi(SPI_HandleTypeDef *hspi, unsigned char data){  // 5 - wszystkie razem
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, &data, 1,100);
 8001508:	1cf9      	adds	r1, r7, #3
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	2201      	movs	r2, #1
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f002 fa98 	bl	8003a44 <HAL_SPI_Transmit>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <chipSelect>:

void chipSelect(uint8_t lcd_nr, uint8_t param){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	if (lcd_nr == 0){
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <chipSelect+0x24>
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	461a      	mov	r2, r3
 8001536:	2101      	movs	r1, #1
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <chipSelect+0x40>)
 800153a:	f001 fc22 	bl	8002d82 <HAL_GPIO_WritePin>
	} else if (lcd_nr == 5){
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
	}
}
 800153e:	e008      	b.n	8001552 <chipSelect+0x36>
	} else if (lcd_nr == 5){
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d105      	bne.n	8001552 <chipSelect+0x36>
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	461a      	mov	r2, r3
 800154a:	2101      	movs	r1, #1
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <chipSelect+0x40>)
 800154e:	f001 fc18 	bl	8002d82 <HAL_GPIO_WritePin>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40010c00 	.word	0x40010c00

08001560 <oledWriteCmd>:

void oledWriteCmd(SPI_HandleTypeDef *hspi, uint8_t lcd_nr, unsigned char cmd){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
 800156c:	4613      	mov	r3, r2
 800156e:	70bb      	strb	r3, [r7, #2]
	chipSelect(lcd_nr, 1);
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffd1 	bl	800151c <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2104      	movs	r1, #4
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <oledWriteCmd+0x4c>)
 8001580:	f001 fbff 	bl	8002d82 <HAL_GPIO_WritePin>
	chipSelect(lcd_nr, 0);
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ffc7 	bl	800151c <chipSelect>
	oledWriteSpi(hspi, cmd);
 800158e:	78bb      	ldrb	r3, [r7, #2]
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb2 	bl	80014fc <oledWriteSpi>
	chipSelect(lcd_nr, 1);
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2101      	movs	r1, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffbd 	bl	800151c <chipSelect>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <oledInit>:
	chipSelect(lcd_nr, 0);
	oledWriteSpi(hspi, data);
	chipSelect(lcd_nr, 1);
}

void oledInit(SPI_HandleTypeDef *hspi, uint8_t lcd_nr){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	chipSelect(lcd_nr, 1);
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ffab 	bl	800151c <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2104      	movs	r1, #4
 80015ca:	4866      	ldr	r0, [pc, #408]	; (8001764 <oledInit+0x1b4>)
 80015cc:	f001 fbd9 	bl	8002d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2102      	movs	r1, #2
 80015d4:	4863      	ldr	r0, [pc, #396]	; (8001764 <oledInit+0x1b4>)
 80015d6:	f001 fbd4 	bl	8002d82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fe66 	bl	80022ac <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2102      	movs	r1, #2
 80015e4:	485f      	ldr	r0, [pc, #380]	; (8001764 <oledInit+0x1b4>)
 80015e6:	f001 fbcc 	bl	8002d82 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f000 fe5e 	bl	80022ac <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2102      	movs	r1, #2
 80015f4:	485b      	ldr	r0, [pc, #364]	; (8001764 <oledInit+0x1b4>)
 80015f6:	f001 fbc4 	bl	8002d82 <HAL_GPIO_WritePin>
	oledWriteCmd(hspi, lcd_nr, 0xAE); //wy��cz panel OLED
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	22ae      	movs	r2, #174	; 0xae
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffad 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x00); //adres koluny LOW
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffa7 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x10); //adres koluny HIGH
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	2210      	movs	r2, #16
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffa1 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x40); //adres startu linii
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff9b 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x20); //tryb adresowania strony
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2220      	movs	r2, #32
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff95 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x02);
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2202      	movs	r2, #2
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff8f 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x81); //ustaw kontrast
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2281      	movs	r2, #129	; 0x81
 8001646:	4619      	mov	r1, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff89 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xCF);
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	22cf      	movs	r2, #207	; 0xcf
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff83 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA1); //ustaw remapowanie
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	22a1      	movs	r2, #161	; 0xa1
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff7d 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xC0); //kierunek skanowania
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	22c0      	movs	r2, #192	; 0xc0
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff77 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA6); //wy�wietlanie bez inwersji
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	22a6      	movs	r2, #166	; 0xa6
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff71 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA8); //ustaw multiplex ratio
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	22a8      	movs	r2, #168	; 0xa8
 8001682:	4619      	mov	r1, r3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff6b 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x3F); //1/64
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff65 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD3); //ustaw display offset
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	22d3      	movs	r2, #211	; 0xd3
 800169a:	4619      	mov	r1, r3
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff5f 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x00); //bez offsetu
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff59 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD5); //ustaw divide ratio/cz�stotliwo��oscylatora
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	22d5      	movs	r2, #213	; 0xd5
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff53 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x80); //100ramek/sec
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff4d 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD9); //ustaw okres pre charge
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	22d9      	movs	r2, #217	; 0xd9
 80016ca:	4619      	mov	r1, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff47 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xF1); //pre charge 15 cykli, discharge 1cykl
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	22f1      	movs	r2, #241	; 0xf1
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff41 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xDA); //konfiguracja wyprowadze�sterownika
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	22da      	movs	r2, #218	; 0xda
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff3b 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x12);
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	2212      	movs	r2, #18
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff35 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xDB); //ustawienie vcomh
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	22db      	movs	r2, #219	; 0xdb
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff2f 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x40);
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x8D); //ustawienie Charge Pump
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	228d      	movs	r2, #141	; 0x8d
 8001712:	4619      	mov	r1, r3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff23 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x14);
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	2214      	movs	r2, #20
 800171e:	4619      	mov	r1, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff1d 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA4); //�pod��czenie� zawarto�ci RAMdo panelu OLED
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	22a4      	movs	r2, #164	; 0xa4
 800172a:	4619      	mov	r1, r3
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff17 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA6); //wy��czenie inwersji wy�wietlania
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	22a6      	movs	r2, #166	; 0xa6
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff11 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xAF); //w��cza wy�wietlacz
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	22af      	movs	r2, #175	; 0xaf
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff0b 	bl	8001560 <oledWriteCmd>
	oledDisplayCls(0);
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f80c 	bl	8001768 <oledDisplayCls>
	chipSelect(lcd_nr, 0);
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fee1 	bl	800151c <chipSelect>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40010c00 	.word	0x40010c00

08001768 <oledDisplayCls>:

void oledDisplayCls(unsigned char fill){
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	 uint16_t i, j;

	 for (i = 0; i < 8; i ++) {
 8001772:	2300      	movs	r3, #0
 8001774:	81fb      	strh	r3, [r7, #14]
 8001776:	e013      	b.n	80017a0 <oledDisplayCls+0x38>
		 for (j = 0; j < SSD1306_TOTAL_WIDTH; j ++) {
 8001778:	2300      	movs	r3, #0
 800177a:	81bb      	strh	r3, [r7, #12]
 800177c:	e00a      	b.n	8001794 <oledDisplayCls+0x2c>
			 DispBuff[i][j] = fill;
 800177e:	89fa      	ldrh	r2, [r7, #14]
 8001780:	89bb      	ldrh	r3, [r7, #12]
 8001782:	490c      	ldr	r1, [pc, #48]	; (80017b4 <oledDisplayCls+0x4c>)
 8001784:	01d2      	lsls	r2, r2, #7
 8001786:	440a      	add	r2, r1
 8001788:	4413      	add	r3, r2
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	701a      	strb	r2, [r3, #0]
		 for (j = 0; j < SSD1306_TOTAL_WIDTH; j ++) {
 800178e:	89bb      	ldrh	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	81bb      	strh	r3, [r7, #12]
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	2b7f      	cmp	r3, #127	; 0x7f
 8001798:	d9f1      	bls.n	800177e <oledDisplayCls+0x16>
	 for (i = 0; i < 8; i ++) {
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	3301      	adds	r3, #1
 800179e:	81fb      	strh	r3, [r7, #14]
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	d9e8      	bls.n	8001778 <oledDisplayCls+0x10>
		 }
	 }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000780 	.word	0x20000780

080017b8 <oledRefreshAll>:

void oledRefreshAll(SPI_HandleTypeDef *hspi){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if(oledRefreshActiveFlag == 1){
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <oledRefreshAll+0x80>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d133      	bne.n	8001830 <oledRefreshAll+0x78>
		if (lcd_line > 7) {
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <oledRefreshAll+0x84>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	d911      	bls.n	80017f4 <oledRefreshAll+0x3c>
			lcd_line = 0;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <oledRefreshAll+0x84>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
			chipSelect(act_lcd, 1);
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <oledRefreshAll+0x88>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fe9d 	bl	800151c <chipSelect>
			HAL_SPI_DMAStop(hspi);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f002 fdd4 	bl	8004390 <HAL_SPI_DMAStop>
			act_lcd++;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <oledRefreshAll+0x88>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <oledRefreshAll+0x88>)
 80017f2:	701a      	strb	r2, [r3, #0]
		}
		if (act_lcd > 1) {
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <oledRefreshAll+0x88>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d90a      	bls.n	8001812 <oledRefreshAll+0x5a>
			act_lcd = 0;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <oledRefreshAll+0x88>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
			licznik++;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <oledRefreshAll+0x8c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <oledRefreshAll+0x8c>)
 800180a:	6013      	str	r3, [r2, #0]
			oledRefreshActiveFlag=0;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <oledRefreshAll+0x80>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
		}
		oledRefresh(hspi, act_lcd, lcd_line);
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <oledRefreshAll+0x88>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <oledRefreshAll+0x84>)
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	b292      	uxth	r2, r2
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f812 	bl	8001848 <oledRefresh>
		lcd_line++;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <oledRefreshAll+0x84>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <oledRefreshAll+0x84>)
 800182e:	701a      	strb	r2, [r3, #0]
	}
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000077c 	.word	0x2000077c
 800183c:	20000776 	.word	0x20000776
 8001840:	20000775 	.word	0x20000775
 8001844:	20000778 	.word	0x20000778

08001848 <oledRefresh>:

void oledRefresh(SPI_HandleTypeDef *hspi, uint8_t lcd_nr, uint16_t line){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
 8001854:	4613      	mov	r3, r2
 8001856:	803b      	strh	r3, [r7, #0]
	oledWriteCmd(hspi, lcd_nr, 0xB0 + line);
 8001858:	883b      	ldrh	r3, [r7, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3b50      	subs	r3, #80	; 0x50
 800185e:	b2da      	uxtb	r2, r3
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	4619      	mov	r1, r3
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fe7b 	bl	8001560 <oledWriteCmd>
	oledSetColStart(hspi, lcd_nr);
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f824 	bl	80018bc <oledSetColStart>
	chipSelect(lcd_nr, lcd_nr);
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe4e 	bl	800151c <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	2104      	movs	r1, #4
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <oledRefresh+0x6c>)
 8001886:	f001 fa7c 	bl	8002d82 <HAL_GPIO_WritePin>
	chipSelect(lcd_nr, 0);
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe44 	bl	800151c <chipSelect>
	HAL_SPI_Transmit_DMA(hspi, &DispBuff[line][0+(lcd_nr*128)], 128);
 8001894:	883a      	ldrh	r2, [r7, #0]
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	01db      	lsls	r3, r3, #7
 800189a:	01d2      	lsls	r2, r2, #7
 800189c:	4413      	add	r3, r2
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <oledRefresh+0x70>)
 80018a0:	4413      	add	r3, r2
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f002 fcbc 	bl	8004224 <HAL_SPI_Transmit_DMA>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	20000780 	.word	0x20000780

080018bc <oledSetColStart>:

void oledSetColStart(SPI_HandleTypeDef *hspi, uint8_t lcd_nr){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	oledWriteCmd(hspi, lcd_nr, 0x00); //low
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fe46 	bl	8001560 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x10); //high
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	2210      	movs	r2, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe40 	bl	8001560 <oledWriteCmd>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <oledDrawPoint>:

void oledDrawPoint(uint16_t x, uint16_t y, unsigned char p){
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	460b      	mov	r3, r1
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	70fb      	strb	r3, [r7, #3]
	 uint16_t chPos, chBx, chTemp = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	81fb      	strh	r3, [r7, #14]

	 if (x > (5*127) || y > 63) return;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8001904:	d242      	bcs.n	800198c <oledDrawPoint+0xa4>
 8001906:	88bb      	ldrh	r3, [r7, #4]
 8001908:	2b3f      	cmp	r3, #63	; 0x3f
 800190a:	d83f      	bhi.n	800198c <oledDrawPoint+0xa4>
	 chPos = 7 - y / 8;
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	b29b      	uxth	r3, r3
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	81bb      	strh	r3, [r7, #12]
	 chBx = y % 8;
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	817b      	strh	r3, [r7, #10]
	 chTemp = 1 << (7 - chBx);
 8001920:	897b      	ldrh	r3, [r7, #10]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2201      	movs	r2, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	81fb      	strh	r3, [r7, #14]
	 if (p) {
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <oledDrawPoint+0x74>
		 DispBuff[chPos][x] |= chTemp;
 8001934:	89ba      	ldrh	r2, [r7, #12]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4917      	ldr	r1, [pc, #92]	; (8001998 <oledDrawPoint+0xb0>)
 800193a:	01d2      	lsls	r2, r2, #7
 800193c:	440a      	add	r2, r1
 800193e:	4413      	add	r3, r2
 8001940:	7818      	ldrb	r0, [r3, #0]
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	b2d9      	uxtb	r1, r3
 8001946:	89ba      	ldrh	r2, [r7, #12]
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4301      	orrs	r1, r0
 800194c:	b2c8      	uxtb	r0, r1
 800194e:	4912      	ldr	r1, [pc, #72]	; (8001998 <oledDrawPoint+0xb0>)
 8001950:	01d2      	lsls	r2, r2, #7
 8001952:	440a      	add	r2, r1
 8001954:	4413      	add	r3, r2
 8001956:	4602      	mov	r2, r0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e018      	b.n	800198e <oledDrawPoint+0xa6>
	 } else {
		 DispBuff[chPos][x] &= ~chTemp;
 800195c:	89ba      	ldrh	r2, [r7, #12]
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	490d      	ldr	r1, [pc, #52]	; (8001998 <oledDrawPoint+0xb0>)
 8001962:	01d2      	lsls	r2, r2, #7
 8001964:	440a      	add	r2, r1
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b25a      	sxtb	r2, r3
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	b25b      	sxtb	r3, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4013      	ands	r3, r2
 8001976:	b259      	sxtb	r1, r3
 8001978:	89ba      	ldrh	r2, [r7, #12]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	b2c8      	uxtb	r0, r1
 800197e:	4906      	ldr	r1, [pc, #24]	; (8001998 <oledDrawPoint+0xb0>)
 8001980:	01d2      	lsls	r2, r2, #7
 8001982:	440a      	add	r2, r1
 8001984:	4413      	add	r3, r2
 8001986:	4602      	mov	r2, r0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e000      	b.n	800198e <oledDrawPoint+0xa6>
	 if (x > (5*127) || y > 63) return;
 800198c:	bf00      	nop
	 }
}
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000780 	.word	0x20000780

0800199c <oledWriteChar>:
    oledDrawPoint(xc+1, yc-1, colour);
    oledDrawPoint(xc-1, yc+1, colour);
    oledDrawPoint(xc-1, yc-1, colour);
}

char oledWriteChar(uint16_t x, uint16_t y, uint8_t ch, FontDef Font, uint8_t mode){
 800199c:	b082      	sub	sp, #8
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
 80019aa:	460b      	mov	r3, r1
 80019ac:	80bb      	strh	r3, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	for (i = 0; i < Font.FontHeight; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e042      	b.n	8001a3e <oledWriteChar+0xa2>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	3b20      	subs	r3, #32
 80019be:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	440b      	add	r3, r1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font.FontWidth+1; j++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e027      	b.n	8001a2a <oledWriteChar+0x8e>
		{
			if ((b << j) & 0x8000)
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00e      	beq.n	8001a08 <oledWriteChar+0x6c>
			{
				oledDrawPoint(x + j, (y + i), 1);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4413      	add	r3, r2
 80019f2:	b298      	uxth	r0, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	88bb      	ldrh	r3, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff ff71 	bl	80018e8 <oledDrawPoint>
 8001a06:	e00d      	b.n	8001a24 <oledWriteChar+0x88>
			}
			else
			{
				oledDrawPoint(x + j, (y + i), 0);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b298      	uxth	r0, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff ff62 	bl	80018e8 <oledDrawPoint>
		for (j = 0; j < Font.FontWidth+1; j++)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3301      	adds	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a2e:	3301      	adds	r3, #1
 8001a30:	461a      	mov	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d3d0      	bcc.n	80019da <oledWriteChar+0x3e>
	for (i = 0; i < Font.FontHeight; i++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a42:	461a      	mov	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d3b6      	bcc.n	80019b8 <oledWriteChar+0x1c>
			}
		}
	}
	return ch;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a56:	b002      	add	sp, #8
 8001a58:	4770      	bx	lr

08001a5a <oledDispTxt>:
	}
	return ch;
}


void oledDispTxt(uint16_t x, uint16_t y, const uint8_t *txt, FontDef Font, uint8_t mode){
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	603a      	str	r2, [r7, #0]
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	80bb      	strh	r3, [r7, #4]
	 while (*txt != '\0') {
 8001a6e:	e02d      	b.n	8001acc <oledDispTxt+0x72>
		 if (x > (SSD1306_TOTAL_WIDTH - Font.FontWidth / 2)) {
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	7d3b      	ldrb	r3, [r7, #20]
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dd10      	ble.n	8001aa2 <oledDispTxt+0x48>
			 x = 0; y += Font.FontWidth;
 8001a80:	2300      	movs	r3, #0
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	7d3b      	ldrb	r3, [r7, #20]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	80bb      	strh	r3, [r7, #4]
			 if (y > (SSD1306_HEIGHT - Font.FontHeight)) {
 8001a8e:	88ba      	ldrh	r2, [r7, #4]
 8001a90:	7d7b      	ldrb	r3, [r7, #21]
 8001a92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dd03      	ble.n	8001aa2 <oledDispTxt+0x48>
				 y = x = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	80fb      	strh	r3, [r7, #6]
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	80bb      	strh	r3, [r7, #4]
			 }
		 }
		 oledWriteChar(x, y, *txt, Font, mode);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	88b9      	ldrh	r1, [r7, #4]
 8001aa8:	88f8      	ldrh	r0, [r7, #6]
 8001aaa:	7f3b      	ldrb	r3, [r7, #28]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f7ff ff72 	bl	800199c <oledWriteChar>
		 x += Font.FontWidth+1;
 8001ab8:	7d3b      	ldrb	r3, [r7, #20]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	80fb      	strh	r3, [r7, #6]
		 txt ++;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
	 while (*txt != '\0') {
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1cd      	bne.n	8001a70 <oledDispTxt+0x16>
	 }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ae0:	b002      	add	sp, #8
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_MspInit+0x5c>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <HAL_MspInit+0x5c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6193      	str	r3, [r2, #24]
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_MspInit+0x5c>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_MspInit+0x5c>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_MspInit+0x5c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_MspInit+0x5c>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_MspInit+0x60>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_MspInit+0x60>)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000

08001b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a61      	ldr	r2, [pc, #388]	; (8001ce8 <HAL_SPI_MspInit+0x1a0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d15e      	bne.n	8001c26 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b68:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a59      	ldr	r2, [pc, #356]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b98:	23a0      	movs	r3, #160	; 0xa0
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4851      	ldr	r0, [pc, #324]	; (8001cf0 <HAL_SPI_MspInit+0x1a8>)
 8001bac:	f000 ff4e 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bb0:	2340      	movs	r3, #64	; 0x40
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	484b      	ldr	r0, [pc, #300]	; (8001cf0 <HAL_SPI_MspInit+0x1a8>)
 8001bc4:	f000 ff42 	bl	8002a4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bca:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_SPI_MspInit+0x1b0>)
 8001bcc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be6:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bf8:	483e      	ldr	r0, [pc, #248]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001bfa:	f000 fc89 	bl	8002510 <HAL_DMA_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001c04:	f7ff fc46 	bl	8001494 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3a      	ldr	r2, [pc, #232]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001c0c:	649a      	str	r2, [r3, #72]	; 0x48
 8001c0e:	4a39      	ldr	r2, [pc, #228]	; (8001cf4 <HAL_SPI_MspInit+0x1ac>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2023      	movs	r0, #35	; 0x23
 8001c1a:	f000 fc42 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c1e:	2023      	movs	r0, #35	; 0x23
 8001c20:	f000 fc5b 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c24:	e05c      	b.n	8001ce0 <HAL_SPI_MspInit+0x198>
  else if(hspi->Instance==SPI2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_SPI_MspInit+0x1b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d157      	bne.n	8001ce0 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3a:	61d3      	str	r3, [r2, #28]
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_SPI_MspInit+0x1a4>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c60:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	4619      	mov	r1, r3
 8001c74:	4822      	ldr	r0, [pc, #136]	; (8001d00 <HAL_SPI_MspInit+0x1b8>)
 8001c76:	f000 fee9 	bl	8002a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	481c      	ldr	r0, [pc, #112]	; (8001d00 <HAL_SPI_MspInit+0x1b8>)
 8001c90:	f000 fedc 	bl	8002a4c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_SPI_MspInit+0x1c0>)
 8001c98:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001cc4:	480f      	ldr	r0, [pc, #60]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cc6:	f000 fc23 	bl	8002510 <HAL_DMA_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_SPI_MspInit+0x18c>
      Error_Handler();
 8001cd0:	f7ff fbe0 	bl	8001494 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_SPI_MspInit+0x1bc>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013000 	.word	0x40013000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010800 	.word	0x40010800
 8001cf4:	200002c0 	.word	0x200002c0
 8001cf8:	40020030 	.word	0x40020030
 8001cfc:	40003800 	.word	0x40003800
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	20000304 	.word	0x20000304
 8001d08:	40020044 	.word	0x40020044

08001d0c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_TIM_OC_MspInit+0x34>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10b      	bne.n	8001d36 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_TIM_OC_MspInit+0x38>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_TIM_OC_MspInit+0x38>)
 8001d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_TIM_OC_MspInit+0x38>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d113      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_TIM_Base_MspInit+0x44>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_TIM_Base_MspInit+0x44>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_TIM_Base_MspInit+0x44>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	201c      	movs	r0, #28
 8001d78:	f000 fb93 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d7c:	201c      	movs	r0, #28
 8001d7e:	f000 fbac 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <HAL_TIM_PWM_MspInit+0x58>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10c      	bne.n	8001dbc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_TIM_PWM_MspInit+0x5c>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_TIM_PWM_MspInit+0x5c>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_TIM_PWM_MspInit+0x5c>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dba:	e010      	b.n	8001dde <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_TIM_PWM_MspInit+0x60>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10b      	bne.n	8001dde <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_TIM_PWM_MspInit+0x5c>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_TIM_PWM_MspInit+0x5c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_TIM_PWM_MspInit+0x5c>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40000800 	.word	0x40000800

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a37      	ldr	r2, [pc, #220]	; (8001eec <HAL_TIM_MspPostInit+0xf8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d119      	bne.n	8001e48 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = FAN2_Pin;
 8001e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FAN2_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	482c      	ldr	r0, [pc, #176]	; (8001ef4 <HAL_TIM_MspPostInit+0x100>)
 8001e42:	f000 fe03 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e46:	e04c      	b.n	8001ee2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <HAL_TIM_MspPostInit+0x104>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12a      	bne.n	8001ea8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	6193      	str	r3, [r2, #24]
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2302      	movs	r3, #2
 8001e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481f      	ldr	r0, [pc, #124]	; (8001efc <HAL_TIM_MspPostInit+0x108>)
 8001e7e:	f000 fde5 	bl	8002a4c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_TIM_MspPostInit+0x10c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_TIM_MspPostInit+0x10c>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	6053      	str	r3, [r2, #4]
}
 8001ea6:	e01c      	b.n	8001ee2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_TIM_MspPostInit+0x110>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d117      	bne.n	8001ee2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_TIM_MspPostInit+0xfc>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AC_PWM1_Pin|AC_PWM2_Pin;
 8001eca:	23c0      	movs	r3, #192	; 0xc0
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <HAL_TIM_MspPostInit+0x108>)
 8001ede:	f000 fdb5 	bl	8002a4c <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40010c00 	.word	0x40010c00
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40000800 	.word	0x40000800

08001f08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_PCD_MspInit+0x34>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10b      	bne.n	8001f32 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_PCD_MspInit+0x38>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_PCD_MspInit+0x38>)
 8001f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_PCD_MspInit+0x38>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40005c00 	.word	0x40005c00
 8001f40:	40021000 	.word	0x40021000

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8a:	f000 f973 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_1_Pin);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 ff0c 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8001fa4:	2004      	movs	r0, #4
 8001fa6:	f000 ff05 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Channel3_IRQHandler+0x10>)
 8001fb6:	f000 fc15 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002c0 	.word	0x200002c0

08001fc4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Channel4_IRQHandler+0x10>)
 8001fca:	f000 fc0b 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000304 	.word	0x20000304

08001fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM2_IRQHandler+0x10>)
 8001fde:	f002 fee3 	bl	8004da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000390 	.word	0x20000390

08001fec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <SPI1_IRQHandler+0x10>)
 8001ff2:	f002 fa0d 	bl	8004410 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000210 	.word	0x20000210

08002000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AC_ZERO_Pin);
 8002004:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002008:	f000 fed4 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
	return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <_kill>:

int _kill(int pid, int sig)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002028:	f003 fd8a 	bl	8005b40 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	2216      	movs	r2, #22
 8002030:	601a      	str	r2, [r3, #0]
	return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_exit>:

void _exit (int status)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002046:	f04f 31ff 	mov.w	r1, #4294967295
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffe7 	bl	800201e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002050:	e7fe      	b.n	8002050 <_exit+0x12>

08002052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e00a      	b.n	800207a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002064:	f3af 8000 	nop.w
 8002068:	4601      	mov	r1, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	60ba      	str	r2, [r7, #8]
 8002070:	b2ca      	uxtb	r2, r1
 8002072:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3301      	adds	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	dbf0      	blt.n	8002064 <_read+0x12>
	}

return len;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e009      	b.n	80020b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	60ba      	str	r2, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dbf1      	blt.n	800209e <_write+0x12>
	}
	return len;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_close>:

int _close(int file)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	return -1;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <_isatty>:

int _isatty(int file)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	return 1;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f003 fcf4 	bl	8005b40 <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20005000 	.word	0x20005000
 8002184:	00000400 	.word	0x00000400
 8002188:	20000b80 	.word	0x20000b80
 800218c:	20000b98 	.word	0x20000b98

08002190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800219e:	490d      	ldr	r1, [pc, #52]	; (80021d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b4:	4c0a      	ldr	r4, [pc, #40]	; (80021e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021c2:	f7ff ffe5 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f003 fcc1 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ca:	f7fe fd81 	bl	8000cd0 <main>
  bx lr
 80021ce:	4770      	bx	lr
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021d8:	0800a874 	.word	0x0800a874
  ldr r2, =_sbss
 80021dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021e0:	20000b98 	.word	0x20000b98

080021e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC1_2_IRQHandler>
	...

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_Init+0x28>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_Init+0x28>)
 80021f2:	f043 0310 	orr.w	r3, r3, #16
 80021f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f947 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	200f      	movs	r0, #15
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7ff fc6e 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40022000 	.word	0x40022000

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f95f 	bl	80024f6 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f927 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000014 	.word	0x20000014
 800226c:	2000001c 	.word	0x2000001c
 8002270:	20000018 	.word	0x20000018

08002274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x1c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x20>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_IncTick+0x20>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	2000001c 	.word	0x2000001c
 8002294:	20000b84 	.word	0x20000b84

08002298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_GetTick+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000b84 	.word	0x20000b84

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fff0 	bl	8002298 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffe0 	bl	8002298 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000001c 	.word	0x2000001c

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <__NVIC_EnableIRQ+0x34>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff90 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff2d 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff42 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff90 	bl	80023e4 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5f 	bl	8002390 <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff35 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e043      	b.n	80025ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_DMA_Init+0xa8>)
 800252e:	4413      	add	r3, r2
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_DMA_Init+0xac>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	009a      	lsls	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_DMA_Init+0xb0>)
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800255a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800255e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	bffdfff8 	.word	0xbffdfff8
 80025bc:	cccccccd 	.word	0xcccccccd
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Start_IT+0x20>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e04a      	b.n	800267a <HAL_DMA_Start_IT+0xb6>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d13a      	bne.n	800266c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f9e8 	bl	80029f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 020e 	orr.w	r2, r2, #14
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e00f      	b.n	800265a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 020a 	orr.w	r2, r2, #10
 8002658:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e005      	b.n	8002678 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002674:	2302      	movs	r3, #2
 8002676:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002694:	2b02      	cmp	r3, #2
 8002696:	d008      	beq.n	80026aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2204      	movs	r2, #4
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e020      	b.n	80026ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 020e 	bic.w	r2, r2, #14
 80026b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800270a:	2b02      	cmp	r3, #2
 800270c:	d005      	beq.n	800271a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e051      	b.n	80027be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020e 	bic.w	r2, r2, #14
 8002728:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_DMA_Abort_IT+0xd0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d029      	beq.n	8002798 <HAL_DMA_Abort_IT+0xa0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_DMA_Abort_IT+0xd4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d022      	beq.n	8002794 <HAL_DMA_Abort_IT+0x9c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_DMA_Abort_IT+0xd8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01a      	beq.n	800278e <HAL_DMA_Abort_IT+0x96>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_DMA_Abort_IT+0xdc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d012      	beq.n	8002788 <HAL_DMA_Abort_IT+0x90>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <HAL_DMA_Abort_IT+0xe0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00a      	beq.n	8002782 <HAL_DMA_Abort_IT+0x8a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_DMA_Abort_IT+0xe4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d102      	bne.n	800277c <HAL_DMA_Abort_IT+0x84>
 8002776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277a:	e00e      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 800277c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002780:	e00b      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002786:	e008      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	e005      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 800278e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002792:	e002      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002794:	2310      	movs	r3, #16
 8002796:	e000      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002798:	2301      	movs	r3, #1
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_DMA_Abort_IT+0xe8>)
 800279c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    } 
  }
  return status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40020008 	.word	0x40020008
 80027cc:	4002001c 	.word	0x4002001c
 80027d0:	40020030 	.word	0x40020030
 80027d4:	40020044 	.word	0x40020044
 80027d8:	40020058 	.word	0x40020058
 80027dc:	4002006c 	.word	0x4002006c
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2204      	movs	r2, #4
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d04f      	beq.n	80028ac <HAL_DMA_IRQHandler+0xc8>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04a      	beq.n	80028ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d029      	beq.n	8002892 <HAL_DMA_IRQHandler+0xae>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_IRQHandler+0xaa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_IRQHandler+0xa4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d012      	beq.n	8002882 <HAL_DMA_IRQHandler+0x9e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <HAL_DMA_IRQHandler+0x200>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00a      	beq.n	800287c <HAL_DMA_IRQHandler+0x98>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <HAL_DMA_IRQHandler+0x204>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <HAL_DMA_IRQHandler+0x92>
 8002870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002874:	e00e      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002876:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800287a:	e00b      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 800287c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002880:	e008      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002882:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002886:	e005      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288c:	e002      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002892:	2304      	movs	r3, #4
 8002894:	4a55      	ldr	r2, [pc, #340]	; (80029ec <HAL_DMA_IRQHandler+0x208>)
 8002896:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8094 	beq.w	80029ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	e08e      	b.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2202      	movs	r2, #2
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d056      	beq.n	800296a <HAL_DMA_IRQHandler+0x186>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d051      	beq.n	800296a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 020a 	bic.w	r2, r2, #10
 80028e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d029      	beq.n	800294a <HAL_DMA_IRQHandler+0x166>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0x162>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a35      	ldr	r2, [pc, #212]	; (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x15c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d012      	beq.n	800293a <HAL_DMA_IRQHandler+0x156>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <HAL_DMA_IRQHandler+0x200>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x150>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	; (80029e8 <HAL_DMA_IRQHandler+0x204>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_DMA_IRQHandler+0x14a>
 8002928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800292c:	e00e      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800292e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002932:	e00b      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	e008      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800293a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293e:	e005      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002944:	e002      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002946:	2320      	movs	r3, #32
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800294a:	2302      	movs	r3, #2
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <HAL_DMA_IRQHandler+0x208>)
 800294e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d034      	beq.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002968:	e02f      	b.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2208      	movs	r2, #8
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 020e 	bic.w	r2, r2, #14
 8002992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
    }
  }
  return;
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
}
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40020008 	.word	0x40020008
 80029d8:	4002001c 	.word	0x4002001c
 80029dc:	40020030 	.word	0x40020030
 80029e0:	40020044 	.word	0x40020044
 80029e4:	40020058 	.word	0x40020058
 80029e8:	4002006c 	.word	0x4002006c
 80029ec:	40020000 	.word	0x40020000

080029f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d108      	bne.n	8002a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a2e:	e007      	b.n	8002a40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	; 0x2c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e169      	b.n	8002d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8158 	bne.w	8002d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a9a      	ldr	r2, [pc, #616]	; (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d05e      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a88:	4a98      	ldr	r2, [pc, #608]	; (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d875      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a8e:	4a98      	ldr	r2, [pc, #608]	; (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d058      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a94:	4a96      	ldr	r2, [pc, #600]	; (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d86f      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a9a:	4a96      	ldr	r2, [pc, #600]	; (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d052      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aa0:	4a94      	ldr	r2, [pc, #592]	; (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d869      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002aa6:	4a94      	ldr	r2, [pc, #592]	; (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04c      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aac:	4a92      	ldr	r2, [pc, #584]	; (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d863      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ab2:	4a92      	ldr	r2, [pc, #584]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d046      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002ab8:	4a90      	ldr	r2, [pc, #576]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d85d      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d82a      	bhi.n	8002b18 <HAL_GPIO_Init+0xcc>
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d859      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ac6:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <HAL_GPIO_Init+0x80>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b21 	.word	0x08002b21
 8002ad4:	08002b33 	.word	0x08002b33
 8002ad8:	08002b75 	.word	0x08002b75
 8002adc:	08002b7b 	.word	0x08002b7b
 8002ae0:	08002b7b 	.word	0x08002b7b
 8002ae4:	08002b7b 	.word	0x08002b7b
 8002ae8:	08002b7b 	.word	0x08002b7b
 8002aec:	08002b7b 	.word	0x08002b7b
 8002af0:	08002b7b 	.word	0x08002b7b
 8002af4:	08002b7b 	.word	0x08002b7b
 8002af8:	08002b7b 	.word	0x08002b7b
 8002afc:	08002b7b 	.word	0x08002b7b
 8002b00:	08002b7b 	.word	0x08002b7b
 8002b04:	08002b7b 	.word	0x08002b7b
 8002b08:	08002b7b 	.word	0x08002b7b
 8002b0c:	08002b7b 	.word	0x08002b7b
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b3d 	.word	0x08002b3d
 8002b18:	4a79      	ldr	r2, [pc, #484]	; (8002d00 <HAL_GPIO_Init+0x2b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b1e:	e02c      	b.n	8002b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e029      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e024      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	3308      	adds	r3, #8
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e01f      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	330c      	adds	r3, #12
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e01a      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	623b      	str	r3, [r7, #32]
          break;
 8002b52:	e013      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	611a      	str	r2, [r3, #16]
          break;
 8002b66:	e009      	b.n	8002b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	615a      	str	r2, [r3, #20]
          break;
 8002b72:	e003      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          break;
 8002b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d801      	bhi.n	8002b86 <HAL_GPIO_Init+0x13a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_Init+0x13e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2bff      	cmp	r3, #255	; 0xff
 8002b90:	d802      	bhi.n	8002b98 <HAL_GPIO_Init+0x14c>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x152>
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3b08      	subs	r3, #8
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80b1 	beq.w	8002d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002be4:	4a48      	ldr	r2, [pc, #288]	; (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <HAL_GPIO_Init+0x2c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e004      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c4a:	492f      	ldr	r1, [pc, #188]	; (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	492c      	ldr	r1, [pc, #176]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4928      	ldr	r1, [pc, #160]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	491e      	ldr	r1, [pc, #120]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4918      	ldr	r1, [pc, #96]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4914      	ldr	r1, [pc, #80]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d021      	beq.n	8002d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
 8002ce8:	e021      	b.n	8002d2e <HAL_GPIO_Init+0x2e2>
 8002cea:	bf00      	nop
 8002cec:	10320000 	.word	0x10320000
 8002cf0:	10310000 	.word	0x10310000
 8002cf4:	10220000 	.word	0x10220000
 8002cf8:	10210000 	.word	0x10210000
 8002cfc:	10120000 	.word	0x10120000
 8002d00:	10110000 	.word	0x10110000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	40010c00 	.word	0x40010c00
 8002d14:	40011000 	.word	0x40011000
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4909      	ldr	r1, [pc, #36]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f ae8e 	bne.w	8002a60 <HAL_GPIO_Init+0x14>
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	372c      	adds	r7, #44	; 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	807b      	strh	r3, [r7, #2]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d92:	787b      	ldrb	r3, [r7, #1]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	611a      	str	r2, [r3, #16]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fec6 	bl	8000b64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	b08b      	sub	sp, #44	; 0x2c
 8002de8:	af06      	add	r7, sp, #24
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0fd      	b.n	8002ff2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff f87c 	bl	8001f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2203      	movs	r2, #3
 8002e14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fe3e 	bl	8005a9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	687e      	ldr	r6, [r7, #4]
 8002e2a:	466d      	mov	r5, sp
 8002e2c:	f106 0410 	add.w	r4, r6, #16
 8002e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	602b      	str	r3, [r5, #0]
 8002e38:	1d33      	adds	r3, r6, #4
 8002e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	f002 fe1e 	bl	8005a7e <USB_CoreInit>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0ce      	b.n	8002ff2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fe39 	bl	8005ad2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e04c      	b.n	8002f00 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	3301      	adds	r3, #1
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	b298      	uxth	r0, r3
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3336      	adds	r3, #54	; 0x36
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3303      	adds	r3, #3
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3338      	adds	r3, #56	; 0x38
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	333c      	adds	r3, #60	; 0x3c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3340      	adds	r3, #64	; 0x40
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3ad      	bcc.n	8002e66 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e044      	b.n	8002f9a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3b5      	bcc.n	8002f10 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	687e      	ldr	r6, [r7, #4]
 8002fac:	466d      	mov	r5, sp
 8002fae:	f106 0410 	add.w	r4, r6, #16
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	1d33      	adds	r3, r6, #4
 8002fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	f002 fd93 	bl	8005aea <USB_DevInit>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00d      	b.n	8002ff2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 fd9d 	bl	8005b2a <USB_DevDisconnect>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e272      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8087 	beq.w	800312a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800301c:	4b92      	ldr	r3, [pc, #584]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00c      	beq.n	8003042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d112      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
 8003034:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d10b      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06c      	beq.n	8003128 <HAL_RCC_OscConfig+0x12c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d168      	bne.n	8003128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e24c      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x76>
 8003064:	4b80      	ldr	r3, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a7f      	ldr	r2, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e02e      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x98>
 800307a:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800308c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0xbc>
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff f8de 	bl	8002298 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7ff f8da 	bl	8002298 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e200      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe4>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7ff f8ca 	bl	8002298 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7ff f8c6 	bl	8002298 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1ec      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x10c>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003136:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
 800314e:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c0      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4939      	ldr	r1, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7ff f87f 	bl	8002298 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7ff f87b 	bl	8002298 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a1      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4927      	ldr	r1, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7ff f85e 	bl	8002298 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7ff f85a 	bl	8002298 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e180      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03a      	beq.n	8003280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7ff f83e 	bl	8002298 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7ff f83a 	bl	8002298 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e160      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800323e:	2001      	movs	r0, #1
 8003240:	f000 faa8 	bl	8003794 <RCC_Delay>
 8003244:	e01c      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7ff f824 	bl	8002298 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	e00f      	b.n	8003274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7ff f820 	bl	8002298 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d908      	bls.n	8003274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e146      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	42420000 	.word	0x42420000
 8003270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e9      	bne.n	8003254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a6 	beq.w	80033da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b8b      	ldr	r3, [pc, #556]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a87      	ldr	r2, [pc, #540]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]
 80032aa:	4b85      	ldr	r3, [pc, #532]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b7f      	ldr	r3, [pc, #508]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7fe ffe1 	bl	8002298 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7fe ffdd 	bl	8002298 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e103      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x312>
 8003300:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e02d      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x334>
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a69      	ldr	r2, [pc, #420]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	4b67      	ldr	r3, [pc, #412]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a66      	ldr	r2, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6213      	str	r3, [r2, #32]
 800332e:	e01c      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x356>
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a60      	ldr	r2, [pc, #384]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4b5e      	ldr	r3, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d015      	beq.n	800339e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7fe ff91 	bl	8002298 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fe ff8d 	bl	8002298 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0b1      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCC_OscConfig+0x37e>
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fe ff7b 	bl	8002298 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe ff77 	bl	8002298 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e09b      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8087 	beq.w	80034f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d061      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d146      	bne.n	8003486 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe ff4b 	bl	8002298 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe ff47 	bl	8002298 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e06d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a19      	ldr	r1, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	430b      	orrs	r3, r1
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe ff1b 	bl	8002298 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe ff17 	bl	8002298 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e03d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x46a>
 8003484:	e035      	b.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe ff04 	bl	8002298 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe ff00 	bl	8002298 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e026      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x498>
 80034b2:	e01e      	b.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e019      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x500>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003566:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fe52 	bl	8002298 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe fe4e 	bl	8002298 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1cc>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fdb0 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800a480 	.word	0x0800a480
 80036cc:	20000014 	.word	0x20000014
 80036d0:	20000018 	.word	0x20000018

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b490      	push	{r4, r7}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_RCC_GetSysClockFreq+0xac>)
 80036dc:	1d3c      	adds	r4, r7, #4
 80036de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036e4:	f240 2301 	movw	r3, #513	; 0x201
 80036e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x46>
 8003712:	e02b      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	623b      	str	r3, [r7, #32]
      break;
 8003718:	e02b      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3328      	adds	r3, #40	; 0x28
 8003724:	443b      	add	r3, r7
 8003726:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800372a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0c5b      	lsrs	r3, r3, #17
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	3328      	adds	r3, #40	; 0x28
 8003742:	443b      	add	r3, r7
 8003744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003748:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 800374e:	fb03 f202 	mul.w	r2, r3, r2
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	e004      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	623b      	str	r3, [r7, #32]
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_RCC_GetSysClockFreq+0xbc>)
 800376e:	623b      	str	r3, [r7, #32]
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	6a3b      	ldr	r3, [r7, #32]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc90      	pop	{r4, r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	080089b8 	.word	0x080089b8
 8003784:	40021000 	.word	0x40021000
 8003788:	00f42400 	.word	0x00f42400
 800378c:	003d0900 	.word	0x003d0900
 8003790:	007a1200 	.word	0x007a1200

08003794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <RCC_Delay+0x34>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <RCC_Delay+0x38>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a5b      	lsrs	r3, r3, #9
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b0:	bf00      	nop
  }
  while (Delay --);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <RCC_Delay+0x1c>
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20000014 	.word	0x20000014
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07d      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10d      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fc:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	4a4b      	ldr	r2, [pc, #300]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003806:	61d3      	str	r3, [r2, #28]
 8003808:	4b49      	ldr	r3, [pc, #292]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d118      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003824:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a42      	ldr	r2, [pc, #264]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003830:	f7fe fd32 	bl	8002298 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	e008      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7fe fd2e 	bl	8002298 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e06d      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d027      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003874:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800388a:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d014      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fe fcfd 	bl	8002298 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fe fcf9 	bl	8002298 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e036      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ee      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4917      	ldr	r1, [pc, #92]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	490b      	ldr	r1, [pc, #44]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	42420440 	.word	0x42420440

0800393c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e076      	b.n	8003a3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d009      	beq.n	8003974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
 8003966:	e005      	b.n	8003974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe f8da 	bl	8001b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	ea42 0103 	orr.w	r1, r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	0c1a      	lsrs	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f002 0204 	and.w	r2, r2, #4
 8003a1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_SPI_Transmit+0x22>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e126      	b.n	8003cb4 <HAL_SPI_Transmit+0x270>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a6e:	f7fe fc13 	bl	8002298 <HAL_GetTick>
 8003a72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a88:	e10b      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Transmit+0x52>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a9a:	e102      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae2:	d10f      	bne.n	8003b04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d007      	beq.n	8003b22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2a:	d14b      	bne.n	8003bc4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Transmit+0xf6>
 8003b34:	8afb      	ldrh	r3, [r7, #22]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d13e      	bne.n	8003bb8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b5e:	e02b      	b.n	8003bb8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d112      	bne.n	8003b94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b92:	e011      	b.n	8003bb8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b94:	f7fe fb80 	bl	8002298 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d803      	bhi.n	8003bac <HAL_SPI_Transmit+0x168>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d102      	bne.n	8003bb2 <HAL_SPI_Transmit+0x16e>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb6:	e074      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ce      	bne.n	8003b60 <HAL_SPI_Transmit+0x11c>
 8003bc2:	e04c      	b.n	8003c5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x18e>
 8003bcc:	8afb      	ldrh	r3, [r7, #22]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d140      	bne.n	8003c54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bf8:	e02c      	b.n	8003c54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d113      	bne.n	8003c30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c2e:	e011      	b.n	8003c54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c30:	f7fe fb32 	bl	8002298 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d803      	bhi.n	8003c48 <HAL_SPI_Transmit+0x204>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d102      	bne.n	8003c4e <HAL_SPI_Transmit+0x20a>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c52:	e026      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1cd      	bne.n	8003bfa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fe3c 	bl	80048e0 <SPI_EndRxTxTransaction>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e000      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ca0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd8:	d112      	bne.n	8003d00 <HAL_SPI_Receive+0x44>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10e      	bne.n	8003d00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f8f1 	bl	8003ede <HAL_SPI_TransmitReceive>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	e0ea      	b.n	8003ed6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_SPI_Receive+0x52>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e0e3      	b.n	8003ed6 <HAL_SPI_Receive+0x21a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d16:	f7fe fabf 	bl	8002298 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d002      	beq.n	8003d2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d2c:	e0ca      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_Receive+0x7e>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d3e:	e0c1      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	88fa      	ldrh	r2, [r7, #6]
 8003d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d86:	d10f      	bne.n	8003da8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d007      	beq.n	8003dc6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d162      	bne.n	8003e94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dce:	e02e      	b.n	8003e2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d115      	bne.n	8003e0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f103 020c 	add.w	r2, r3, #12
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e08:	e011      	b.n	8003e2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0a:	f7fe fa45 	bl	8002298 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d803      	bhi.n	8003e22 <HAL_SPI_Receive+0x166>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d102      	bne.n	8003e28 <HAL_SPI_Receive+0x16c>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e2c:	e04a      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1cb      	bne.n	8003dd0 <HAL_SPI_Receive+0x114>
 8003e38:	e031      	b.n	8003e9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d113      	bne.n	8003e70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	b292      	uxth	r2, r2
 8003e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	1c9a      	adds	r2, r3, #2
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e6e:	e011      	b.n	8003e94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e70:	f7fe fa12 	bl	8002298 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d803      	bhi.n	8003e88 <HAL_SPI_Receive+0x1cc>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d102      	bne.n	8003e8e <HAL_SPI_Receive+0x1d2>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e92:	e017      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1cd      	bne.n	8003e3a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fcca 	bl	800483c <SPI_EndRxTransaction>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
 8003ec0:	e000      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
  }

error :
 8003ec2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08c      	sub	sp, #48	; 0x30
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eec:	2301      	movs	r3, #1
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x26>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e18a      	b.n	800421a <HAL_SPI_TransmitReceive+0x33c>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f0c:	f7fe f9c4 	bl	8002298 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f22:	887b      	ldrh	r3, [r7, #2]
 8003f24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d00f      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x70>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f34:	d107      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x68>
 8003f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f4c:	e15b      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x82>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x82>
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f66:	e14e      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d003      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2205      	movs	r2, #5
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	887a      	ldrh	r2, [r7, #2]
 8003f9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d007      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd8:	d178      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_SPI_TransmitReceive+0x10a>
 8003fe2:	8b7b      	ldrh	r3, [r7, #26]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d166      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800400c:	e053      	b.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b02      	cmp	r3, #2
 800401a:	d11b      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x176>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x176>
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d113      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	881a      	ldrh	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d119      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x1b8>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d014      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	b292      	uxth	r2, r2
 8004078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004096:	f7fe f8ff 	bl	8002298 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d807      	bhi.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d003      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040b4:	e0a7      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1a6      	bne.n	800400e <HAL_SPI_TransmitReceive+0x130>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1a1      	bne.n	800400e <HAL_SPI_TransmitReceive+0x130>
 80040ca:	e07c      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_TransmitReceive+0x1fc>
 80040d4:	8b7b      	ldrh	r3, [r7, #26]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d16b      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004100:	e057      	b.n	80041b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	d11c      	bne.n	800414a <HAL_SPI_TransmitReceive+0x26c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d017      	beq.n	800414a <HAL_SPI_TransmitReceive+0x26c>
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d114      	bne.n	800414a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d119      	bne.n	800418c <HAL_SPI_TransmitReceive+0x2ae>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d014      	beq.n	800418c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004188:	2301      	movs	r3, #1
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800418c:	f7fe f884 	bl	8002298 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004198:	429a      	cmp	r2, r3
 800419a:	d803      	bhi.n	80041a4 <HAL_SPI_TransmitReceive+0x2c6>
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x2cc>
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041b0:	e029      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1a2      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x224>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d19d      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fb88 	bl	80048e0 <SPI_EndRxTxTransaction>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041e2:	e010      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	e000      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004204:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800421a:	4618      	mov	r0, r3
 800421c:	3730      	adds	r7, #48	; 0x30
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_SPI_Transmit_DMA+0x20>
 8004240:	2302      	movs	r3, #2
 8004242:	e09b      	b.n	800437c <HAL_SPI_Transmit_DMA+0x158>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d002      	beq.n	800425e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800425c:	e089      	b.n	8004372 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit_DMA+0x46>
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800426e:	e080      	b.n	8004372 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2203      	movs	r2, #3
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	88fa      	ldrh	r2, [r7, #6]
 800428e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b6:	d10f      	bne.n	80042d8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	4a29      	ldr	r2, [pc, #164]	; (8004384 <HAL_SPI_Transmit_DMA+0x160>)
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	4a28      	ldr	r2, [pc, #160]	; (8004388 <HAL_SPI_Transmit_DMA+0x164>)
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	4a27      	ldr	r2, [pc, #156]	; (800438c <HAL_SPI_Transmit_DMA+0x168>)
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	2200      	movs	r2, #0
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	4619      	mov	r1, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800430e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004310:	f7fe f958 	bl	80025c4 <HAL_DMA_Start_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0210 	orr.w	r2, r3, #16
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004332:	e01e      	b.n	8004372 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d007      	beq.n	8004352 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0220 	orr.w	r2, r2, #32
 8004360:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0202 	orr.w	r2, r2, #2
 8004370:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	080046a7 	.word	0x080046a7
 8004388:	08004601 	.word	0x08004601
 800438c:	080046c3 	.word	0x080046c3

08004390 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00f      	beq.n	80043c4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f96a 	bl	8002682 <HAL_DMA_Abort>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0210 	orr.w	r2, r3, #16
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00f      	beq.n	80043ec <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f956 	bl	8002682 <HAL_DMA_Abort>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f043 0210 	orr.w	r2, r3, #16
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0203 	bic.w	r2, r2, #3
 80043fa:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10f      	bne.n	8004454 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
    return;
 8004452:	e0be      	b.n	80045d2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_SPI_IRQHandler+0x66>
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	09db      	lsrs	r3, r3, #7
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
    return;
 8004474:	e0ad      	b.n	80045d2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_SPI_IRQHandler+0x80>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80a1 	beq.w	80045d2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 809a 	beq.w	80045d2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d023      	beq.n	80044f2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d011      	beq.n	80044da <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	e00b      	b.n	80044f2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]
        return;
 80044f0:	e06f      	b.n	80045d2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d04f      	beq.n	80045d0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800453e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_SPI_IRQHandler+0x14c>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d034      	beq.n	80045c6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0203 	bic.w	r2, r2, #3
 800456a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d011      	beq.n	8004598 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004578:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_SPI_IRQHandler+0x1c8>)
 800457a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe f8b9 	bl	80026f8 <HAL_DMA_Abort_IT>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	2b00      	cmp	r3, #0
 800459e:	d016      	beq.n	80045ce <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <HAL_SPI_IRQHandler+0x1c8>)
 80045a6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe f8a3 	bl	80026f8 <HAL_DMA_Abort_IT>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80045c4:	e003      	b.n	80045ce <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f811 	bl	80045ee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045cc:	e000      	b.n	80045d0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80045ce:	bf00      	nop
    return;
 80045d0:	bf00      	nop
  }
}
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	08004703 	.word	0x08004703

080045dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460e:	f7fd fe43 	bl	8002298 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b20      	cmp	r3, #32
 8004620:	d03b      	beq.n	800469a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0220 	bic.w	r2, r2, #32
 8004630:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0202 	bic.w	r2, r2, #2
 8004640:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	2164      	movs	r1, #100	; 0x64
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f000 f94a 	bl	80048e0 <SPI_EndRxTxTransaction>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff ffab 	bl	80045ee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004698:	e002      	b.n	80046a0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7fc fa54 	bl	8000b48 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ff91 	bl	80045dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0203 	bic.w	r2, r2, #3
 80046de:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	f043 0210 	orr.w	r2, r3, #16
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ff7a 	bl	80045ee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff ff66 	bl	80045ee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800473c:	f7fd fdac 	bl	8002298 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800474c:	f7fd fda4 	bl	8002298 <HAL_GetTick>
 8004750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	015b      	lsls	r3, r3, #5
 8004758:	0d1b      	lsrs	r3, r3, #20
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004762:	e054      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d050      	beq.n	800480e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800476c:	f7fd fd94 	bl	8002298 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	429a      	cmp	r2, r3
 800477a:	d902      	bls.n	8004782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d13d      	bne.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d111      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d004      	beq.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ae:	d107      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d10f      	bne.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e017      	b.n	800482e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3b01      	subs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d19b      	bne.n	8004764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000014 	.word	0x20000014

0800483c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004850:	d111      	bne.n	8004876 <SPI_EndRxTransaction+0x3a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485a:	d004      	beq.n	8004866 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d107      	bne.n	8004876 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487e:	d117      	bne.n	80048b0 <SPI_EndRxTransaction+0x74>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d112      	bne.n	80048b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	2101      	movs	r1, #1
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff ff49 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01a      	beq.n	80048d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e013      	b.n	80048d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff36 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e000      	b.n	80048d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff ff18 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	f043 0220 	orr.w	r2, r3, #32
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e000      	b.n	8004914 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e041      	b.n	80049b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fa00 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 fd2a 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e03a      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_TIM_Base_Start_IT+0x98>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <HAL_TIM_Base_Start_IT+0xa0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d010      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800

08004a60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e041      	b.n	8004af6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd f940 	bl	8001d0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 fc88 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e041      	b.n	8004b94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd f933 	bl	8001d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f000 fc39 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x24>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e022      	b.n	8004c06 <HAL_TIM_PWM_Start+0x6a>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d109      	bne.n	8004bda <HAL_TIM_PWM_Start+0x3e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e015      	b.n	8004c06 <HAL_TIM_PWM_Start+0x6a>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d109      	bne.n	8004bf4 <HAL_TIM_PWM_Start+0x58>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e008      	b.n	8004c06 <HAL_TIM_PWM_Start+0x6a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e05e      	b.n	8004ccc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x82>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	e013      	b.n	8004c46 <HAL_TIM_PWM_Start+0xaa>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0x92>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_PWM_Start+0xaa>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Start+0xa2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	e003      	b.n	8004c46 <HAL_TIM_PWM_Start+0xaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fe30 	bl	80058b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <HAL_TIM_PWM_Start+0x138>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_TIM_PWM_Start+0x138>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xfa>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xfa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <HAL_TIM_PWM_Start+0x13c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xfa>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <HAL_TIM_PWM_Start+0x140>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d111      	bne.n	8004cba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d010      	beq.n	8004cca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	e007      	b.n	8004cca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800

08004ce0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fdde 	bl	80058b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <HAL_TIM_PWM_Stop+0xc4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d117      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a1a      	ldr	r2, [r3, #32]
 8004d08:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x52>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	f240 4344 	movw	r3, #1092	; 0x444
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x52>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_TIM_PWM_Stop+0x82>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	f240 4344 	movw	r3, #1092	; 0x444
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_PWM_Stop+0x82>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Stop+0x92>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	e013      	b.n	8004d9a <HAL_TIM_PWM_Stop+0xba>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Stop+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	e00b      	b.n	8004d9a <HAL_TIM_PWM_Stop+0xba>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Stop+0xb2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	e003      	b.n	8004d9a <HAL_TIM_PWM_Stop+0xba>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40012c00 	.word	0x40012c00

08004da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d122      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d11b      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0202 	mvn.w	r2, #2
 8004dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fac7 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 faba 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fac9 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d122      	bne.n	8004e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d11b      	bne.n	8004e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0204 	mvn.w	r2, #4
 8004e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa9d 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fa90 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fa9f 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d122      	bne.n	8004eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d11b      	bne.n	8004eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0208 	mvn.w	r2, #8
 8004e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2204      	movs	r2, #4
 8004e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa73 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa66 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa75 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d122      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d11b      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0210 	mvn.w	r2, #16
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa49 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa3c 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa4b 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10e      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d107      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0201 	mvn.w	r2, #1
 8004f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fb fdf6 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b80      	cmp	r3, #128	; 0x80
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fd8a 	bl	8005a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa0f 	bl	80053a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0220 	mvn.w	r2, #32
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fd55 	bl	8005a5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e046      	b.n	8005060 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d839      	bhi.n	8005054 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800501d 	.word	0x0800501d
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08005055 	.word	0x08005055
 8004ff4:	08005055 	.word	0x08005055
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005055 	.word	0x08005055
 8005004:	08005055 	.word	0x08005055
 8005008:	08005039 	.word	0x08005039
 800500c:	08005055 	.word	0x08005055
 8005010:	08005055 	.word	0x08005055
 8005014:	08005055 	.word	0x08005055
 8005018:	08005047 	.word	0x08005047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fa28 	bl	8005478 <TIM_OC1_SetConfig>
      break;
 8005028:	e015      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fa87 	bl	8005544 <TIM_OC2_SetConfig>
      break;
 8005036:	e00e      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 faea 	bl	8005618 <TIM_OC3_SetConfig>
      break;
 8005044:	e007      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fb4d 	bl	80056ec <TIM_OC4_SetConfig>
      break;
 8005052:	e000      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800507e:	2302      	movs	r3, #2
 8005080:	e0ac      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f200 809f 	bhi.w	80051d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050cd 	.word	0x080050cd
 800509c:	080051d1 	.word	0x080051d1
 80050a0:	080051d1 	.word	0x080051d1
 80050a4:	080051d1 	.word	0x080051d1
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	080051d1 	.word	0x080051d1
 80050b0:	080051d1 	.word	0x080051d1
 80050b4:	080051d1 	.word	0x080051d1
 80050b8:	0800514f 	.word	0x0800514f
 80050bc:	080051d1 	.word	0x080051d1
 80050c0:	080051d1 	.word	0x080051d1
 80050c4:	080051d1 	.word	0x080051d1
 80050c8:	0800518f 	.word	0x0800518f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f9d0 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	619a      	str	r2, [r3, #24]
      break;
 800510a:	e062      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa16 	bl	8005544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
      break;
 800514c:	e041      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fa5f 	bl	8005618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0208 	orr.w	r2, r2, #8
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0204 	bic.w	r2, r2, #4
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	61da      	str	r2, [r3, #28]
      break;
 800518c:	e021      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 faa9 	bl	80056ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80051d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_ConfigClockSource+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0b3      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x180>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005222:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd0>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x168>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	f000 8085 	beq.w	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800524c:	2b70      	cmp	r3, #112	; 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xa2>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 8005254:	2b60      	cmp	r3, #96	; 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x116>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xf6>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x136>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f000 faee 	bl	8005876 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04e      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f000 fad7 	bl	8005876 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fa4e 	bl	8005788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	; 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 faa5 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fa6c 	bl	80057e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	; 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fa95 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 8005318:	e01b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	f000 fa2e 	bl	8005788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	; 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fa85 	bl	8005842 <TIM_ITRx_SetConfig>
      break;
 8005338:	e00b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 fa7c 	bl	8005842 <TIM_ITRx_SetConfig>
        break;
 800534a:	e002      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005350:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a29      	ldr	r2, [pc, #164]	; (800546c <TIM_Base_SetConfig+0xb8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0x30>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0x30>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a26      	ldr	r2, [pc, #152]	; (8005470 <TIM_Base_SetConfig+0xbc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0x30>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a25      	ldr	r2, [pc, #148]	; (8005474 <TIM_Base_SetConfig+0xc0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <TIM_Base_SetConfig+0xb8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_Base_SetConfig+0x62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d007      	beq.n	8005416 <TIM_Base_SetConfig+0x62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <TIM_Base_SetConfig+0xbc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_Base_SetConfig+0x62>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <TIM_Base_SetConfig+0xc0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d108      	bne.n	8005428 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a07      	ldr	r2, [pc, #28]	; (800546c <TIM_Base_SetConfig+0xb8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10c      	bne.n	80054ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0308 	bic.w	r3, r3, #8
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d111      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40012c00 	.word	0x40012c00

08005544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <TIM_OC2_SetConfig+0xd0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a14      	ldr	r2, [pc, #80]	; (8005614 <TIM_OC2_SetConfig+0xd0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d113      	bne.n	80055f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00

08005618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0303 	bic.w	r3, r3, #3
 800564e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <TIM_OC3_SetConfig+0xd0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d10d      	bne.n	8005692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <TIM_OC3_SetConfig+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d113      	bne.n	80056c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	621a      	str	r2, [r3, #32]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00

080056ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0f      	ldr	r2, [pc, #60]	; (8005784 <TIM_OC4_SetConfig+0x98>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d109      	bne.n	8005760 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	019b      	lsls	r3, r3, #6
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	40012c00 	.word	0x40012c00

08005788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 030a 	bic.w	r3, r3, #10
 80057c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f023 0210 	bic.w	r2, r3, #16
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800580e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	031b      	lsls	r3, r3, #12
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	f043 0307 	orr.w	r3, r3, #7
 8005864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	609a      	str	r2, [r3, #8]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005876:	b480      	push	{r7}
 8005878:	b087      	sub	sp, #28
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005890:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	021a      	lsls	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	431a      	orrs	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4313      	orrs	r3, r2
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	609a      	str	r2, [r3, #8]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2201      	movs	r2, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1a      	ldr	r2, [r3, #32]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	401a      	ands	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	431a      	orrs	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e046      	b.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d009      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10c      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	40012c00 	.word	0x40012c00
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800

080059b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e03d      	b.n	8005a50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a7e:	b084      	sub	sp, #16
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	f107 0014 	add.w	r0, r7, #20
 8005a8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	b004      	add	sp, #16
 8005a9c:	4770      	bx	lr

08005a9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aa6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005aaa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	4013      	ands	r3, r2
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005aea:	b084      	sub	sp, #16
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	f107 0014 	add.w	r0, r7, #20
 8005af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	b004      	add	sp, #16
 8005b28:	4770      	bx	lr

08005b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
	...

08005b40 <__errno>:
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <__errno+0x8>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000020 	.word	0x20000020

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	2600      	movs	r6, #0
 8005b50:	4d0c      	ldr	r5, [pc, #48]	; (8005b84 <__libc_init_array+0x38>)
 8005b52:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b54:	1b64      	subs	r4, r4, r5
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	f002 fefc 	bl	8008958 <_init>
 8005b60:	2600      	movs	r6, #0
 8005b62:	4d0a      	ldr	r5, [pc, #40]	; (8005b8c <__libc_init_array+0x40>)
 8005b64:	4c0a      	ldr	r4, [pc, #40]	; (8005b90 <__libc_init_array+0x44>)
 8005b66:	1b64      	subs	r4, r4, r5
 8005b68:	10a4      	asrs	r4, r4, #2
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	0800a86c 	.word	0x0800a86c
 8005b88:	0800a86c 	.word	0x0800a86c
 8005b8c:	0800a86c 	.word	0x0800a86c
 8005b90:	0800a870 	.word	0x0800a870

08005b94 <memset>:
 8005b94:	4603      	mov	r3, r0
 8005b96:	4402      	add	r2, r0
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memset+0xa>
 8005b9c:	4770      	bx	lr
 8005b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba2:	e7f9      	b.n	8005b98 <memset+0x4>

08005ba4 <__cvt>:
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005baa:	461f      	mov	r7, r3
 8005bac:	bfbb      	ittet	lt
 8005bae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005bb2:	461f      	movlt	r7, r3
 8005bb4:	2300      	movge	r3, #0
 8005bb6:	232d      	movlt	r3, #45	; 0x2d
 8005bb8:	b088      	sub	sp, #32
 8005bba:	4614      	mov	r4, r2
 8005bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005bc0:	7013      	strb	r3, [r2, #0]
 8005bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005bc8:	f023 0820 	bic.w	r8, r3, #32
 8005bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bd0:	d005      	beq.n	8005bde <__cvt+0x3a>
 8005bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bd6:	d100      	bne.n	8005bda <__cvt+0x36>
 8005bd8:	3501      	adds	r5, #1
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e000      	b.n	8005be0 <__cvt+0x3c>
 8005bde:	2303      	movs	r3, #3
 8005be0:	aa07      	add	r2, sp, #28
 8005be2:	9204      	str	r2, [sp, #16]
 8005be4:	aa06      	add	r2, sp, #24
 8005be6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bea:	e9cd 3500 	strd	r3, r5, [sp]
 8005bee:	4622      	mov	r2, r4
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	f000 fce5 	bl	80065c0 <_dtoa_r>
 8005bf6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	d102      	bne.n	8005c04 <__cvt+0x60>
 8005bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c00:	07db      	lsls	r3, r3, #31
 8005c02:	d522      	bpl.n	8005c4a <__cvt+0xa6>
 8005c04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c08:	eb06 0905 	add.w	r9, r6, r5
 8005c0c:	d110      	bne.n	8005c30 <__cvt+0x8c>
 8005c0e:	7833      	ldrb	r3, [r6, #0]
 8005c10:	2b30      	cmp	r3, #48	; 0x30
 8005c12:	d10a      	bne.n	8005c2a <__cvt+0x86>
 8005c14:	2200      	movs	r2, #0
 8005c16:	2300      	movs	r3, #0
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fa fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8005c20:	b918      	cbnz	r0, 8005c2a <__cvt+0x86>
 8005c22:	f1c5 0501 	rsb	r5, r5, #1
 8005c26:	f8ca 5000 	str.w	r5, [sl]
 8005c2a:	f8da 3000 	ldr.w	r3, [sl]
 8005c2e:	4499      	add	r9, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	4620      	mov	r0, r4
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa feb6 	bl	80009a8 <__aeabi_dcmpeq>
 8005c3c:	b108      	cbz	r0, 8005c42 <__cvt+0x9e>
 8005c3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c42:	2230      	movs	r2, #48	; 0x30
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	454b      	cmp	r3, r9
 8005c48:	d307      	bcc.n	8005c5a <__cvt+0xb6>
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	9b07      	ldr	r3, [sp, #28]
 8005c4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c50:	1b9b      	subs	r3, r3, r6
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	b008      	add	sp, #32
 8005c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5a:	1c59      	adds	r1, r3, #1
 8005c5c:	9107      	str	r1, [sp, #28]
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e7f0      	b.n	8005c44 <__cvt+0xa0>

08005c62 <__exponent>:
 8005c62:	4603      	mov	r3, r0
 8005c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c66:	2900      	cmp	r1, #0
 8005c68:	f803 2b02 	strb.w	r2, [r3], #2
 8005c6c:	bfb6      	itet	lt
 8005c6e:	222d      	movlt	r2, #45	; 0x2d
 8005c70:	222b      	movge	r2, #43	; 0x2b
 8005c72:	4249      	neglt	r1, r1
 8005c74:	2909      	cmp	r1, #9
 8005c76:	7042      	strb	r2, [r0, #1]
 8005c78:	dd2b      	ble.n	8005cd2 <__exponent+0x70>
 8005c7a:	f10d 0407 	add.w	r4, sp, #7
 8005c7e:	46a4      	mov	ip, r4
 8005c80:	270a      	movs	r7, #10
 8005c82:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c86:	460a      	mov	r2, r1
 8005c88:	46a6      	mov	lr, r4
 8005c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c8e:	2a63      	cmp	r2, #99	; 0x63
 8005c90:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005c94:	4631      	mov	r1, r6
 8005c96:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c9e:	dcf0      	bgt.n	8005c82 <__exponent+0x20>
 8005ca0:	3130      	adds	r1, #48	; 0x30
 8005ca2:	f1ae 0502 	sub.w	r5, lr, #2
 8005ca6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005caa:	4629      	mov	r1, r5
 8005cac:	1c44      	adds	r4, r0, #1
 8005cae:	4561      	cmp	r1, ip
 8005cb0:	d30a      	bcc.n	8005cc8 <__exponent+0x66>
 8005cb2:	f10d 0209 	add.w	r2, sp, #9
 8005cb6:	eba2 020e 	sub.w	r2, r2, lr
 8005cba:	4565      	cmp	r5, ip
 8005cbc:	bf88      	it	hi
 8005cbe:	2200      	movhi	r2, #0
 8005cc0:	4413      	add	r3, r2
 8005cc2:	1a18      	subs	r0, r3, r0
 8005cc4:	b003      	add	sp, #12
 8005cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ccc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cd0:	e7ed      	b.n	8005cae <__exponent+0x4c>
 8005cd2:	2330      	movs	r3, #48	; 0x30
 8005cd4:	3130      	adds	r1, #48	; 0x30
 8005cd6:	7083      	strb	r3, [r0, #2]
 8005cd8:	70c1      	strb	r1, [r0, #3]
 8005cda:	1d03      	adds	r3, r0, #4
 8005cdc:	e7f1      	b.n	8005cc2 <__exponent+0x60>
	...

08005ce0 <_printf_float>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	b091      	sub	sp, #68	; 0x44
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005cec:	4616      	mov	r6, r2
 8005cee:	461f      	mov	r7, r3
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	f001 fa53 	bl	800719c <_localeconv_r>
 8005cf6:	6803      	ldr	r3, [r0, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	f7fa fa28 	bl	8000150 <strlen>
 8005d00:	2300      	movs	r3, #0
 8005d02:	930e      	str	r3, [sp, #56]	; 0x38
 8005d04:	f8d8 3000 	ldr.w	r3, [r8]
 8005d08:	900a      	str	r0, [sp, #40]	; 0x28
 8005d0a:	3307      	adds	r3, #7
 8005d0c:	f023 0307 	bic.w	r3, r3, #7
 8005d10:	f103 0208 	add.w	r2, r3, #8
 8005d14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d18:	f8d4 b000 	ldr.w	fp, [r4]
 8005d1c:	f8c8 2000 	str.w	r2, [r8]
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005d2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295
 8005d36:	4640      	mov	r0, r8
 8005d38:	4b9c      	ldr	r3, [pc, #624]	; (8005fac <_printf_float+0x2cc>)
 8005d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d3c:	f7fa fe66 	bl	8000a0c <__aeabi_dcmpun>
 8005d40:	bb70      	cbnz	r0, 8005da0 <_printf_float+0xc0>
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	4640      	mov	r0, r8
 8005d48:	4b98      	ldr	r3, [pc, #608]	; (8005fac <_printf_float+0x2cc>)
 8005d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d4c:	f7fa fe40 	bl	80009d0 <__aeabi_dcmple>
 8005d50:	bb30      	cbnz	r0, 8005da0 <_printf_float+0xc0>
 8005d52:	2200      	movs	r2, #0
 8005d54:	2300      	movs	r3, #0
 8005d56:	4640      	mov	r0, r8
 8005d58:	4651      	mov	r1, sl
 8005d5a:	f7fa fe2f 	bl	80009bc <__aeabi_dcmplt>
 8005d5e:	b110      	cbz	r0, 8005d66 <_printf_float+0x86>
 8005d60:	232d      	movs	r3, #45	; 0x2d
 8005d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d66:	4b92      	ldr	r3, [pc, #584]	; (8005fb0 <_printf_float+0x2d0>)
 8005d68:	4892      	ldr	r0, [pc, #584]	; (8005fb4 <_printf_float+0x2d4>)
 8005d6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d6e:	bf94      	ite	ls
 8005d70:	4698      	movls	r8, r3
 8005d72:	4680      	movhi	r8, r0
 8005d74:	2303      	movs	r3, #3
 8005d76:	f04f 0a00 	mov.w	sl, #0
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	f02b 0304 	bic.w	r3, fp, #4
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	4633      	mov	r3, r6
 8005d84:	4621      	mov	r1, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	9700      	str	r7, [sp, #0]
 8005d8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d8c:	f000 f9d4 	bl	8006138 <_printf_common>
 8005d90:	3001      	adds	r0, #1
 8005d92:	f040 8090 	bne.w	8005eb6 <_printf_float+0x1d6>
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	b011      	add	sp, #68	; 0x44
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	4642      	mov	r2, r8
 8005da2:	4653      	mov	r3, sl
 8005da4:	4640      	mov	r0, r8
 8005da6:	4651      	mov	r1, sl
 8005da8:	f7fa fe30 	bl	8000a0c <__aeabi_dcmpun>
 8005dac:	b148      	cbz	r0, 8005dc2 <_printf_float+0xe2>
 8005dae:	f1ba 0f00 	cmp.w	sl, #0
 8005db2:	bfb8      	it	lt
 8005db4:	232d      	movlt	r3, #45	; 0x2d
 8005db6:	4880      	ldr	r0, [pc, #512]	; (8005fb8 <_printf_float+0x2d8>)
 8005db8:	bfb8      	it	lt
 8005dba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dbe:	4b7f      	ldr	r3, [pc, #508]	; (8005fbc <_printf_float+0x2dc>)
 8005dc0:	e7d3      	b.n	8005d6a <_printf_float+0x8a>
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	d142      	bne.n	8005e52 <_printf_float+0x172>
 8005dcc:	2306      	movs	r3, #6
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	9206      	str	r2, [sp, #24]
 8005dd4:	aa0e      	add	r2, sp, #56	; 0x38
 8005dd6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005dda:	aa0d      	add	r2, sp, #52	; 0x34
 8005ddc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005de0:	9203      	str	r2, [sp, #12]
 8005de2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005de6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	4642      	mov	r2, r8
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4628      	mov	r0, r5
 8005df4:	4653      	mov	r3, sl
 8005df6:	910b      	str	r1, [sp, #44]	; 0x2c
 8005df8:	f7ff fed4 	bl	8005ba4 <__cvt>
 8005dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dfe:	4680      	mov	r8, r0
 8005e00:	2947      	cmp	r1, #71	; 0x47
 8005e02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e04:	d108      	bne.n	8005e18 <_printf_float+0x138>
 8005e06:	1cc8      	adds	r0, r1, #3
 8005e08:	db02      	blt.n	8005e10 <_printf_float+0x130>
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	dd40      	ble.n	8005e92 <_printf_float+0x1b2>
 8005e10:	f1a9 0902 	sub.w	r9, r9, #2
 8005e14:	fa5f f989 	uxtb.w	r9, r9
 8005e18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e1c:	d81f      	bhi.n	8005e5e <_printf_float+0x17e>
 8005e1e:	464a      	mov	r2, r9
 8005e20:	3901      	subs	r1, #1
 8005e22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e26:	910d      	str	r1, [sp, #52]	; 0x34
 8005e28:	f7ff ff1b 	bl	8005c62 <__exponent>
 8005e2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e2e:	4682      	mov	sl, r0
 8005e30:	1813      	adds	r3, r2, r0
 8005e32:	2a01      	cmp	r2, #1
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	dc02      	bgt.n	8005e3e <_printf_float+0x15e>
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	07d2      	lsls	r2, r2, #31
 8005e3c:	d501      	bpl.n	8005e42 <_printf_float+0x162>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d09b      	beq.n	8005d82 <_printf_float+0xa2>
 8005e4a:	232d      	movs	r3, #45	; 0x2d
 8005e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e50:	e797      	b.n	8005d82 <_printf_float+0xa2>
 8005e52:	2947      	cmp	r1, #71	; 0x47
 8005e54:	d1bc      	bne.n	8005dd0 <_printf_float+0xf0>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1ba      	bne.n	8005dd0 <_printf_float+0xf0>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e7b7      	b.n	8005dce <_printf_float+0xee>
 8005e5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e62:	d118      	bne.n	8005e96 <_printf_float+0x1b6>
 8005e64:	2900      	cmp	r1, #0
 8005e66:	6863      	ldr	r3, [r4, #4]
 8005e68:	dd0b      	ble.n	8005e82 <_printf_float+0x1a2>
 8005e6a:	6121      	str	r1, [r4, #16]
 8005e6c:	b913      	cbnz	r3, 8005e74 <_printf_float+0x194>
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	07d0      	lsls	r0, r2, #31
 8005e72:	d502      	bpl.n	8005e7a <_printf_float+0x19a>
 8005e74:	3301      	adds	r3, #1
 8005e76:	440b      	add	r3, r1
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	f04f 0a00 	mov.w	sl, #0
 8005e7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e80:	e7df      	b.n	8005e42 <_printf_float+0x162>
 8005e82:	b913      	cbnz	r3, 8005e8a <_printf_float+0x1aa>
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	07d2      	lsls	r2, r2, #31
 8005e88:	d501      	bpl.n	8005e8e <_printf_float+0x1ae>
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	e7f4      	b.n	8005e78 <_printf_float+0x198>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e7f2      	b.n	8005e78 <_printf_float+0x198>
 8005e92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	db05      	blt.n	8005ea8 <_printf_float+0x1c8>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	6121      	str	r1, [r4, #16]
 8005ea0:	07d8      	lsls	r0, r3, #31
 8005ea2:	d5ea      	bpl.n	8005e7a <_printf_float+0x19a>
 8005ea4:	1c4b      	adds	r3, r1, #1
 8005ea6:	e7e7      	b.n	8005e78 <_printf_float+0x198>
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	bfcc      	ite	gt
 8005eac:	2201      	movgt	r2, #1
 8005eae:	f1c1 0202 	rsble	r2, r1, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	e7e0      	b.n	8005e78 <_printf_float+0x198>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	055a      	lsls	r2, r3, #21
 8005eba:	d407      	bmi.n	8005ecc <_printf_float+0x1ec>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d12b      	bne.n	8005f22 <_printf_float+0x242>
 8005eca:	e764      	b.n	8005d96 <_printf_float+0xb6>
 8005ecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ed0:	f240 80dd 	bls.w	800608e <_printf_float+0x3ae>
 8005ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	f7fa fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d033      	beq.n	8005f4c <_printf_float+0x26c>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	4a35      	ldr	r2, [pc, #212]	; (8005fc0 <_printf_float+0x2e0>)
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f af51 	beq.w	8005d96 <_printf_float+0xb6>
 8005ef4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	db02      	blt.n	8005f02 <_printf_float+0x222>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	07d8      	lsls	r0, r3, #31
 8005f00:	d50f      	bpl.n	8005f22 <_printf_float+0x242>
 8005f02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f43f af42 	beq.w	8005d96 <_printf_float+0xb6>
 8005f12:	f04f 0800 	mov.w	r8, #0
 8005f16:	f104 091a 	add.w	r9, r4, #26
 8005f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	4543      	cmp	r3, r8
 8005f20:	dc09      	bgt.n	8005f36 <_printf_float+0x256>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	079b      	lsls	r3, r3, #30
 8005f26:	f100 8102 	bmi.w	800612e <_printf_float+0x44e>
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f2e:	4298      	cmp	r0, r3
 8005f30:	bfb8      	it	lt
 8005f32:	4618      	movlt	r0, r3
 8005f34:	e731      	b.n	8005d9a <_printf_float+0xba>
 8005f36:	2301      	movs	r3, #1
 8005f38:	464a      	mov	r2, r9
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b8      	blx	r7
 8005f40:	3001      	adds	r0, #1
 8005f42:	f43f af28 	beq.w	8005d96 <_printf_float+0xb6>
 8005f46:	f108 0801 	add.w	r8, r8, #1
 8005f4a:	e7e6      	b.n	8005f1a <_printf_float+0x23a>
 8005f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dc38      	bgt.n	8005fc4 <_printf_float+0x2e4>
 8005f52:	2301      	movs	r3, #1
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <_printf_float+0x2e0>)
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f af1a 	beq.w	8005d96 <_printf_float+0xb6>
 8005f62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f66:	4313      	orrs	r3, r2
 8005f68:	d102      	bne.n	8005f70 <_printf_float+0x290>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	d5d8      	bpl.n	8005f22 <_printf_float+0x242>
 8005f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f af0b 	beq.w	8005d96 <_printf_float+0xb6>
 8005f80:	f04f 0900 	mov.w	r9, #0
 8005f84:	f104 0a1a 	add.w	sl, r4, #26
 8005f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f8a:	425b      	negs	r3, r3
 8005f8c:	454b      	cmp	r3, r9
 8005f8e:	dc01      	bgt.n	8005f94 <_printf_float+0x2b4>
 8005f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f92:	e794      	b.n	8005ebe <_printf_float+0x1de>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4652      	mov	r2, sl
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f aef9 	beq.w	8005d96 <_printf_float+0xb6>
 8005fa4:	f109 0901 	add.w	r9, r9, #1
 8005fa8:	e7ee      	b.n	8005f88 <_printf_float+0x2a8>
 8005faa:	bf00      	nop
 8005fac:	7fefffff 	.word	0x7fefffff
 8005fb0:	0800a494 	.word	0x0800a494
 8005fb4:	0800a498 	.word	0x0800a498
 8005fb8:	0800a4a0 	.word	0x0800a4a0
 8005fbc:	0800a49c 	.word	0x0800a49c
 8005fc0:	0800a4a4 	.word	0x0800a4a4
 8005fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	bfa8      	it	ge
 8005fcc:	461a      	movge	r2, r3
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	4691      	mov	r9, r2
 8005fd2:	dc37      	bgt.n	8006044 <_printf_float+0x364>
 8005fd4:	f04f 0b00 	mov.w	fp, #0
 8005fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fdc:	f104 021a 	add.w	r2, r4, #26
 8005fe0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fe4:	ebaa 0309 	sub.w	r3, sl, r9
 8005fe8:	455b      	cmp	r3, fp
 8005fea:	dc33      	bgt.n	8006054 <_printf_float+0x374>
 8005fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	db3b      	blt.n	800606c <_printf_float+0x38c>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	07da      	lsls	r2, r3, #31
 8005ff8:	d438      	bmi.n	800606c <_printf_float+0x38c>
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ffc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ffe:	eba3 020a 	sub.w	r2, r3, sl
 8006002:	eba3 0901 	sub.w	r9, r3, r1
 8006006:	4591      	cmp	r9, r2
 8006008:	bfa8      	it	ge
 800600a:	4691      	movge	r9, r2
 800600c:	f1b9 0f00 	cmp.w	r9, #0
 8006010:	dc34      	bgt.n	800607c <_printf_float+0x39c>
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800601a:	f104 0a1a 	add.w	sl, r4, #26
 800601e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	eba3 0309 	sub.w	r3, r3, r9
 8006028:	4543      	cmp	r3, r8
 800602a:	f77f af7a 	ble.w	8005f22 <_printf_float+0x242>
 800602e:	2301      	movs	r3, #1
 8006030:	4652      	mov	r2, sl
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f aeac 	beq.w	8005d96 <_printf_float+0xb6>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	e7ec      	b.n	800601e <_printf_float+0x33e>
 8006044:	4613      	mov	r3, r2
 8006046:	4631      	mov	r1, r6
 8006048:	4642      	mov	r2, r8
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	d1c0      	bne.n	8005fd4 <_printf_float+0x2f4>
 8006052:	e6a0      	b.n	8005d96 <_printf_float+0xb6>
 8006054:	2301      	movs	r3, #1
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	920b      	str	r2, [sp, #44]	; 0x2c
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f ae99 	beq.w	8005d96 <_printf_float+0xb6>
 8006064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006066:	f10b 0b01 	add.w	fp, fp, #1
 800606a:	e7b9      	b.n	8005fe0 <_printf_float+0x300>
 800606c:	4631      	mov	r1, r6
 800606e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	d1bf      	bne.n	8005ffa <_printf_float+0x31a>
 800607a:	e68c      	b.n	8005d96 <_printf_float+0xb6>
 800607c:	464b      	mov	r3, r9
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	eb08 020a 	add.w	r2, r8, sl
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	d1c2      	bne.n	8006012 <_printf_float+0x332>
 800608c:	e683      	b.n	8005d96 <_printf_float+0xb6>
 800608e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006090:	2a01      	cmp	r2, #1
 8006092:	dc01      	bgt.n	8006098 <_printf_float+0x3b8>
 8006094:	07db      	lsls	r3, r3, #31
 8006096:	d537      	bpl.n	8006108 <_printf_float+0x428>
 8006098:	2301      	movs	r3, #1
 800609a:	4642      	mov	r2, r8
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f ae77 	beq.w	8005d96 <_printf_float+0xb6>
 80060a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f ae6f 	beq.w	8005d96 <_printf_float+0xb6>
 80060b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060bc:	2200      	movs	r2, #0
 80060be:	2300      	movs	r3, #0
 80060c0:	f7fa fc72 	bl	80009a8 <__aeabi_dcmpeq>
 80060c4:	b9d8      	cbnz	r0, 80060fe <_printf_float+0x41e>
 80060c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c8:	f108 0201 	add.w	r2, r8, #1
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	d10e      	bne.n	80060f6 <_printf_float+0x416>
 80060d8:	e65d      	b.n	8005d96 <_printf_float+0xb6>
 80060da:	2301      	movs	r3, #1
 80060dc:	464a      	mov	r2, r9
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	f43f ae56 	beq.w	8005d96 <_printf_float+0xb6>
 80060ea:	f108 0801 	add.w	r8, r8, #1
 80060ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060f0:	3b01      	subs	r3, #1
 80060f2:	4543      	cmp	r3, r8
 80060f4:	dcf1      	bgt.n	80060da <_printf_float+0x3fa>
 80060f6:	4653      	mov	r3, sl
 80060f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060fc:	e6e0      	b.n	8005ec0 <_printf_float+0x1e0>
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	f104 091a 	add.w	r9, r4, #26
 8006106:	e7f2      	b.n	80060ee <_printf_float+0x40e>
 8006108:	2301      	movs	r3, #1
 800610a:	4642      	mov	r2, r8
 800610c:	e7df      	b.n	80060ce <_printf_float+0x3ee>
 800610e:	2301      	movs	r3, #1
 8006110:	464a      	mov	r2, r9
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f ae3c 	beq.w	8005d96 <_printf_float+0xb6>
 800611e:	f108 0801 	add.w	r8, r8, #1
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006126:	1a5b      	subs	r3, r3, r1
 8006128:	4543      	cmp	r3, r8
 800612a:	dcf0      	bgt.n	800610e <_printf_float+0x42e>
 800612c:	e6fd      	b.n	8005f2a <_printf_float+0x24a>
 800612e:	f04f 0800 	mov.w	r8, #0
 8006132:	f104 0919 	add.w	r9, r4, #25
 8006136:	e7f4      	b.n	8006122 <_printf_float+0x442>

08006138 <_printf_common>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	4616      	mov	r6, r2
 800613e:	4699      	mov	r9, r3
 8006140:	688a      	ldr	r2, [r1, #8]
 8006142:	690b      	ldr	r3, [r1, #16]
 8006144:	4607      	mov	r7, r0
 8006146:	4293      	cmp	r3, r2
 8006148:	bfb8      	it	lt
 800614a:	4613      	movlt	r3, r2
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006152:	460c      	mov	r4, r1
 8006154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006158:	b10a      	cbz	r2, 800615e <_printf_common+0x26>
 800615a:	3301      	adds	r3, #1
 800615c:	6033      	str	r3, [r6, #0]
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	0699      	lsls	r1, r3, #26
 8006162:	bf42      	ittt	mi
 8006164:	6833      	ldrmi	r3, [r6, #0]
 8006166:	3302      	addmi	r3, #2
 8006168:	6033      	strmi	r3, [r6, #0]
 800616a:	6825      	ldr	r5, [r4, #0]
 800616c:	f015 0506 	ands.w	r5, r5, #6
 8006170:	d106      	bne.n	8006180 <_printf_common+0x48>
 8006172:	f104 0a19 	add.w	sl, r4, #25
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	6832      	ldr	r2, [r6, #0]
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	42ab      	cmp	r3, r5
 800617e:	dc28      	bgt.n	80061d2 <_printf_common+0x9a>
 8006180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006184:	1e13      	subs	r3, r2, #0
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	bf18      	it	ne
 800618a:	2301      	movne	r3, #1
 800618c:	0692      	lsls	r2, r2, #26
 800618e:	d42d      	bmi.n	80061ec <_printf_common+0xb4>
 8006190:	4649      	mov	r1, r9
 8006192:	4638      	mov	r0, r7
 8006194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006198:	47c0      	blx	r8
 800619a:	3001      	adds	r0, #1
 800619c:	d020      	beq.n	80061e0 <_printf_common+0xa8>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	68e5      	ldr	r5, [r4, #12]
 80061a2:	f003 0306 	and.w	r3, r3, #6
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	bf18      	it	ne
 80061aa:	2500      	movne	r5, #0
 80061ac:	6832      	ldr	r2, [r6, #0]
 80061ae:	f04f 0600 	mov.w	r6, #0
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	bf08      	it	eq
 80061b6:	1aad      	subeq	r5, r5, r2
 80061b8:	6922      	ldr	r2, [r4, #16]
 80061ba:	bf08      	it	eq
 80061bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061c0:	4293      	cmp	r3, r2
 80061c2:	bfc4      	itt	gt
 80061c4:	1a9b      	subgt	r3, r3, r2
 80061c6:	18ed      	addgt	r5, r5, r3
 80061c8:	341a      	adds	r4, #26
 80061ca:	42b5      	cmp	r5, r6
 80061cc:	d11a      	bne.n	8006204 <_printf_common+0xcc>
 80061ce:	2000      	movs	r0, #0
 80061d0:	e008      	b.n	80061e4 <_printf_common+0xac>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4652      	mov	r2, sl
 80061d6:	4649      	mov	r1, r9
 80061d8:	4638      	mov	r0, r7
 80061da:	47c0      	blx	r8
 80061dc:	3001      	adds	r0, #1
 80061de:	d103      	bne.n	80061e8 <_printf_common+0xb0>
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	3501      	adds	r5, #1
 80061ea:	e7c4      	b.n	8006176 <_printf_common+0x3e>
 80061ec:	2030      	movs	r0, #48	; 0x30
 80061ee:	18e1      	adds	r1, r4, r3
 80061f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061fa:	4422      	add	r2, r4
 80061fc:	3302      	adds	r3, #2
 80061fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006202:	e7c5      	b.n	8006190 <_printf_common+0x58>
 8006204:	2301      	movs	r3, #1
 8006206:	4622      	mov	r2, r4
 8006208:	4649      	mov	r1, r9
 800620a:	4638      	mov	r0, r7
 800620c:	47c0      	blx	r8
 800620e:	3001      	adds	r0, #1
 8006210:	d0e6      	beq.n	80061e0 <_printf_common+0xa8>
 8006212:	3601      	adds	r6, #1
 8006214:	e7d9      	b.n	80061ca <_printf_common+0x92>
	...

08006218 <_printf_i>:
 8006218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	7e0f      	ldrb	r7, [r1, #24]
 800621e:	4691      	mov	r9, r2
 8006220:	2f78      	cmp	r7, #120	; 0x78
 8006222:	4680      	mov	r8, r0
 8006224:	460c      	mov	r4, r1
 8006226:	469a      	mov	sl, r3
 8006228:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800622a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800622e:	d807      	bhi.n	8006240 <_printf_i+0x28>
 8006230:	2f62      	cmp	r7, #98	; 0x62
 8006232:	d80a      	bhi.n	800624a <_printf_i+0x32>
 8006234:	2f00      	cmp	r7, #0
 8006236:	f000 80d9 	beq.w	80063ec <_printf_i+0x1d4>
 800623a:	2f58      	cmp	r7, #88	; 0x58
 800623c:	f000 80a4 	beq.w	8006388 <_printf_i+0x170>
 8006240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006248:	e03a      	b.n	80062c0 <_printf_i+0xa8>
 800624a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800624e:	2b15      	cmp	r3, #21
 8006250:	d8f6      	bhi.n	8006240 <_printf_i+0x28>
 8006252:	a101      	add	r1, pc, #4	; (adr r1, 8006258 <_printf_i+0x40>)
 8006254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062c5 	.word	0x080062c5
 8006260:	08006241 	.word	0x08006241
 8006264:	08006241 	.word	0x08006241
 8006268:	08006241 	.word	0x08006241
 800626c:	08006241 	.word	0x08006241
 8006270:	080062c5 	.word	0x080062c5
 8006274:	08006241 	.word	0x08006241
 8006278:	08006241 	.word	0x08006241
 800627c:	08006241 	.word	0x08006241
 8006280:	08006241 	.word	0x08006241
 8006284:	080063d3 	.word	0x080063d3
 8006288:	080062f5 	.word	0x080062f5
 800628c:	080063b5 	.word	0x080063b5
 8006290:	08006241 	.word	0x08006241
 8006294:	08006241 	.word	0x08006241
 8006298:	080063f5 	.word	0x080063f5
 800629c:	08006241 	.word	0x08006241
 80062a0:	080062f5 	.word	0x080062f5
 80062a4:	08006241 	.word	0x08006241
 80062a8:	08006241 	.word	0x08006241
 80062ac:	080063bd 	.word	0x080063bd
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	1d1a      	adds	r2, r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0a4      	b.n	800640e <_printf_i+0x1f6>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	6829      	ldr	r1, [r5, #0]
 80062c8:	0606      	lsls	r6, r0, #24
 80062ca:	f101 0304 	add.w	r3, r1, #4
 80062ce:	d50a      	bpl.n	80062e6 <_printf_i+0xce>
 80062d0:	680e      	ldr	r6, [r1, #0]
 80062d2:	602b      	str	r3, [r5, #0]
 80062d4:	2e00      	cmp	r6, #0
 80062d6:	da03      	bge.n	80062e0 <_printf_i+0xc8>
 80062d8:	232d      	movs	r3, #45	; 0x2d
 80062da:	4276      	negs	r6, r6
 80062dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e0:	230a      	movs	r3, #10
 80062e2:	485e      	ldr	r0, [pc, #376]	; (800645c <_printf_i+0x244>)
 80062e4:	e019      	b.n	800631a <_printf_i+0x102>
 80062e6:	680e      	ldr	r6, [r1, #0]
 80062e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	bf18      	it	ne
 80062f0:	b236      	sxthne	r6, r6
 80062f2:	e7ef      	b.n	80062d4 <_printf_i+0xbc>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	6820      	ldr	r0, [r4, #0]
 80062f8:	1d19      	adds	r1, r3, #4
 80062fa:	6029      	str	r1, [r5, #0]
 80062fc:	0601      	lsls	r1, r0, #24
 80062fe:	d501      	bpl.n	8006304 <_printf_i+0xec>
 8006300:	681e      	ldr	r6, [r3, #0]
 8006302:	e002      	b.n	800630a <_printf_i+0xf2>
 8006304:	0646      	lsls	r6, r0, #25
 8006306:	d5fb      	bpl.n	8006300 <_printf_i+0xe8>
 8006308:	881e      	ldrh	r6, [r3, #0]
 800630a:	2f6f      	cmp	r7, #111	; 0x6f
 800630c:	bf0c      	ite	eq
 800630e:	2308      	moveq	r3, #8
 8006310:	230a      	movne	r3, #10
 8006312:	4852      	ldr	r0, [pc, #328]	; (800645c <_printf_i+0x244>)
 8006314:	2100      	movs	r1, #0
 8006316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800631a:	6865      	ldr	r5, [r4, #4]
 800631c:	2d00      	cmp	r5, #0
 800631e:	bfa8      	it	ge
 8006320:	6821      	ldrge	r1, [r4, #0]
 8006322:	60a5      	str	r5, [r4, #8]
 8006324:	bfa4      	itt	ge
 8006326:	f021 0104 	bicge.w	r1, r1, #4
 800632a:	6021      	strge	r1, [r4, #0]
 800632c:	b90e      	cbnz	r6, 8006332 <_printf_i+0x11a>
 800632e:	2d00      	cmp	r5, #0
 8006330:	d04d      	beq.n	80063ce <_printf_i+0x1b6>
 8006332:	4615      	mov	r5, r2
 8006334:	fbb6 f1f3 	udiv	r1, r6, r3
 8006338:	fb03 6711 	mls	r7, r3, r1, r6
 800633c:	5dc7      	ldrb	r7, [r0, r7]
 800633e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006342:	4637      	mov	r7, r6
 8006344:	42bb      	cmp	r3, r7
 8006346:	460e      	mov	r6, r1
 8006348:	d9f4      	bls.n	8006334 <_printf_i+0x11c>
 800634a:	2b08      	cmp	r3, #8
 800634c:	d10b      	bne.n	8006366 <_printf_i+0x14e>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	07de      	lsls	r6, r3, #31
 8006352:	d508      	bpl.n	8006366 <_printf_i+0x14e>
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	6861      	ldr	r1, [r4, #4]
 8006358:	4299      	cmp	r1, r3
 800635a:	bfde      	ittt	le
 800635c:	2330      	movle	r3, #48	; 0x30
 800635e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006362:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006366:	1b52      	subs	r2, r2, r5
 8006368:	6122      	str	r2, [r4, #16]
 800636a:	464b      	mov	r3, r9
 800636c:	4621      	mov	r1, r4
 800636e:	4640      	mov	r0, r8
 8006370:	f8cd a000 	str.w	sl, [sp]
 8006374:	aa03      	add	r2, sp, #12
 8006376:	f7ff fedf 	bl	8006138 <_printf_common>
 800637a:	3001      	adds	r0, #1
 800637c:	d14c      	bne.n	8006418 <_printf_i+0x200>
 800637e:	f04f 30ff 	mov.w	r0, #4294967295
 8006382:	b004      	add	sp, #16
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	4834      	ldr	r0, [pc, #208]	; (800645c <_printf_i+0x244>)
 800638a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800638e:	6829      	ldr	r1, [r5, #0]
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f851 6b04 	ldr.w	r6, [r1], #4
 8006396:	6029      	str	r1, [r5, #0]
 8006398:	061d      	lsls	r5, r3, #24
 800639a:	d514      	bpl.n	80063c6 <_printf_i+0x1ae>
 800639c:	07df      	lsls	r7, r3, #31
 800639e:	bf44      	itt	mi
 80063a0:	f043 0320 	orrmi.w	r3, r3, #32
 80063a4:	6023      	strmi	r3, [r4, #0]
 80063a6:	b91e      	cbnz	r6, 80063b0 <_printf_i+0x198>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	f023 0320 	bic.w	r3, r3, #32
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	2310      	movs	r3, #16
 80063b2:	e7af      	b.n	8006314 <_printf_i+0xfc>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	f043 0320 	orr.w	r3, r3, #32
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	2378      	movs	r3, #120	; 0x78
 80063be:	4828      	ldr	r0, [pc, #160]	; (8006460 <_printf_i+0x248>)
 80063c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063c4:	e7e3      	b.n	800638e <_printf_i+0x176>
 80063c6:	0659      	lsls	r1, r3, #25
 80063c8:	bf48      	it	mi
 80063ca:	b2b6      	uxthmi	r6, r6
 80063cc:	e7e6      	b.n	800639c <_printf_i+0x184>
 80063ce:	4615      	mov	r5, r2
 80063d0:	e7bb      	b.n	800634a <_printf_i+0x132>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	6826      	ldr	r6, [r4, #0]
 80063d6:	1d18      	adds	r0, r3, #4
 80063d8:	6961      	ldr	r1, [r4, #20]
 80063da:	6028      	str	r0, [r5, #0]
 80063dc:	0635      	lsls	r5, r6, #24
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	d501      	bpl.n	80063e6 <_printf_i+0x1ce>
 80063e2:	6019      	str	r1, [r3, #0]
 80063e4:	e002      	b.n	80063ec <_printf_i+0x1d4>
 80063e6:	0670      	lsls	r0, r6, #25
 80063e8:	d5fb      	bpl.n	80063e2 <_printf_i+0x1ca>
 80063ea:	8019      	strh	r1, [r3, #0]
 80063ec:	2300      	movs	r3, #0
 80063ee:	4615      	mov	r5, r2
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	e7ba      	b.n	800636a <_printf_i+0x152>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	2100      	movs	r1, #0
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fed7 	bl	80071b4 <memchr>
 8006406:	b108      	cbz	r0, 800640c <_printf_i+0x1f4>
 8006408:	1b40      	subs	r0, r0, r5
 800640a:	6060      	str	r0, [r4, #4]
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2300      	movs	r3, #0
 8006412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006416:	e7a8      	b.n	800636a <_printf_i+0x152>
 8006418:	462a      	mov	r2, r5
 800641a:	4649      	mov	r1, r9
 800641c:	4640      	mov	r0, r8
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	47d0      	blx	sl
 8006422:	3001      	adds	r0, #1
 8006424:	d0ab      	beq.n	800637e <_printf_i+0x166>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	079b      	lsls	r3, r3, #30
 800642a:	d413      	bmi.n	8006454 <_printf_i+0x23c>
 800642c:	68e0      	ldr	r0, [r4, #12]
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	4298      	cmp	r0, r3
 8006432:	bfb8      	it	lt
 8006434:	4618      	movlt	r0, r3
 8006436:	e7a4      	b.n	8006382 <_printf_i+0x16a>
 8006438:	2301      	movs	r3, #1
 800643a:	4632      	mov	r2, r6
 800643c:	4649      	mov	r1, r9
 800643e:	4640      	mov	r0, r8
 8006440:	47d0      	blx	sl
 8006442:	3001      	adds	r0, #1
 8006444:	d09b      	beq.n	800637e <_printf_i+0x166>
 8006446:	3501      	adds	r5, #1
 8006448:	68e3      	ldr	r3, [r4, #12]
 800644a:	9903      	ldr	r1, [sp, #12]
 800644c:	1a5b      	subs	r3, r3, r1
 800644e:	42ab      	cmp	r3, r5
 8006450:	dcf2      	bgt.n	8006438 <_printf_i+0x220>
 8006452:	e7eb      	b.n	800642c <_printf_i+0x214>
 8006454:	2500      	movs	r5, #0
 8006456:	f104 0619 	add.w	r6, r4, #25
 800645a:	e7f5      	b.n	8006448 <_printf_i+0x230>
 800645c:	0800a4a6 	.word	0x0800a4a6
 8006460:	0800a4b7 	.word	0x0800a4b7

08006464 <siprintf>:
 8006464:	b40e      	push	{r1, r2, r3}
 8006466:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800646a:	b500      	push	{lr}
 800646c:	b09c      	sub	sp, #112	; 0x70
 800646e:	ab1d      	add	r3, sp, #116	; 0x74
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	9107      	str	r1, [sp, #28]
 8006476:	9104      	str	r1, [sp, #16]
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <siprintf+0x38>)
 800647a:	4909      	ldr	r1, [pc, #36]	; (80064a0 <siprintf+0x3c>)
 800647c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006480:	9105      	str	r1, [sp, #20]
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	a902      	add	r1, sp, #8
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f001 fb7e 	bl	8007b88 <_svfiprintf_r>
 800648c:	2200      	movs	r2, #0
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	b01c      	add	sp, #112	; 0x70
 8006494:	f85d eb04 	ldr.w	lr, [sp], #4
 8006498:	b003      	add	sp, #12
 800649a:	4770      	bx	lr
 800649c:	20000020 	.word	0x20000020
 80064a0:	ffff0208 	.word	0xffff0208

080064a4 <quorem>:
 80064a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	6903      	ldr	r3, [r0, #16]
 80064aa:	690c      	ldr	r4, [r1, #16]
 80064ac:	4607      	mov	r7, r0
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	f2c0 8082 	blt.w	80065b8 <quorem+0x114>
 80064b4:	3c01      	subs	r4, #1
 80064b6:	f100 0514 	add.w	r5, r0, #20
 80064ba:	f101 0814 	add.w	r8, r1, #20
 80064be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064cc:	3301      	adds	r3, #1
 80064ce:	429a      	cmp	r2, r3
 80064d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064dc:	d331      	bcc.n	8006542 <quorem+0x9e>
 80064de:	f04f 0e00 	mov.w	lr, #0
 80064e2:	4640      	mov	r0, r8
 80064e4:	46ac      	mov	ip, r5
 80064e6:	46f2      	mov	sl, lr
 80064e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80064ec:	b293      	uxth	r3, r2
 80064ee:	fb06 e303 	mla	r3, r6, r3, lr
 80064f2:	0c12      	lsrs	r2, r2, #16
 80064f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	fb06 e202 	mla	r2, r6, r2, lr
 80064fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006502:	f8dc a000 	ldr.w	sl, [ip]
 8006506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800650a:	fa1f fa8a 	uxth.w	sl, sl
 800650e:	4453      	add	r3, sl
 8006510:	f8dc a000 	ldr.w	sl, [ip]
 8006514:	b292      	uxth	r2, r2
 8006516:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800651a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006524:	4581      	cmp	r9, r0
 8006526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800652a:	f84c 3b04 	str.w	r3, [ip], #4
 800652e:	d2db      	bcs.n	80064e8 <quorem+0x44>
 8006530:	f855 300b 	ldr.w	r3, [r5, fp]
 8006534:	b92b      	cbnz	r3, 8006542 <quorem+0x9e>
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	3b04      	subs	r3, #4
 800653a:	429d      	cmp	r5, r3
 800653c:	461a      	mov	r2, r3
 800653e:	d32f      	bcc.n	80065a0 <quorem+0xfc>
 8006540:	613c      	str	r4, [r7, #16]
 8006542:	4638      	mov	r0, r7
 8006544:	f001 f8d0 	bl	80076e8 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	db25      	blt.n	8006598 <quorem+0xf4>
 800654c:	4628      	mov	r0, r5
 800654e:	f04f 0c00 	mov.w	ip, #0
 8006552:	3601      	adds	r6, #1
 8006554:	f858 1b04 	ldr.w	r1, [r8], #4
 8006558:	f8d0 e000 	ldr.w	lr, [r0]
 800655c:	b28b      	uxth	r3, r1
 800655e:	ebac 0303 	sub.w	r3, ip, r3
 8006562:	fa1f f28e 	uxth.w	r2, lr
 8006566:	4413      	add	r3, r2
 8006568:	0c0a      	lsrs	r2, r1, #16
 800656a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800656e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006578:	45c1      	cmp	r9, r8
 800657a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800657e:	f840 3b04 	str.w	r3, [r0], #4
 8006582:	d2e7      	bcs.n	8006554 <quorem+0xb0>
 8006584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800658c:	b922      	cbnz	r2, 8006598 <quorem+0xf4>
 800658e:	3b04      	subs	r3, #4
 8006590:	429d      	cmp	r5, r3
 8006592:	461a      	mov	r2, r3
 8006594:	d30a      	bcc.n	80065ac <quorem+0x108>
 8006596:	613c      	str	r4, [r7, #16]
 8006598:	4630      	mov	r0, r6
 800659a:	b003      	add	sp, #12
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	3b04      	subs	r3, #4
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	d1cb      	bne.n	8006540 <quorem+0x9c>
 80065a8:	3c01      	subs	r4, #1
 80065aa:	e7c6      	b.n	800653a <quorem+0x96>
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	3b04      	subs	r3, #4
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d1f0      	bne.n	8006596 <quorem+0xf2>
 80065b4:	3c01      	subs	r4, #1
 80065b6:	e7eb      	b.n	8006590 <quorem+0xec>
 80065b8:	2000      	movs	r0, #0
 80065ba:	e7ee      	b.n	800659a <quorem+0xf6>
 80065bc:	0000      	movs	r0, r0
	...

080065c0 <_dtoa_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	4616      	mov	r6, r2
 80065c6:	461f      	mov	r7, r3
 80065c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065ca:	b099      	sub	sp, #100	; 0x64
 80065cc:	4605      	mov	r5, r0
 80065ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065d6:	b974      	cbnz	r4, 80065f6 <_dtoa_r+0x36>
 80065d8:	2010      	movs	r0, #16
 80065da:	f000 fde3 	bl	80071a4 <malloc>
 80065de:	4602      	mov	r2, r0
 80065e0:	6268      	str	r0, [r5, #36]	; 0x24
 80065e2:	b920      	cbnz	r0, 80065ee <_dtoa_r+0x2e>
 80065e4:	21ea      	movs	r1, #234	; 0xea
 80065e6:	4ba8      	ldr	r3, [pc, #672]	; (8006888 <_dtoa_r+0x2c8>)
 80065e8:	48a8      	ldr	r0, [pc, #672]	; (800688c <_dtoa_r+0x2cc>)
 80065ea:	f001 fbdd 	bl	8007da8 <__assert_func>
 80065ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065f2:	6004      	str	r4, [r0, #0]
 80065f4:	60c4      	str	r4, [r0, #12]
 80065f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	b151      	cbz	r1, 8006612 <_dtoa_r+0x52>
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	2301      	movs	r3, #1
 8006600:	4093      	lsls	r3, r2
 8006602:	604a      	str	r2, [r1, #4]
 8006604:	608b      	str	r3, [r1, #8]
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fe30 	bl	800726c <_Bfree>
 800660c:	2200      	movs	r2, #0
 800660e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	1e3b      	subs	r3, r7, #0
 8006614:	bfaf      	iteee	ge
 8006616:	2300      	movge	r3, #0
 8006618:	2201      	movlt	r2, #1
 800661a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800661e:	9305      	strlt	r3, [sp, #20]
 8006620:	bfa8      	it	ge
 8006622:	f8c8 3000 	strge.w	r3, [r8]
 8006626:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800662a:	4b99      	ldr	r3, [pc, #612]	; (8006890 <_dtoa_r+0x2d0>)
 800662c:	bfb8      	it	lt
 800662e:	f8c8 2000 	strlt.w	r2, [r8]
 8006632:	ea33 0309 	bics.w	r3, r3, r9
 8006636:	d119      	bne.n	800666c <_dtoa_r+0xac>
 8006638:	f242 730f 	movw	r3, #9999	; 0x270f
 800663c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006644:	4333      	orrs	r3, r6
 8006646:	f000 857f 	beq.w	8007148 <_dtoa_r+0xb88>
 800664a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800664c:	b953      	cbnz	r3, 8006664 <_dtoa_r+0xa4>
 800664e:	4b91      	ldr	r3, [pc, #580]	; (8006894 <_dtoa_r+0x2d4>)
 8006650:	e022      	b.n	8006698 <_dtoa_r+0xd8>
 8006652:	4b91      	ldr	r3, [pc, #580]	; (8006898 <_dtoa_r+0x2d8>)
 8006654:	9303      	str	r3, [sp, #12]
 8006656:	3308      	adds	r3, #8
 8006658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	9803      	ldr	r0, [sp, #12]
 800665e:	b019      	add	sp, #100	; 0x64
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	4b8b      	ldr	r3, [pc, #556]	; (8006894 <_dtoa_r+0x2d4>)
 8006666:	9303      	str	r3, [sp, #12]
 8006668:	3303      	adds	r3, #3
 800666a:	e7f5      	b.n	8006658 <_dtoa_r+0x98>
 800666c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006670:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	f7fa f994 	bl	80009a8 <__aeabi_dcmpeq>
 8006680:	4680      	mov	r8, r0
 8006682:	b158      	cbz	r0, 800669c <_dtoa_r+0xdc>
 8006684:	2301      	movs	r3, #1
 8006686:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8558 	beq.w	8007142 <_dtoa_r+0xb82>
 8006692:	4882      	ldr	r0, [pc, #520]	; (800689c <_dtoa_r+0x2dc>)
 8006694:	6018      	str	r0, [r3, #0]
 8006696:	1e43      	subs	r3, r0, #1
 8006698:	9303      	str	r3, [sp, #12]
 800669a:	e7df      	b.n	800665c <_dtoa_r+0x9c>
 800669c:	ab16      	add	r3, sp, #88	; 0x58
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	ab17      	add	r3, sp, #92	; 0x5c
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	4628      	mov	r0, r5
 80066a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066aa:	f001 f8c5 	bl	8007838 <__d2b>
 80066ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80066b2:	4683      	mov	fp, r0
 80066b4:	2c00      	cmp	r4, #0
 80066b6:	d07f      	beq.n	80067b8 <_dtoa_r+0x1f8>
 80066b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80066c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80066ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80066ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066d2:	2200      	movs	r2, #0
 80066d4:	4b72      	ldr	r3, [pc, #456]	; (80068a0 <_dtoa_r+0x2e0>)
 80066d6:	f7f9 fd47 	bl	8000168 <__aeabi_dsub>
 80066da:	a365      	add	r3, pc, #404	; (adr r3, 8006870 <_dtoa_r+0x2b0>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 fefa 	bl	80004d8 <__aeabi_dmul>
 80066e4:	a364      	add	r3, pc, #400	; (adr r3, 8006878 <_dtoa_r+0x2b8>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 fd3f 	bl	800016c <__adddf3>
 80066ee:	4606      	mov	r6, r0
 80066f0:	4620      	mov	r0, r4
 80066f2:	460f      	mov	r7, r1
 80066f4:	f7f9 fe86 	bl	8000404 <__aeabi_i2d>
 80066f8:	a361      	add	r3, pc, #388	; (adr r3, 8006880 <_dtoa_r+0x2c0>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 feeb 	bl	80004d8 <__aeabi_dmul>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7f9 fd2f 	bl	800016c <__adddf3>
 800670e:	4606      	mov	r6, r0
 8006710:	460f      	mov	r7, r1
 8006712:	f7fa f991 	bl	8000a38 <__aeabi_d2iz>
 8006716:	2200      	movs	r2, #0
 8006718:	4682      	mov	sl, r0
 800671a:	2300      	movs	r3, #0
 800671c:	4630      	mov	r0, r6
 800671e:	4639      	mov	r1, r7
 8006720:	f7fa f94c 	bl	80009bc <__aeabi_dcmplt>
 8006724:	b148      	cbz	r0, 800673a <_dtoa_r+0x17a>
 8006726:	4650      	mov	r0, sl
 8006728:	f7f9 fe6c 	bl	8000404 <__aeabi_i2d>
 800672c:	4632      	mov	r2, r6
 800672e:	463b      	mov	r3, r7
 8006730:	f7fa f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8006734:	b908      	cbnz	r0, 800673a <_dtoa_r+0x17a>
 8006736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800673a:	f1ba 0f16 	cmp.w	sl, #22
 800673e:	d858      	bhi.n	80067f2 <_dtoa_r+0x232>
 8006740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006744:	4b57      	ldr	r3, [pc, #348]	; (80068a4 <_dtoa_r+0x2e4>)
 8006746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7fa f935 	bl	80009bc <__aeabi_dcmplt>
 8006752:	2800      	cmp	r0, #0
 8006754:	d04f      	beq.n	80067f6 <_dtoa_r+0x236>
 8006756:	2300      	movs	r3, #0
 8006758:	f10a 3aff 	add.w	sl, sl, #4294967295
 800675c:	930f      	str	r3, [sp, #60]	; 0x3c
 800675e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006760:	1b1c      	subs	r4, r3, r4
 8006762:	1e63      	subs	r3, r4, #1
 8006764:	9309      	str	r3, [sp, #36]	; 0x24
 8006766:	bf49      	itett	mi
 8006768:	f1c4 0301 	rsbmi	r3, r4, #1
 800676c:	2300      	movpl	r3, #0
 800676e:	9306      	strmi	r3, [sp, #24]
 8006770:	2300      	movmi	r3, #0
 8006772:	bf54      	ite	pl
 8006774:	9306      	strpl	r3, [sp, #24]
 8006776:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006778:	f1ba 0f00 	cmp.w	sl, #0
 800677c:	db3d      	blt.n	80067fa <_dtoa_r+0x23a>
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006784:	4453      	add	r3, sl
 8006786:	9309      	str	r3, [sp, #36]	; 0x24
 8006788:	2300      	movs	r3, #0
 800678a:	930a      	str	r3, [sp, #40]	; 0x28
 800678c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678e:	2b09      	cmp	r3, #9
 8006790:	f200 808c 	bhi.w	80068ac <_dtoa_r+0x2ec>
 8006794:	2b05      	cmp	r3, #5
 8006796:	bfc4      	itt	gt
 8006798:	3b04      	subgt	r3, #4
 800679a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800679c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800679e:	bfc8      	it	gt
 80067a0:	2400      	movgt	r4, #0
 80067a2:	f1a3 0302 	sub.w	r3, r3, #2
 80067a6:	bfd8      	it	le
 80067a8:	2401      	movle	r4, #1
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	f200 808a 	bhi.w	80068c4 <_dtoa_r+0x304>
 80067b0:	e8df f003 	tbb	[pc, r3]
 80067b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80067b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80067bc:	441c      	add	r4, r3
 80067be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	bfc3      	ittte	gt
 80067c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80067ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80067d2:	f1c3 0320 	rsble	r3, r3, #32
 80067d6:	bfc6      	itte	gt
 80067d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067dc:	4318      	orrgt	r0, r3
 80067de:	fa06 f003 	lslle.w	r0, r6, r3
 80067e2:	f7f9 fdff 	bl	80003e4 <__aeabi_ui2d>
 80067e6:	2301      	movs	r3, #1
 80067e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067ec:	3c01      	subs	r4, #1
 80067ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80067f0:	e76f      	b.n	80066d2 <_dtoa_r+0x112>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7b2      	b.n	800675c <_dtoa_r+0x19c>
 80067f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80067f8:	e7b1      	b.n	800675e <_dtoa_r+0x19e>
 80067fa:	9b06      	ldr	r3, [sp, #24]
 80067fc:	eba3 030a 	sub.w	r3, r3, sl
 8006800:	9306      	str	r3, [sp, #24]
 8006802:	f1ca 0300 	rsb	r3, sl, #0
 8006806:	930a      	str	r3, [sp, #40]	; 0x28
 8006808:	2300      	movs	r3, #0
 800680a:	930e      	str	r3, [sp, #56]	; 0x38
 800680c:	e7be      	b.n	800678c <_dtoa_r+0x1cc>
 800680e:	2300      	movs	r3, #0
 8006810:	930b      	str	r3, [sp, #44]	; 0x2c
 8006812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006814:	2b00      	cmp	r3, #0
 8006816:	dc58      	bgt.n	80068ca <_dtoa_r+0x30a>
 8006818:	f04f 0901 	mov.w	r9, #1
 800681c:	464b      	mov	r3, r9
 800681e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006822:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006826:	2200      	movs	r2, #0
 8006828:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800682a:	6042      	str	r2, [r0, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	f102 0614 	add.w	r6, r2, #20
 8006832:	429e      	cmp	r6, r3
 8006834:	6841      	ldr	r1, [r0, #4]
 8006836:	d94e      	bls.n	80068d6 <_dtoa_r+0x316>
 8006838:	4628      	mov	r0, r5
 800683a:	f000 fcd7 	bl	80071ec <_Balloc>
 800683e:	9003      	str	r0, [sp, #12]
 8006840:	2800      	cmp	r0, #0
 8006842:	d14c      	bne.n	80068de <_dtoa_r+0x31e>
 8006844:	4602      	mov	r2, r0
 8006846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <_dtoa_r+0x2e8>)
 800684c:	e6cc      	b.n	80065e8 <_dtoa_r+0x28>
 800684e:	2301      	movs	r3, #1
 8006850:	e7de      	b.n	8006810 <_dtoa_r+0x250>
 8006852:	2300      	movs	r3, #0
 8006854:	930b      	str	r3, [sp, #44]	; 0x2c
 8006856:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006858:	eb0a 0903 	add.w	r9, sl, r3
 800685c:	f109 0301 	add.w	r3, r9, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	9308      	str	r3, [sp, #32]
 8006864:	bfb8      	it	lt
 8006866:	2301      	movlt	r3, #1
 8006868:	e7dd      	b.n	8006826 <_dtoa_r+0x266>
 800686a:	2301      	movs	r3, #1
 800686c:	e7f2      	b.n	8006854 <_dtoa_r+0x294>
 800686e:	bf00      	nop
 8006870:	636f4361 	.word	0x636f4361
 8006874:	3fd287a7 	.word	0x3fd287a7
 8006878:	8b60c8b3 	.word	0x8b60c8b3
 800687c:	3fc68a28 	.word	0x3fc68a28
 8006880:	509f79fb 	.word	0x509f79fb
 8006884:	3fd34413 	.word	0x3fd34413
 8006888:	0800a4d5 	.word	0x0800a4d5
 800688c:	0800a4ec 	.word	0x0800a4ec
 8006890:	7ff00000 	.word	0x7ff00000
 8006894:	0800a4d1 	.word	0x0800a4d1
 8006898:	0800a4c8 	.word	0x0800a4c8
 800689c:	0800a4a5 	.word	0x0800a4a5
 80068a0:	3ff80000 	.word	0x3ff80000
 80068a4:	0800a5e0 	.word	0x0800a5e0
 80068a8:	0800a547 	.word	0x0800a547
 80068ac:	2401      	movs	r4, #1
 80068ae:	2300      	movs	r3, #0
 80068b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80068b2:	9322      	str	r3, [sp, #136]	; 0x88
 80068b4:	f04f 39ff 	mov.w	r9, #4294967295
 80068b8:	2200      	movs	r2, #0
 80068ba:	2312      	movs	r3, #18
 80068bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80068c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80068c2:	e7b0      	b.n	8006826 <_dtoa_r+0x266>
 80068c4:	2301      	movs	r3, #1
 80068c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068c8:	e7f4      	b.n	80068b4 <_dtoa_r+0x2f4>
 80068ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80068ce:	464b      	mov	r3, r9
 80068d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80068d4:	e7a7      	b.n	8006826 <_dtoa_r+0x266>
 80068d6:	3101      	adds	r1, #1
 80068d8:	6041      	str	r1, [r0, #4]
 80068da:	0052      	lsls	r2, r2, #1
 80068dc:	e7a7      	b.n	800682e <_dtoa_r+0x26e>
 80068de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068e0:	9a03      	ldr	r2, [sp, #12]
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b0e      	cmp	r3, #14
 80068e8:	f200 80a8 	bhi.w	8006a3c <_dtoa_r+0x47c>
 80068ec:	2c00      	cmp	r4, #0
 80068ee:	f000 80a5 	beq.w	8006a3c <_dtoa_r+0x47c>
 80068f2:	f1ba 0f00 	cmp.w	sl, #0
 80068f6:	dd34      	ble.n	8006962 <_dtoa_r+0x3a2>
 80068f8:	4a9a      	ldr	r2, [pc, #616]	; (8006b64 <_dtoa_r+0x5a4>)
 80068fa:	f00a 030f 	and.w	r3, sl, #15
 80068fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006902:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800690a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800690e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006912:	d016      	beq.n	8006942 <_dtoa_r+0x382>
 8006914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006918:	4b93      	ldr	r3, [pc, #588]	; (8006b68 <_dtoa_r+0x5a8>)
 800691a:	2703      	movs	r7, #3
 800691c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006920:	f7f9 ff04 	bl	800072c <__aeabi_ddiv>
 8006924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006928:	f004 040f 	and.w	r4, r4, #15
 800692c:	4e8e      	ldr	r6, [pc, #568]	; (8006b68 <_dtoa_r+0x5a8>)
 800692e:	b954      	cbnz	r4, 8006946 <_dtoa_r+0x386>
 8006930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006938:	f7f9 fef8 	bl	800072c <__aeabi_ddiv>
 800693c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006940:	e029      	b.n	8006996 <_dtoa_r+0x3d6>
 8006942:	2702      	movs	r7, #2
 8006944:	e7f2      	b.n	800692c <_dtoa_r+0x36c>
 8006946:	07e1      	lsls	r1, r4, #31
 8006948:	d508      	bpl.n	800695c <_dtoa_r+0x39c>
 800694a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800694e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006952:	f7f9 fdc1 	bl	80004d8 <__aeabi_dmul>
 8006956:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800695a:	3701      	adds	r7, #1
 800695c:	1064      	asrs	r4, r4, #1
 800695e:	3608      	adds	r6, #8
 8006960:	e7e5      	b.n	800692e <_dtoa_r+0x36e>
 8006962:	f000 80a5 	beq.w	8006ab0 <_dtoa_r+0x4f0>
 8006966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800696a:	f1ca 0400 	rsb	r4, sl, #0
 800696e:	4b7d      	ldr	r3, [pc, #500]	; (8006b64 <_dtoa_r+0x5a4>)
 8006970:	f004 020f 	and.w	r2, r4, #15
 8006974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f7f9 fdac 	bl	80004d8 <__aeabi_dmul>
 8006980:	2702      	movs	r7, #2
 8006982:	2300      	movs	r3, #0
 8006984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006988:	4e77      	ldr	r6, [pc, #476]	; (8006b68 <_dtoa_r+0x5a8>)
 800698a:	1124      	asrs	r4, r4, #4
 800698c:	2c00      	cmp	r4, #0
 800698e:	f040 8084 	bne.w	8006a9a <_dtoa_r+0x4da>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1d2      	bne.n	800693c <_dtoa_r+0x37c>
 8006996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 808b 	beq.w	8006ab4 <_dtoa_r+0x4f4>
 800699e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80069a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069aa:	2200      	movs	r2, #0
 80069ac:	4b6f      	ldr	r3, [pc, #444]	; (8006b6c <_dtoa_r+0x5ac>)
 80069ae:	f7fa f805 	bl	80009bc <__aeabi_dcmplt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d07e      	beq.n	8006ab4 <_dtoa_r+0x4f4>
 80069b6:	9b08      	ldr	r3, [sp, #32]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d07b      	beq.n	8006ab4 <_dtoa_r+0x4f4>
 80069bc:	f1b9 0f00 	cmp.w	r9, #0
 80069c0:	dd38      	ble.n	8006a34 <_dtoa_r+0x474>
 80069c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069c6:	2200      	movs	r2, #0
 80069c8:	4b69      	ldr	r3, [pc, #420]	; (8006b70 <_dtoa_r+0x5b0>)
 80069ca:	f7f9 fd85 	bl	80004d8 <__aeabi_dmul>
 80069ce:	464c      	mov	r4, r9
 80069d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80069d8:	3701      	adds	r7, #1
 80069da:	4638      	mov	r0, r7
 80069dc:	f7f9 fd12 	bl	8000404 <__aeabi_i2d>
 80069e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069e4:	f7f9 fd78 	bl	80004d8 <__aeabi_dmul>
 80069e8:	2200      	movs	r2, #0
 80069ea:	4b62      	ldr	r3, [pc, #392]	; (8006b74 <_dtoa_r+0x5b4>)
 80069ec:	f7f9 fbbe 	bl	800016c <__adddf3>
 80069f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069f8:	9611      	str	r6, [sp, #68]	; 0x44
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d15d      	bne.n	8006aba <_dtoa_r+0x4fa>
 80069fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a02:	2200      	movs	r2, #0
 8006a04:	4b5c      	ldr	r3, [pc, #368]	; (8006b78 <_dtoa_r+0x5b8>)
 8006a06:	f7f9 fbaf 	bl	8000168 <__aeabi_dsub>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a12:	4633      	mov	r3, r6
 8006a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a16:	f7f9 ffef 	bl	80009f8 <__aeabi_dcmpgt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f040 829c 	bne.w	8006f58 <_dtoa_r+0x998>
 8006a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a2a:	f7f9 ffc7 	bl	80009bc <__aeabi_dcmplt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f040 8290 	bne.w	8006f54 <_dtoa_r+0x994>
 8006a34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f2c0 8152 	blt.w	8006ce8 <_dtoa_r+0x728>
 8006a44:	f1ba 0f0e 	cmp.w	sl, #14
 8006a48:	f300 814e 	bgt.w	8006ce8 <_dtoa_r+0x728>
 8006a4c:	4b45      	ldr	r3, [pc, #276]	; (8006b64 <_dtoa_r+0x5a4>)
 8006a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f280 80db 	bge.w	8006c18 <_dtoa_r+0x658>
 8006a62:	9b08      	ldr	r3, [sp, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f300 80d7 	bgt.w	8006c18 <_dtoa_r+0x658>
 8006a6a:	f040 8272 	bne.w	8006f52 <_dtoa_r+0x992>
 8006a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a72:	2200      	movs	r2, #0
 8006a74:	4b40      	ldr	r3, [pc, #256]	; (8006b78 <_dtoa_r+0x5b8>)
 8006a76:	f7f9 fd2f 	bl	80004d8 <__aeabi_dmul>
 8006a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a7e:	f7f9 ffb1 	bl	80009e4 <__aeabi_dcmpge>
 8006a82:	9c08      	ldr	r4, [sp, #32]
 8006a84:	4626      	mov	r6, r4
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f040 8248 	bne.w	8006f1c <_dtoa_r+0x95c>
 8006a8c:	2331      	movs	r3, #49	; 0x31
 8006a8e:	9f03      	ldr	r7, [sp, #12]
 8006a90:	f10a 0a01 	add.w	sl, sl, #1
 8006a94:	f807 3b01 	strb.w	r3, [r7], #1
 8006a98:	e244      	b.n	8006f24 <_dtoa_r+0x964>
 8006a9a:	07e2      	lsls	r2, r4, #31
 8006a9c:	d505      	bpl.n	8006aaa <_dtoa_r+0x4ea>
 8006a9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006aa2:	f7f9 fd19 	bl	80004d8 <__aeabi_dmul>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	3701      	adds	r7, #1
 8006aaa:	1064      	asrs	r4, r4, #1
 8006aac:	3608      	adds	r6, #8
 8006aae:	e76d      	b.n	800698c <_dtoa_r+0x3cc>
 8006ab0:	2702      	movs	r7, #2
 8006ab2:	e770      	b.n	8006996 <_dtoa_r+0x3d6>
 8006ab4:	46d0      	mov	r8, sl
 8006ab6:	9c08      	ldr	r4, [sp, #32]
 8006ab8:	e78f      	b.n	80069da <_dtoa_r+0x41a>
 8006aba:	9903      	ldr	r1, [sp, #12]
 8006abc:	4b29      	ldr	r3, [pc, #164]	; (8006b64 <_dtoa_r+0x5a4>)
 8006abe:	4421      	add	r1, r4
 8006ac0:	9112      	str	r1, [sp, #72]	; 0x48
 8006ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ac8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006acc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d055      	beq.n	8006b80 <_dtoa_r+0x5c0>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	4929      	ldr	r1, [pc, #164]	; (8006b7c <_dtoa_r+0x5bc>)
 8006ad8:	f7f9 fe28 	bl	800072c <__aeabi_ddiv>
 8006adc:	463b      	mov	r3, r7
 8006ade:	4632      	mov	r2, r6
 8006ae0:	f7f9 fb42 	bl	8000168 <__aeabi_dsub>
 8006ae4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ae8:	9f03      	ldr	r7, [sp, #12]
 8006aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aee:	f7f9 ffa3 	bl	8000a38 <__aeabi_d2iz>
 8006af2:	4604      	mov	r4, r0
 8006af4:	f7f9 fc86 	bl	8000404 <__aeabi_i2d>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b00:	f7f9 fb32 	bl	8000168 <__aeabi_dsub>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	3430      	adds	r4, #48	; 0x30
 8006b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b12:	f807 4b01 	strb.w	r4, [r7], #1
 8006b16:	f7f9 ff51 	bl	80009bc <__aeabi_dcmplt>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d174      	bne.n	8006c08 <_dtoa_r+0x648>
 8006b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b22:	2000      	movs	r0, #0
 8006b24:	4911      	ldr	r1, [pc, #68]	; (8006b6c <_dtoa_r+0x5ac>)
 8006b26:	f7f9 fb1f 	bl	8000168 <__aeabi_dsub>
 8006b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b2e:	f7f9 ff45 	bl	80009bc <__aeabi_dcmplt>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f040 80b7 	bne.w	8006ca6 <_dtoa_r+0x6e6>
 8006b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b3a:	429f      	cmp	r7, r3
 8006b3c:	f43f af7a 	beq.w	8006a34 <_dtoa_r+0x474>
 8006b40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b44:	2200      	movs	r2, #0
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <_dtoa_r+0x5b0>)
 8006b48:	f7f9 fcc6 	bl	80004d8 <__aeabi_dmul>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <_dtoa_r+0x5b0>)
 8006b58:	f7f9 fcbe 	bl	80004d8 <__aeabi_dmul>
 8006b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b60:	e7c3      	b.n	8006aea <_dtoa_r+0x52a>
 8006b62:	bf00      	nop
 8006b64:	0800a5e0 	.word	0x0800a5e0
 8006b68:	0800a5b8 	.word	0x0800a5b8
 8006b6c:	3ff00000 	.word	0x3ff00000
 8006b70:	40240000 	.word	0x40240000
 8006b74:	401c0000 	.word	0x401c0000
 8006b78:	40140000 	.word	0x40140000
 8006b7c:	3fe00000 	.word	0x3fe00000
 8006b80:	4630      	mov	r0, r6
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7f9 fca8 	bl	80004d8 <__aeabi_dmul>
 8006b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b8e:	9c03      	ldr	r4, [sp, #12]
 8006b90:	9314      	str	r3, [sp, #80]	; 0x50
 8006b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b96:	f7f9 ff4f 	bl	8000a38 <__aeabi_d2iz>
 8006b9a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b9c:	f7f9 fc32 	bl	8000404 <__aeabi_i2d>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba8:	f7f9 fade 	bl	8000168 <__aeabi_dsub>
 8006bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bae:	4606      	mov	r6, r0
 8006bb0:	3330      	adds	r3, #48	; 0x30
 8006bb2:	f804 3b01 	strb.w	r3, [r4], #1
 8006bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bb8:	460f      	mov	r7, r1
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	d124      	bne.n	8006c0c <_dtoa_r+0x64c>
 8006bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bc6:	4bb0      	ldr	r3, [pc, #704]	; (8006e88 <_dtoa_r+0x8c8>)
 8006bc8:	f7f9 fad0 	bl	800016c <__adddf3>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7f9 ff10 	bl	80009f8 <__aeabi_dcmpgt>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d163      	bne.n	8006ca4 <_dtoa_r+0x6e4>
 8006bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006be0:	2000      	movs	r0, #0
 8006be2:	49a9      	ldr	r1, [pc, #676]	; (8006e88 <_dtoa_r+0x8c8>)
 8006be4:	f7f9 fac0 	bl	8000168 <__aeabi_dsub>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4630      	mov	r0, r6
 8006bee:	4639      	mov	r1, r7
 8006bf0:	f7f9 fee4 	bl	80009bc <__aeabi_dcmplt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f43f af1d 	beq.w	8006a34 <_dtoa_r+0x474>
 8006bfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bfc:	1e7b      	subs	r3, r7, #1
 8006bfe:	9314      	str	r3, [sp, #80]	; 0x50
 8006c00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d0f8      	beq.n	8006bfa <_dtoa_r+0x63a>
 8006c08:	46c2      	mov	sl, r8
 8006c0a:	e03b      	b.n	8006c84 <_dtoa_r+0x6c4>
 8006c0c:	4b9f      	ldr	r3, [pc, #636]	; (8006e8c <_dtoa_r+0x8cc>)
 8006c0e:	f7f9 fc63 	bl	80004d8 <__aeabi_dmul>
 8006c12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c16:	e7bc      	b.n	8006b92 <_dtoa_r+0x5d2>
 8006c18:	9f03      	ldr	r7, [sp, #12]
 8006c1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fd81 	bl	800072c <__aeabi_ddiv>
 8006c2a:	f7f9 ff05 	bl	8000a38 <__aeabi_d2iz>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f7f9 fbe8 	bl	8000404 <__aeabi_i2d>
 8006c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c38:	f7f9 fc4e 	bl	80004d8 <__aeabi_dmul>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4640      	mov	r0, r8
 8006c42:	4649      	mov	r1, r9
 8006c44:	f7f9 fa90 	bl	8000168 <__aeabi_dsub>
 8006c48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c4c:	f807 6b01 	strb.w	r6, [r7], #1
 8006c50:	9e03      	ldr	r6, [sp, #12]
 8006c52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c56:	1bbe      	subs	r6, r7, r6
 8006c58:	45b4      	cmp	ip, r6
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	d136      	bne.n	8006cce <_dtoa_r+0x70e>
 8006c60:	f7f9 fa84 	bl	800016c <__adddf3>
 8006c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c68:	4680      	mov	r8, r0
 8006c6a:	4689      	mov	r9, r1
 8006c6c:	f7f9 fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8006c70:	bb58      	cbnz	r0, 8006cca <_dtoa_r+0x70a>
 8006c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c76:	4640      	mov	r0, r8
 8006c78:	4649      	mov	r1, r9
 8006c7a:	f7f9 fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8006c7e:	b108      	cbz	r0, 8006c84 <_dtoa_r+0x6c4>
 8006c80:	07e1      	lsls	r1, r4, #31
 8006c82:	d422      	bmi.n	8006cca <_dtoa_r+0x70a>
 8006c84:	4628      	mov	r0, r5
 8006c86:	4659      	mov	r1, fp
 8006c88:	f000 faf0 	bl	800726c <_Bfree>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	703b      	strb	r3, [r7, #0]
 8006c90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c92:	f10a 0001 	add.w	r0, sl, #1
 8006c96:	6018      	str	r0, [r3, #0]
 8006c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f43f acde 	beq.w	800665c <_dtoa_r+0x9c>
 8006ca0:	601f      	str	r7, [r3, #0]
 8006ca2:	e4db      	b.n	800665c <_dtoa_r+0x9c>
 8006ca4:	4627      	mov	r7, r4
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	461f      	mov	r7, r3
 8006caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cae:	2a39      	cmp	r2, #57	; 0x39
 8006cb0:	d107      	bne.n	8006cc2 <_dtoa_r+0x702>
 8006cb2:	9a03      	ldr	r2, [sp, #12]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1f7      	bne.n	8006ca8 <_dtoa_r+0x6e8>
 8006cb8:	2230      	movs	r2, #48	; 0x30
 8006cba:	9903      	ldr	r1, [sp, #12]
 8006cbc:	f108 0801 	add.w	r8, r8, #1
 8006cc0:	700a      	strb	r2, [r1, #0]
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	3201      	adds	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e79e      	b.n	8006c08 <_dtoa_r+0x648>
 8006cca:	46d0      	mov	r8, sl
 8006ccc:	e7eb      	b.n	8006ca6 <_dtoa_r+0x6e6>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4b6e      	ldr	r3, [pc, #440]	; (8006e8c <_dtoa_r+0x8cc>)
 8006cd2:	f7f9 fc01 	bl	80004d8 <__aeabi_dmul>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4680      	mov	r8, r0
 8006cdc:	4689      	mov	r9, r1
 8006cde:	f7f9 fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d09b      	beq.n	8006c1e <_dtoa_r+0x65e>
 8006ce6:	e7cd      	b.n	8006c84 <_dtoa_r+0x6c4>
 8006ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	f000 80d0 	beq.w	8006e90 <_dtoa_r+0x8d0>
 8006cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cf2:	2a01      	cmp	r2, #1
 8006cf4:	f300 80ae 	bgt.w	8006e54 <_dtoa_r+0x894>
 8006cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	f000 80a6 	beq.w	8006e4c <_dtoa_r+0x88c>
 8006d00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d06:	9f06      	ldr	r7, [sp, #24]
 8006d08:	9a06      	ldr	r2, [sp, #24]
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	441a      	add	r2, r3
 8006d0e:	9206      	str	r2, [sp, #24]
 8006d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d12:	4628      	mov	r0, r5
 8006d14:	441a      	add	r2, r3
 8006d16:	9209      	str	r2, [sp, #36]	; 0x24
 8006d18:	f000 fb5e 	bl	80073d8 <__i2b>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	2f00      	cmp	r7, #0
 8006d20:	dd0c      	ble.n	8006d3c <_dtoa_r+0x77c>
 8006d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dd09      	ble.n	8006d3c <_dtoa_r+0x77c>
 8006d28:	42bb      	cmp	r3, r7
 8006d2a:	bfa8      	it	ge
 8006d2c:	463b      	movge	r3, r7
 8006d2e:	9a06      	ldr	r2, [sp, #24]
 8006d30:	1aff      	subs	r7, r7, r3
 8006d32:	1ad2      	subs	r2, r2, r3
 8006d34:	9206      	str	r2, [sp, #24]
 8006d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3e:	b1f3      	cbz	r3, 8006d7e <_dtoa_r+0x7be>
 8006d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80a8 	beq.w	8006e98 <_dtoa_r+0x8d8>
 8006d48:	2c00      	cmp	r4, #0
 8006d4a:	dd10      	ble.n	8006d6e <_dtoa_r+0x7ae>
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4622      	mov	r2, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 fbff 	bl	8007554 <__pow5mult>
 8006d56:	465a      	mov	r2, fp
 8006d58:	4601      	mov	r1, r0
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fb51 	bl	8007404 <__multiply>
 8006d62:	4680      	mov	r8, r0
 8006d64:	4659      	mov	r1, fp
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 fa80 	bl	800726c <_Bfree>
 8006d6c:	46c3      	mov	fp, r8
 8006d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d70:	1b1a      	subs	r2, r3, r4
 8006d72:	d004      	beq.n	8006d7e <_dtoa_r+0x7be>
 8006d74:	4659      	mov	r1, fp
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 fbec 	bl	8007554 <__pow5mult>
 8006d7c:	4683      	mov	fp, r0
 8006d7e:	2101      	movs	r1, #1
 8006d80:	4628      	mov	r0, r5
 8006d82:	f000 fb29 	bl	80073d8 <__i2b>
 8006d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f340 8086 	ble.w	8006e9c <_dtoa_r+0x8dc>
 8006d90:	461a      	mov	r2, r3
 8006d92:	4601      	mov	r1, r0
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 fbdd 	bl	8007554 <__pow5mult>
 8006d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	dd7f      	ble.n	8006ea2 <_dtoa_r+0x8e2>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dac:	6918      	ldr	r0, [r3, #16]
 8006dae:	f000 fac5 	bl	800733c <__hi0bits>
 8006db2:	f1c0 0020 	rsb	r0, r0, #32
 8006db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db8:	4418      	add	r0, r3
 8006dba:	f010 001f 	ands.w	r0, r0, #31
 8006dbe:	f000 8092 	beq.w	8006ee6 <_dtoa_r+0x926>
 8006dc2:	f1c0 0320 	rsb	r3, r0, #32
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	f340 808a 	ble.w	8006ee0 <_dtoa_r+0x920>
 8006dcc:	f1c0 001c 	rsb	r0, r0, #28
 8006dd0:	9b06      	ldr	r3, [sp, #24]
 8006dd2:	4407      	add	r7, r0
 8006dd4:	4403      	add	r3, r0
 8006dd6:	9306      	str	r3, [sp, #24]
 8006dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dda:	4403      	add	r3, r0
 8006ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dde:	9b06      	ldr	r3, [sp, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dd05      	ble.n	8006df0 <_dtoa_r+0x830>
 8006de4:	4659      	mov	r1, fp
 8006de6:	461a      	mov	r2, r3
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 fc0d 	bl	8007608 <__lshift>
 8006dee:	4683      	mov	fp, r0
 8006df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dd05      	ble.n	8006e02 <_dtoa_r+0x842>
 8006df6:	4621      	mov	r1, r4
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 fc04 	bl	8007608 <__lshift>
 8006e00:	4604      	mov	r4, r0
 8006e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d070      	beq.n	8006eea <_dtoa_r+0x92a>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f000 fc6c 	bl	80076e8 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	da6a      	bge.n	8006eea <_dtoa_r+0x92a>
 8006e14:	2300      	movs	r3, #0
 8006e16:	4659      	mov	r1, fp
 8006e18:	220a      	movs	r2, #10
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 fa48 	bl	80072b0 <__multadd>
 8006e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e22:	4683      	mov	fp, r0
 8006e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8194 	beq.w	8007156 <_dtoa_r+0xb96>
 8006e2e:	4631      	mov	r1, r6
 8006e30:	2300      	movs	r3, #0
 8006e32:	220a      	movs	r2, #10
 8006e34:	4628      	mov	r0, r5
 8006e36:	f000 fa3b 	bl	80072b0 <__multadd>
 8006e3a:	f1b9 0f00 	cmp.w	r9, #0
 8006e3e:	4606      	mov	r6, r0
 8006e40:	f300 8093 	bgt.w	8006f6a <_dtoa_r+0x9aa>
 8006e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	dc57      	bgt.n	8006efa <_dtoa_r+0x93a>
 8006e4a:	e08e      	b.n	8006f6a <_dtoa_r+0x9aa>
 8006e4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e52:	e757      	b.n	8006d04 <_dtoa_r+0x744>
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	1e5c      	subs	r4, r3, #1
 8006e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	bfb7      	itett	lt
 8006e5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e60:	1b1c      	subge	r4, r3, r4
 8006e62:	1ae2      	sublt	r2, r4, r3
 8006e64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e66:	bfbe      	ittt	lt
 8006e68:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e6a:	189b      	addlt	r3, r3, r2
 8006e6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	bfb8      	it	lt
 8006e72:	2400      	movlt	r4, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bfbb      	ittet	lt
 8006e78:	9b06      	ldrlt	r3, [sp, #24]
 8006e7a:	9a08      	ldrlt	r2, [sp, #32]
 8006e7c:	9f06      	ldrge	r7, [sp, #24]
 8006e7e:	1a9f      	sublt	r7, r3, r2
 8006e80:	bfac      	ite	ge
 8006e82:	9b08      	ldrge	r3, [sp, #32]
 8006e84:	2300      	movlt	r3, #0
 8006e86:	e73f      	b.n	8006d08 <_dtoa_r+0x748>
 8006e88:	3fe00000 	.word	0x3fe00000
 8006e8c:	40240000 	.word	0x40240000
 8006e90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e92:	9f06      	ldr	r7, [sp, #24]
 8006e94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e96:	e742      	b.n	8006d1e <_dtoa_r+0x75e>
 8006e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9a:	e76b      	b.n	8006d74 <_dtoa_r+0x7b4>
 8006e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	dc19      	bgt.n	8006ed6 <_dtoa_r+0x916>
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	b9bb      	cbnz	r3, 8006ed6 <_dtoa_r+0x916>
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eac:	b99b      	cbnz	r3, 8006ed6 <_dtoa_r+0x916>
 8006eae:	9b05      	ldr	r3, [sp, #20]
 8006eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb4:	0d1b      	lsrs	r3, r3, #20
 8006eb6:	051b      	lsls	r3, r3, #20
 8006eb8:	b183      	cbz	r3, 8006edc <_dtoa_r+0x91c>
 8006eba:	f04f 0801 	mov.w	r8, #1
 8006ebe:	9b06      	ldr	r3, [sp, #24]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9306      	str	r3, [sp, #24]
 8006ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f47f af6a 	bne.w	8006da6 <_dtoa_r+0x7e6>
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	e76f      	b.n	8006db6 <_dtoa_r+0x7f6>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	e7f6      	b.n	8006eca <_dtoa_r+0x90a>
 8006edc:	4698      	mov	r8, r3
 8006ede:	e7f4      	b.n	8006eca <_dtoa_r+0x90a>
 8006ee0:	f43f af7d 	beq.w	8006dde <_dtoa_r+0x81e>
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	301c      	adds	r0, #28
 8006ee8:	e772      	b.n	8006dd0 <_dtoa_r+0x810>
 8006eea:	9b08      	ldr	r3, [sp, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dc36      	bgt.n	8006f5e <_dtoa_r+0x99e>
 8006ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	dd33      	ble.n	8006f5e <_dtoa_r+0x99e>
 8006ef6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006efa:	f1b9 0f00 	cmp.w	r9, #0
 8006efe:	d10d      	bne.n	8006f1c <_dtoa_r+0x95c>
 8006f00:	4621      	mov	r1, r4
 8006f02:	464b      	mov	r3, r9
 8006f04:	2205      	movs	r2, #5
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f9d2 	bl	80072b0 <__multadd>
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4658      	mov	r0, fp
 8006f12:	f000 fbe9 	bl	80076e8 <__mcmp>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f73f adb8 	bgt.w	8006a8c <_dtoa_r+0x4cc>
 8006f1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f1e:	9f03      	ldr	r7, [sp, #12]
 8006f20:	ea6f 0a03 	mvn.w	sl, r3
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f99e 	bl	800726c <_Bfree>
 8006f30:	2e00      	cmp	r6, #0
 8006f32:	f43f aea7 	beq.w	8006c84 <_dtoa_r+0x6c4>
 8006f36:	f1b8 0f00 	cmp.w	r8, #0
 8006f3a:	d005      	beq.n	8006f48 <_dtoa_r+0x988>
 8006f3c:	45b0      	cmp	r8, r6
 8006f3e:	d003      	beq.n	8006f48 <_dtoa_r+0x988>
 8006f40:	4641      	mov	r1, r8
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f992 	bl	800726c <_Bfree>
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f000 f98e 	bl	800726c <_Bfree>
 8006f50:	e698      	b.n	8006c84 <_dtoa_r+0x6c4>
 8006f52:	2400      	movs	r4, #0
 8006f54:	4626      	mov	r6, r4
 8006f56:	e7e1      	b.n	8006f1c <_dtoa_r+0x95c>
 8006f58:	46c2      	mov	sl, r8
 8006f5a:	4626      	mov	r6, r4
 8006f5c:	e596      	b.n	8006a8c <_dtoa_r+0x4cc>
 8006f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80fd 	beq.w	8007164 <_dtoa_r+0xba4>
 8006f6a:	2f00      	cmp	r7, #0
 8006f6c:	dd05      	ble.n	8006f7a <_dtoa_r+0x9ba>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	463a      	mov	r2, r7
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 fb48 	bl	8007608 <__lshift>
 8006f78:	4606      	mov	r6, r0
 8006f7a:	f1b8 0f00 	cmp.w	r8, #0
 8006f7e:	d05c      	beq.n	800703a <_dtoa_r+0xa7a>
 8006f80:	4628      	mov	r0, r5
 8006f82:	6871      	ldr	r1, [r6, #4]
 8006f84:	f000 f932 	bl	80071ec <_Balloc>
 8006f88:	4607      	mov	r7, r0
 8006f8a:	b928      	cbnz	r0, 8006f98 <_dtoa_r+0x9d8>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f92:	4b7f      	ldr	r3, [pc, #508]	; (8007190 <_dtoa_r+0xbd0>)
 8006f94:	f7ff bb28 	b.w	80065e8 <_dtoa_r+0x28>
 8006f98:	6932      	ldr	r2, [r6, #16]
 8006f9a:	f106 010c 	add.w	r1, r6, #12
 8006f9e:	3202      	adds	r2, #2
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	300c      	adds	r0, #12
 8006fa4:	f000 f914 	bl	80071d0 <memcpy>
 8006fa8:	2201      	movs	r2, #1
 8006faa:	4639      	mov	r1, r7
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 fb2b 	bl	8007608 <__lshift>
 8006fb2:	46b0      	mov	r8, r6
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	9308      	str	r3, [sp, #32]
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	444b      	add	r3, r9
 8006fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	4621      	mov	r1, r4
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	4658      	mov	r0, fp
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	f7ff fa66 	bl	80064a4 <quorem>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4641      	mov	r1, r8
 8006fdc:	3330      	adds	r3, #48	; 0x30
 8006fde:	9006      	str	r0, [sp, #24]
 8006fe0:	4658      	mov	r0, fp
 8006fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fe4:	f000 fb80 	bl	80076e8 <__mcmp>
 8006fe8:	4632      	mov	r2, r6
 8006fea:	4681      	mov	r9, r0
 8006fec:	4621      	mov	r1, r4
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 fb96 	bl	8007720 <__mdiff>
 8006ff4:	68c2      	ldr	r2, [r0, #12]
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ffa:	bb02      	cbnz	r2, 800703e <_dtoa_r+0xa7e>
 8006ffc:	4601      	mov	r1, r0
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 fb72 	bl	80076e8 <__mcmp>
 8007004:	4602      	mov	r2, r0
 8007006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007008:	4639      	mov	r1, r7
 800700a:	4628      	mov	r0, r5
 800700c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007010:	f000 f92c 	bl	800726c <_Bfree>
 8007014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007018:	9f08      	ldr	r7, [sp, #32]
 800701a:	ea43 0102 	orr.w	r1, r3, r2
 800701e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007020:	430b      	orrs	r3, r1
 8007022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007024:	d10d      	bne.n	8007042 <_dtoa_r+0xa82>
 8007026:	2b39      	cmp	r3, #57	; 0x39
 8007028:	d029      	beq.n	800707e <_dtoa_r+0xabe>
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	dd01      	ble.n	8007034 <_dtoa_r+0xa74>
 8007030:	9b06      	ldr	r3, [sp, #24]
 8007032:	3331      	adds	r3, #49	; 0x31
 8007034:	9a04      	ldr	r2, [sp, #16]
 8007036:	7013      	strb	r3, [r2, #0]
 8007038:	e776      	b.n	8006f28 <_dtoa_r+0x968>
 800703a:	4630      	mov	r0, r6
 800703c:	e7b9      	b.n	8006fb2 <_dtoa_r+0x9f2>
 800703e:	2201      	movs	r2, #1
 8007040:	e7e2      	b.n	8007008 <_dtoa_r+0xa48>
 8007042:	f1b9 0f00 	cmp.w	r9, #0
 8007046:	db06      	blt.n	8007056 <_dtoa_r+0xa96>
 8007048:	9922      	ldr	r1, [sp, #136]	; 0x88
 800704a:	ea41 0909 	orr.w	r9, r1, r9
 800704e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007050:	ea59 0101 	orrs.w	r1, r9, r1
 8007054:	d120      	bne.n	8007098 <_dtoa_r+0xad8>
 8007056:	2a00      	cmp	r2, #0
 8007058:	ddec      	ble.n	8007034 <_dtoa_r+0xa74>
 800705a:	4659      	mov	r1, fp
 800705c:	2201      	movs	r2, #1
 800705e:	4628      	mov	r0, r5
 8007060:	9308      	str	r3, [sp, #32]
 8007062:	f000 fad1 	bl	8007608 <__lshift>
 8007066:	4621      	mov	r1, r4
 8007068:	4683      	mov	fp, r0
 800706a:	f000 fb3d 	bl	80076e8 <__mcmp>
 800706e:	2800      	cmp	r0, #0
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	dc02      	bgt.n	800707a <_dtoa_r+0xaba>
 8007074:	d1de      	bne.n	8007034 <_dtoa_r+0xa74>
 8007076:	07da      	lsls	r2, r3, #31
 8007078:	d5dc      	bpl.n	8007034 <_dtoa_r+0xa74>
 800707a:	2b39      	cmp	r3, #57	; 0x39
 800707c:	d1d8      	bne.n	8007030 <_dtoa_r+0xa70>
 800707e:	2339      	movs	r3, #57	; 0x39
 8007080:	9a04      	ldr	r2, [sp, #16]
 8007082:	7013      	strb	r3, [r2, #0]
 8007084:	463b      	mov	r3, r7
 8007086:	461f      	mov	r7, r3
 8007088:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800708c:	3b01      	subs	r3, #1
 800708e:	2a39      	cmp	r2, #57	; 0x39
 8007090:	d050      	beq.n	8007134 <_dtoa_r+0xb74>
 8007092:	3201      	adds	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e747      	b.n	8006f28 <_dtoa_r+0x968>
 8007098:	2a00      	cmp	r2, #0
 800709a:	dd03      	ble.n	80070a4 <_dtoa_r+0xae4>
 800709c:	2b39      	cmp	r3, #57	; 0x39
 800709e:	d0ee      	beq.n	800707e <_dtoa_r+0xabe>
 80070a0:	3301      	adds	r3, #1
 80070a2:	e7c7      	b.n	8007034 <_dtoa_r+0xa74>
 80070a4:	9a08      	ldr	r2, [sp, #32]
 80070a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070ac:	428a      	cmp	r2, r1
 80070ae:	d02a      	beq.n	8007106 <_dtoa_r+0xb46>
 80070b0:	4659      	mov	r1, fp
 80070b2:	2300      	movs	r3, #0
 80070b4:	220a      	movs	r2, #10
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f8fa 	bl	80072b0 <__multadd>
 80070bc:	45b0      	cmp	r8, r6
 80070be:	4683      	mov	fp, r0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	f04f 020a 	mov.w	r2, #10
 80070c8:	4641      	mov	r1, r8
 80070ca:	4628      	mov	r0, r5
 80070cc:	d107      	bne.n	80070de <_dtoa_r+0xb1e>
 80070ce:	f000 f8ef 	bl	80072b0 <__multadd>
 80070d2:	4680      	mov	r8, r0
 80070d4:	4606      	mov	r6, r0
 80070d6:	9b08      	ldr	r3, [sp, #32]
 80070d8:	3301      	adds	r3, #1
 80070da:	9308      	str	r3, [sp, #32]
 80070dc:	e775      	b.n	8006fca <_dtoa_r+0xa0a>
 80070de:	f000 f8e7 	bl	80072b0 <__multadd>
 80070e2:	4631      	mov	r1, r6
 80070e4:	4680      	mov	r8, r0
 80070e6:	2300      	movs	r3, #0
 80070e8:	220a      	movs	r2, #10
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f8e0 	bl	80072b0 <__multadd>
 80070f0:	4606      	mov	r6, r0
 80070f2:	e7f0      	b.n	80070d6 <_dtoa_r+0xb16>
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	bfcc      	ite	gt
 80070fa:	464f      	movgt	r7, r9
 80070fc:	2701      	movle	r7, #1
 80070fe:	f04f 0800 	mov.w	r8, #0
 8007102:	9a03      	ldr	r2, [sp, #12]
 8007104:	4417      	add	r7, r2
 8007106:	4659      	mov	r1, fp
 8007108:	2201      	movs	r2, #1
 800710a:	4628      	mov	r0, r5
 800710c:	9308      	str	r3, [sp, #32]
 800710e:	f000 fa7b 	bl	8007608 <__lshift>
 8007112:	4621      	mov	r1, r4
 8007114:	4683      	mov	fp, r0
 8007116:	f000 fae7 	bl	80076e8 <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dcb2      	bgt.n	8007084 <_dtoa_r+0xac4>
 800711e:	d102      	bne.n	8007126 <_dtoa_r+0xb66>
 8007120:	9b08      	ldr	r3, [sp, #32]
 8007122:	07db      	lsls	r3, r3, #31
 8007124:	d4ae      	bmi.n	8007084 <_dtoa_r+0xac4>
 8007126:	463b      	mov	r3, r7
 8007128:	461f      	mov	r7, r3
 800712a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712e:	2a30      	cmp	r2, #48	; 0x30
 8007130:	d0fa      	beq.n	8007128 <_dtoa_r+0xb68>
 8007132:	e6f9      	b.n	8006f28 <_dtoa_r+0x968>
 8007134:	9a03      	ldr	r2, [sp, #12]
 8007136:	429a      	cmp	r2, r3
 8007138:	d1a5      	bne.n	8007086 <_dtoa_r+0xac6>
 800713a:	2331      	movs	r3, #49	; 0x31
 800713c:	f10a 0a01 	add.w	sl, sl, #1
 8007140:	e779      	b.n	8007036 <_dtoa_r+0xa76>
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <_dtoa_r+0xbd4>)
 8007144:	f7ff baa8 	b.w	8006698 <_dtoa_r+0xd8>
 8007148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800714a:	2b00      	cmp	r3, #0
 800714c:	f47f aa81 	bne.w	8006652 <_dtoa_r+0x92>
 8007150:	4b11      	ldr	r3, [pc, #68]	; (8007198 <_dtoa_r+0xbd8>)
 8007152:	f7ff baa1 	b.w	8006698 <_dtoa_r+0xd8>
 8007156:	f1b9 0f00 	cmp.w	r9, #0
 800715a:	dc03      	bgt.n	8007164 <_dtoa_r+0xba4>
 800715c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800715e:	2b02      	cmp	r3, #2
 8007160:	f73f aecb 	bgt.w	8006efa <_dtoa_r+0x93a>
 8007164:	9f03      	ldr	r7, [sp, #12]
 8007166:	4621      	mov	r1, r4
 8007168:	4658      	mov	r0, fp
 800716a:	f7ff f99b 	bl	80064a4 <quorem>
 800716e:	9a03      	ldr	r2, [sp, #12]
 8007170:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007174:	f807 3b01 	strb.w	r3, [r7], #1
 8007178:	1aba      	subs	r2, r7, r2
 800717a:	4591      	cmp	r9, r2
 800717c:	ddba      	ble.n	80070f4 <_dtoa_r+0xb34>
 800717e:	4659      	mov	r1, fp
 8007180:	2300      	movs	r3, #0
 8007182:	220a      	movs	r2, #10
 8007184:	4628      	mov	r0, r5
 8007186:	f000 f893 	bl	80072b0 <__multadd>
 800718a:	4683      	mov	fp, r0
 800718c:	e7eb      	b.n	8007166 <_dtoa_r+0xba6>
 800718e:	bf00      	nop
 8007190:	0800a547 	.word	0x0800a547
 8007194:	0800a4a4 	.word	0x0800a4a4
 8007198:	0800a4c8 	.word	0x0800a4c8

0800719c <_localeconv_r>:
 800719c:	4800      	ldr	r0, [pc, #0]	; (80071a0 <_localeconv_r+0x4>)
 800719e:	4770      	bx	lr
 80071a0:	20000174 	.word	0x20000174

080071a4 <malloc>:
 80071a4:	4b02      	ldr	r3, [pc, #8]	; (80071b0 <malloc+0xc>)
 80071a6:	4601      	mov	r1, r0
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f000 bc1d 	b.w	80079e8 <_malloc_r>
 80071ae:	bf00      	nop
 80071b0:	20000020 	.word	0x20000020

080071b4 <memchr>:
 80071b4:	4603      	mov	r3, r0
 80071b6:	b510      	push	{r4, lr}
 80071b8:	b2c9      	uxtb	r1, r1
 80071ba:	4402      	add	r2, r0
 80071bc:	4293      	cmp	r3, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	d101      	bne.n	80071c6 <memchr+0x12>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e003      	b.n	80071ce <memchr+0x1a>
 80071c6:	7804      	ldrb	r4, [r0, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	428c      	cmp	r4, r1
 80071cc:	d1f6      	bne.n	80071bc <memchr+0x8>
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <memcpy>:
 80071d0:	440a      	add	r2, r1
 80071d2:	4291      	cmp	r1, r2
 80071d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d8:	d100      	bne.n	80071dc <memcpy+0xc>
 80071da:	4770      	bx	lr
 80071dc:	b510      	push	{r4, lr}
 80071de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e2:	4291      	cmp	r1, r2
 80071e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e8:	d1f9      	bne.n	80071de <memcpy+0xe>
 80071ea:	bd10      	pop	{r4, pc}

080071ec <_Balloc>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	b976      	cbnz	r6, 8007214 <_Balloc+0x28>
 80071f6:	2010      	movs	r0, #16
 80071f8:	f7ff ffd4 	bl	80071a4 <malloc>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007200:	b920      	cbnz	r0, 800720c <_Balloc+0x20>
 8007202:	2166      	movs	r1, #102	; 0x66
 8007204:	4b17      	ldr	r3, [pc, #92]	; (8007264 <_Balloc+0x78>)
 8007206:	4818      	ldr	r0, [pc, #96]	; (8007268 <_Balloc+0x7c>)
 8007208:	f000 fdce 	bl	8007da8 <__assert_func>
 800720c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007210:	6006      	str	r6, [r0, #0]
 8007212:	60c6      	str	r6, [r0, #12]
 8007214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007216:	68f3      	ldr	r3, [r6, #12]
 8007218:	b183      	cbz	r3, 800723c <_Balloc+0x50>
 800721a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007222:	b9b8      	cbnz	r0, 8007254 <_Balloc+0x68>
 8007224:	2101      	movs	r1, #1
 8007226:	fa01 f605 	lsl.w	r6, r1, r5
 800722a:	1d72      	adds	r2, r6, #5
 800722c:	4620      	mov	r0, r4
 800722e:	0092      	lsls	r2, r2, #2
 8007230:	f000 fb5e 	bl	80078f0 <_calloc_r>
 8007234:	b160      	cbz	r0, 8007250 <_Balloc+0x64>
 8007236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800723a:	e00e      	b.n	800725a <_Balloc+0x6e>
 800723c:	2221      	movs	r2, #33	; 0x21
 800723e:	2104      	movs	r1, #4
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fb55 	bl	80078f0 <_calloc_r>
 8007246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007248:	60f0      	str	r0, [r6, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e4      	bne.n	800721a <_Balloc+0x2e>
 8007250:	2000      	movs	r0, #0
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	6802      	ldr	r2, [r0, #0]
 8007256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800725a:	2300      	movs	r3, #0
 800725c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007260:	e7f7      	b.n	8007252 <_Balloc+0x66>
 8007262:	bf00      	nop
 8007264:	0800a4d5 	.word	0x0800a4d5
 8007268:	0800a558 	.word	0x0800a558

0800726c <_Bfree>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007270:	4605      	mov	r5, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b976      	cbnz	r6, 8007294 <_Bfree+0x28>
 8007276:	2010      	movs	r0, #16
 8007278:	f7ff ff94 	bl	80071a4 <malloc>
 800727c:	4602      	mov	r2, r0
 800727e:	6268      	str	r0, [r5, #36]	; 0x24
 8007280:	b920      	cbnz	r0, 800728c <_Bfree+0x20>
 8007282:	218a      	movs	r1, #138	; 0x8a
 8007284:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <_Bfree+0x3c>)
 8007286:	4809      	ldr	r0, [pc, #36]	; (80072ac <_Bfree+0x40>)
 8007288:	f000 fd8e 	bl	8007da8 <__assert_func>
 800728c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007290:	6006      	str	r6, [r0, #0]
 8007292:	60c6      	str	r6, [r0, #12]
 8007294:	b13c      	cbz	r4, 80072a6 <_Bfree+0x3a>
 8007296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007298:	6862      	ldr	r2, [r4, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072a0:	6021      	str	r1, [r4, #0]
 80072a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	0800a4d5 	.word	0x0800a4d5
 80072ac:	0800a558 	.word	0x0800a558

080072b0 <__multadd>:
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	4607      	mov	r7, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	461e      	mov	r6, r3
 80072ba:	2000      	movs	r0, #0
 80072bc:	690d      	ldr	r5, [r1, #16]
 80072be:	f101 0c14 	add.w	ip, r1, #20
 80072c2:	f8dc 3000 	ldr.w	r3, [ip]
 80072c6:	3001      	adds	r0, #1
 80072c8:	b299      	uxth	r1, r3
 80072ca:	fb02 6101 	mla	r1, r2, r1, r6
 80072ce:	0c1e      	lsrs	r6, r3, #16
 80072d0:	0c0b      	lsrs	r3, r1, #16
 80072d2:	fb02 3306 	mla	r3, r2, r6, r3
 80072d6:	b289      	uxth	r1, r1
 80072d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072dc:	4285      	cmp	r5, r0
 80072de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072e2:	f84c 1b04 	str.w	r1, [ip], #4
 80072e6:	dcec      	bgt.n	80072c2 <__multadd+0x12>
 80072e8:	b30e      	cbz	r6, 800732e <__multadd+0x7e>
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dc19      	bgt.n	8007324 <__multadd+0x74>
 80072f0:	6861      	ldr	r1, [r4, #4]
 80072f2:	4638      	mov	r0, r7
 80072f4:	3101      	adds	r1, #1
 80072f6:	f7ff ff79 	bl	80071ec <_Balloc>
 80072fa:	4680      	mov	r8, r0
 80072fc:	b928      	cbnz	r0, 800730a <__multadd+0x5a>
 80072fe:	4602      	mov	r2, r0
 8007300:	21b5      	movs	r1, #181	; 0xb5
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <__multadd+0x84>)
 8007304:	480c      	ldr	r0, [pc, #48]	; (8007338 <__multadd+0x88>)
 8007306:	f000 fd4f 	bl	8007da8 <__assert_func>
 800730a:	6922      	ldr	r2, [r4, #16]
 800730c:	f104 010c 	add.w	r1, r4, #12
 8007310:	3202      	adds	r2, #2
 8007312:	0092      	lsls	r2, r2, #2
 8007314:	300c      	adds	r0, #12
 8007316:	f7ff ff5b 	bl	80071d0 <memcpy>
 800731a:	4621      	mov	r1, r4
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ffa5 	bl	800726c <_Bfree>
 8007322:	4644      	mov	r4, r8
 8007324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007328:	3501      	adds	r5, #1
 800732a:	615e      	str	r6, [r3, #20]
 800732c:	6125      	str	r5, [r4, #16]
 800732e:	4620      	mov	r0, r4
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	0800a547 	.word	0x0800a547
 8007338:	0800a558 	.word	0x0800a558

0800733c <__hi0bits>:
 800733c:	0c02      	lsrs	r2, r0, #16
 800733e:	0412      	lsls	r2, r2, #16
 8007340:	4603      	mov	r3, r0
 8007342:	b9ca      	cbnz	r2, 8007378 <__hi0bits+0x3c>
 8007344:	0403      	lsls	r3, r0, #16
 8007346:	2010      	movs	r0, #16
 8007348:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800734c:	bf04      	itt	eq
 800734e:	021b      	lsleq	r3, r3, #8
 8007350:	3008      	addeq	r0, #8
 8007352:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007356:	bf04      	itt	eq
 8007358:	011b      	lsleq	r3, r3, #4
 800735a:	3004      	addeq	r0, #4
 800735c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007360:	bf04      	itt	eq
 8007362:	009b      	lsleq	r3, r3, #2
 8007364:	3002      	addeq	r0, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	db05      	blt.n	8007376 <__hi0bits+0x3a>
 800736a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800736e:	f100 0001 	add.w	r0, r0, #1
 8007372:	bf08      	it	eq
 8007374:	2020      	moveq	r0, #32
 8007376:	4770      	bx	lr
 8007378:	2000      	movs	r0, #0
 800737a:	e7e5      	b.n	8007348 <__hi0bits+0xc>

0800737c <__lo0bits>:
 800737c:	6803      	ldr	r3, [r0, #0]
 800737e:	4602      	mov	r2, r0
 8007380:	f013 0007 	ands.w	r0, r3, #7
 8007384:	d00b      	beq.n	800739e <__lo0bits+0x22>
 8007386:	07d9      	lsls	r1, r3, #31
 8007388:	d421      	bmi.n	80073ce <__lo0bits+0x52>
 800738a:	0798      	lsls	r0, r3, #30
 800738c:	bf49      	itett	mi
 800738e:	085b      	lsrmi	r3, r3, #1
 8007390:	089b      	lsrpl	r3, r3, #2
 8007392:	2001      	movmi	r0, #1
 8007394:	6013      	strmi	r3, [r2, #0]
 8007396:	bf5c      	itt	pl
 8007398:	2002      	movpl	r0, #2
 800739a:	6013      	strpl	r3, [r2, #0]
 800739c:	4770      	bx	lr
 800739e:	b299      	uxth	r1, r3
 80073a0:	b909      	cbnz	r1, 80073a6 <__lo0bits+0x2a>
 80073a2:	2010      	movs	r0, #16
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2d9      	uxtb	r1, r3
 80073a8:	b909      	cbnz	r1, 80073ae <__lo0bits+0x32>
 80073aa:	3008      	adds	r0, #8
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	0719      	lsls	r1, r3, #28
 80073b0:	bf04      	itt	eq
 80073b2:	091b      	lsreq	r3, r3, #4
 80073b4:	3004      	addeq	r0, #4
 80073b6:	0799      	lsls	r1, r3, #30
 80073b8:	bf04      	itt	eq
 80073ba:	089b      	lsreq	r3, r3, #2
 80073bc:	3002      	addeq	r0, #2
 80073be:	07d9      	lsls	r1, r3, #31
 80073c0:	d403      	bmi.n	80073ca <__lo0bits+0x4e>
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	f100 0001 	add.w	r0, r0, #1
 80073c8:	d003      	beq.n	80073d2 <__lo0bits+0x56>
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	4770      	bx	lr
 80073ce:	2000      	movs	r0, #0
 80073d0:	4770      	bx	lr
 80073d2:	2020      	movs	r0, #32
 80073d4:	4770      	bx	lr
	...

080073d8 <__i2b>:
 80073d8:	b510      	push	{r4, lr}
 80073da:	460c      	mov	r4, r1
 80073dc:	2101      	movs	r1, #1
 80073de:	f7ff ff05 	bl	80071ec <_Balloc>
 80073e2:	4602      	mov	r2, r0
 80073e4:	b928      	cbnz	r0, 80073f2 <__i2b+0x1a>
 80073e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073ea:	4b04      	ldr	r3, [pc, #16]	; (80073fc <__i2b+0x24>)
 80073ec:	4804      	ldr	r0, [pc, #16]	; (8007400 <__i2b+0x28>)
 80073ee:	f000 fcdb 	bl	8007da8 <__assert_func>
 80073f2:	2301      	movs	r3, #1
 80073f4:	6144      	str	r4, [r0, #20]
 80073f6:	6103      	str	r3, [r0, #16]
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	bf00      	nop
 80073fc:	0800a547 	.word	0x0800a547
 8007400:	0800a558 	.word	0x0800a558

08007404 <__multiply>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	4691      	mov	r9, r2
 800740a:	690a      	ldr	r2, [r1, #16]
 800740c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007410:	460c      	mov	r4, r1
 8007412:	429a      	cmp	r2, r3
 8007414:	bfbe      	ittt	lt
 8007416:	460b      	movlt	r3, r1
 8007418:	464c      	movlt	r4, r9
 800741a:	4699      	movlt	r9, r3
 800741c:	6927      	ldr	r7, [r4, #16]
 800741e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	6861      	ldr	r1, [r4, #4]
 8007426:	eb07 060a 	add.w	r6, r7, sl
 800742a:	42b3      	cmp	r3, r6
 800742c:	b085      	sub	sp, #20
 800742e:	bfb8      	it	lt
 8007430:	3101      	addlt	r1, #1
 8007432:	f7ff fedb 	bl	80071ec <_Balloc>
 8007436:	b930      	cbnz	r0, 8007446 <__multiply+0x42>
 8007438:	4602      	mov	r2, r0
 800743a:	f240 115d 	movw	r1, #349	; 0x15d
 800743e:	4b43      	ldr	r3, [pc, #268]	; (800754c <__multiply+0x148>)
 8007440:	4843      	ldr	r0, [pc, #268]	; (8007550 <__multiply+0x14c>)
 8007442:	f000 fcb1 	bl	8007da8 <__assert_func>
 8007446:	f100 0514 	add.w	r5, r0, #20
 800744a:	462b      	mov	r3, r5
 800744c:	2200      	movs	r2, #0
 800744e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007452:	4543      	cmp	r3, r8
 8007454:	d321      	bcc.n	800749a <__multiply+0x96>
 8007456:	f104 0314 	add.w	r3, r4, #20
 800745a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800745e:	f109 0314 	add.w	r3, r9, #20
 8007462:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007466:	9202      	str	r2, [sp, #8]
 8007468:	1b3a      	subs	r2, r7, r4
 800746a:	3a15      	subs	r2, #21
 800746c:	f022 0203 	bic.w	r2, r2, #3
 8007470:	3204      	adds	r2, #4
 8007472:	f104 0115 	add.w	r1, r4, #21
 8007476:	428f      	cmp	r7, r1
 8007478:	bf38      	it	cc
 800747a:	2204      	movcc	r2, #4
 800747c:	9201      	str	r2, [sp, #4]
 800747e:	9a02      	ldr	r2, [sp, #8]
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d80c      	bhi.n	80074a0 <__multiply+0x9c>
 8007486:	2e00      	cmp	r6, #0
 8007488:	dd03      	ble.n	8007492 <__multiply+0x8e>
 800748a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800748e:	2b00      	cmp	r3, #0
 8007490:	d059      	beq.n	8007546 <__multiply+0x142>
 8007492:	6106      	str	r6, [r0, #16]
 8007494:	b005      	add	sp, #20
 8007496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749a:	f843 2b04 	str.w	r2, [r3], #4
 800749e:	e7d8      	b.n	8007452 <__multiply+0x4e>
 80074a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80074a4:	f1ba 0f00 	cmp.w	sl, #0
 80074a8:	d023      	beq.n	80074f2 <__multiply+0xee>
 80074aa:	46a9      	mov	r9, r5
 80074ac:	f04f 0c00 	mov.w	ip, #0
 80074b0:	f104 0e14 	add.w	lr, r4, #20
 80074b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074b8:	f8d9 1000 	ldr.w	r1, [r9]
 80074bc:	fa1f fb82 	uxth.w	fp, r2
 80074c0:	b289      	uxth	r1, r1
 80074c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80074c6:	4461      	add	r1, ip
 80074c8:	f8d9 c000 	ldr.w	ip, [r9]
 80074cc:	0c12      	lsrs	r2, r2, #16
 80074ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074d2:	fb0a c202 	mla	r2, sl, r2, ip
 80074d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074da:	b289      	uxth	r1, r1
 80074dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074e0:	4577      	cmp	r7, lr
 80074e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074e6:	f849 1b04 	str.w	r1, [r9], #4
 80074ea:	d8e3      	bhi.n	80074b4 <__multiply+0xb0>
 80074ec:	9a01      	ldr	r2, [sp, #4]
 80074ee:	f845 c002 	str.w	ip, [r5, r2]
 80074f2:	9a03      	ldr	r2, [sp, #12]
 80074f4:	3304      	adds	r3, #4
 80074f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	d020      	beq.n	8007542 <__multiply+0x13e>
 8007500:	46ae      	mov	lr, r5
 8007502:	f04f 0a00 	mov.w	sl, #0
 8007506:	6829      	ldr	r1, [r5, #0]
 8007508:	f104 0c14 	add.w	ip, r4, #20
 800750c:	f8bc b000 	ldrh.w	fp, [ip]
 8007510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007514:	b289      	uxth	r1, r1
 8007516:	fb09 220b 	mla	r2, r9, fp, r2
 800751a:	4492      	add	sl, r2
 800751c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007520:	f84e 1b04 	str.w	r1, [lr], #4
 8007524:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007528:	f8be 1000 	ldrh.w	r1, [lr]
 800752c:	0c12      	lsrs	r2, r2, #16
 800752e:	fb09 1102 	mla	r1, r9, r2, r1
 8007532:	4567      	cmp	r7, ip
 8007534:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007538:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800753c:	d8e6      	bhi.n	800750c <__multiply+0x108>
 800753e:	9a01      	ldr	r2, [sp, #4]
 8007540:	50a9      	str	r1, [r5, r2]
 8007542:	3504      	adds	r5, #4
 8007544:	e79b      	b.n	800747e <__multiply+0x7a>
 8007546:	3e01      	subs	r6, #1
 8007548:	e79d      	b.n	8007486 <__multiply+0x82>
 800754a:	bf00      	nop
 800754c:	0800a547 	.word	0x0800a547
 8007550:	0800a558 	.word	0x0800a558

08007554 <__pow5mult>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4615      	mov	r5, r2
 800755a:	f012 0203 	ands.w	r2, r2, #3
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	d007      	beq.n	8007574 <__pow5mult+0x20>
 8007564:	4c25      	ldr	r4, [pc, #148]	; (80075fc <__pow5mult+0xa8>)
 8007566:	3a01      	subs	r2, #1
 8007568:	2300      	movs	r3, #0
 800756a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800756e:	f7ff fe9f 	bl	80072b0 <__multadd>
 8007572:	4607      	mov	r7, r0
 8007574:	10ad      	asrs	r5, r5, #2
 8007576:	d03d      	beq.n	80075f4 <__pow5mult+0xa0>
 8007578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800757a:	b97c      	cbnz	r4, 800759c <__pow5mult+0x48>
 800757c:	2010      	movs	r0, #16
 800757e:	f7ff fe11 	bl	80071a4 <malloc>
 8007582:	4602      	mov	r2, r0
 8007584:	6270      	str	r0, [r6, #36]	; 0x24
 8007586:	b928      	cbnz	r0, 8007594 <__pow5mult+0x40>
 8007588:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800758c:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <__pow5mult+0xac>)
 800758e:	481d      	ldr	r0, [pc, #116]	; (8007604 <__pow5mult+0xb0>)
 8007590:	f000 fc0a 	bl	8007da8 <__assert_func>
 8007594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007598:	6004      	str	r4, [r0, #0]
 800759a:	60c4      	str	r4, [r0, #12]
 800759c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075a4:	b94c      	cbnz	r4, 80075ba <__pow5mult+0x66>
 80075a6:	f240 2171 	movw	r1, #625	; 0x271
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7ff ff14 	bl	80073d8 <__i2b>
 80075b0:	2300      	movs	r3, #0
 80075b2:	4604      	mov	r4, r0
 80075b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	07eb      	lsls	r3, r5, #31
 80075c0:	d50a      	bpl.n	80075d8 <__pow5mult+0x84>
 80075c2:	4639      	mov	r1, r7
 80075c4:	4622      	mov	r2, r4
 80075c6:	4630      	mov	r0, r6
 80075c8:	f7ff ff1c 	bl	8007404 <__multiply>
 80075cc:	4680      	mov	r8, r0
 80075ce:	4639      	mov	r1, r7
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff fe4b 	bl	800726c <_Bfree>
 80075d6:	4647      	mov	r7, r8
 80075d8:	106d      	asrs	r5, r5, #1
 80075da:	d00b      	beq.n	80075f4 <__pow5mult+0xa0>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	b938      	cbnz	r0, 80075f0 <__pow5mult+0x9c>
 80075e0:	4622      	mov	r2, r4
 80075e2:	4621      	mov	r1, r4
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff ff0d 	bl	8007404 <__multiply>
 80075ea:	6020      	str	r0, [r4, #0]
 80075ec:	f8c0 9000 	str.w	r9, [r0]
 80075f0:	4604      	mov	r4, r0
 80075f2:	e7e4      	b.n	80075be <__pow5mult+0x6a>
 80075f4:	4638      	mov	r0, r7
 80075f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fa:	bf00      	nop
 80075fc:	0800a6a8 	.word	0x0800a6a8
 8007600:	0800a4d5 	.word	0x0800a4d5
 8007604:	0800a558 	.word	0x0800a558

08007608 <__lshift>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	4607      	mov	r7, r0
 8007610:	4691      	mov	r9, r2
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	6849      	ldr	r1, [r1, #4]
 8007616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007620:	f108 0601 	add.w	r6, r8, #1
 8007624:	42b3      	cmp	r3, r6
 8007626:	db0b      	blt.n	8007640 <__lshift+0x38>
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff fddf 	bl	80071ec <_Balloc>
 800762e:	4605      	mov	r5, r0
 8007630:	b948      	cbnz	r0, 8007646 <__lshift+0x3e>
 8007632:	4602      	mov	r2, r0
 8007634:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007638:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <__lshift+0xd8>)
 800763a:	482a      	ldr	r0, [pc, #168]	; (80076e4 <__lshift+0xdc>)
 800763c:	f000 fbb4 	bl	8007da8 <__assert_func>
 8007640:	3101      	adds	r1, #1
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	e7ee      	b.n	8007624 <__lshift+0x1c>
 8007646:	2300      	movs	r3, #0
 8007648:	f100 0114 	add.w	r1, r0, #20
 800764c:	f100 0210 	add.w	r2, r0, #16
 8007650:	4618      	mov	r0, r3
 8007652:	4553      	cmp	r3, sl
 8007654:	db37      	blt.n	80076c6 <__lshift+0xbe>
 8007656:	6920      	ldr	r0, [r4, #16]
 8007658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800765c:	f104 0314 	add.w	r3, r4, #20
 8007660:	f019 091f 	ands.w	r9, r9, #31
 8007664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800766c:	d02f      	beq.n	80076ce <__lshift+0xc6>
 800766e:	468a      	mov	sl, r1
 8007670:	f04f 0c00 	mov.w	ip, #0
 8007674:	f1c9 0e20 	rsb	lr, r9, #32
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	fa02 f209 	lsl.w	r2, r2, r9
 800767e:	ea42 020c 	orr.w	r2, r2, ip
 8007682:	f84a 2b04 	str.w	r2, [sl], #4
 8007686:	f853 2b04 	ldr.w	r2, [r3], #4
 800768a:	4298      	cmp	r0, r3
 800768c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007690:	d8f2      	bhi.n	8007678 <__lshift+0x70>
 8007692:	1b03      	subs	r3, r0, r4
 8007694:	3b15      	subs	r3, #21
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	3304      	adds	r3, #4
 800769c:	f104 0215 	add.w	r2, r4, #21
 80076a0:	4290      	cmp	r0, r2
 80076a2:	bf38      	it	cc
 80076a4:	2304      	movcc	r3, #4
 80076a6:	f841 c003 	str.w	ip, [r1, r3]
 80076aa:	f1bc 0f00 	cmp.w	ip, #0
 80076ae:	d001      	beq.n	80076b4 <__lshift+0xac>
 80076b0:	f108 0602 	add.w	r6, r8, #2
 80076b4:	3e01      	subs	r6, #1
 80076b6:	4638      	mov	r0, r7
 80076b8:	4621      	mov	r1, r4
 80076ba:	612e      	str	r6, [r5, #16]
 80076bc:	f7ff fdd6 	bl	800726c <_Bfree>
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7c1      	b.n	8007652 <__lshift+0x4a>
 80076ce:	3904      	subs	r1, #4
 80076d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d4:	4298      	cmp	r0, r3
 80076d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80076da:	d8f9      	bhi.n	80076d0 <__lshift+0xc8>
 80076dc:	e7ea      	b.n	80076b4 <__lshift+0xac>
 80076de:	bf00      	nop
 80076e0:	0800a547 	.word	0x0800a547
 80076e4:	0800a558 	.word	0x0800a558

080076e8 <__mcmp>:
 80076e8:	4603      	mov	r3, r0
 80076ea:	690a      	ldr	r2, [r1, #16]
 80076ec:	6900      	ldr	r0, [r0, #16]
 80076ee:	b530      	push	{r4, r5, lr}
 80076f0:	1a80      	subs	r0, r0, r2
 80076f2:	d10d      	bne.n	8007710 <__mcmp+0x28>
 80076f4:	3314      	adds	r3, #20
 80076f6:	3114      	adds	r1, #20
 80076f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007700:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007704:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007708:	4295      	cmp	r5, r2
 800770a:	d002      	beq.n	8007712 <__mcmp+0x2a>
 800770c:	d304      	bcc.n	8007718 <__mcmp+0x30>
 800770e:	2001      	movs	r0, #1
 8007710:	bd30      	pop	{r4, r5, pc}
 8007712:	42a3      	cmp	r3, r4
 8007714:	d3f4      	bcc.n	8007700 <__mcmp+0x18>
 8007716:	e7fb      	b.n	8007710 <__mcmp+0x28>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	e7f8      	b.n	8007710 <__mcmp+0x28>
	...

08007720 <__mdiff>:
 8007720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	460d      	mov	r5, r1
 8007726:	4607      	mov	r7, r0
 8007728:	4611      	mov	r1, r2
 800772a:	4628      	mov	r0, r5
 800772c:	4614      	mov	r4, r2
 800772e:	f7ff ffdb 	bl	80076e8 <__mcmp>
 8007732:	1e06      	subs	r6, r0, #0
 8007734:	d111      	bne.n	800775a <__mdiff+0x3a>
 8007736:	4631      	mov	r1, r6
 8007738:	4638      	mov	r0, r7
 800773a:	f7ff fd57 	bl	80071ec <_Balloc>
 800773e:	4602      	mov	r2, r0
 8007740:	b928      	cbnz	r0, 800774e <__mdiff+0x2e>
 8007742:	f240 2132 	movw	r1, #562	; 0x232
 8007746:	4b3a      	ldr	r3, [pc, #232]	; (8007830 <__mdiff+0x110>)
 8007748:	483a      	ldr	r0, [pc, #232]	; (8007834 <__mdiff+0x114>)
 800774a:	f000 fb2d 	bl	8007da8 <__assert_func>
 800774e:	2301      	movs	r3, #1
 8007750:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007754:	4610      	mov	r0, r2
 8007756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	bfa4      	itt	ge
 800775c:	4623      	movge	r3, r4
 800775e:	462c      	movge	r4, r5
 8007760:	4638      	mov	r0, r7
 8007762:	6861      	ldr	r1, [r4, #4]
 8007764:	bfa6      	itte	ge
 8007766:	461d      	movge	r5, r3
 8007768:	2600      	movge	r6, #0
 800776a:	2601      	movlt	r6, #1
 800776c:	f7ff fd3e 	bl	80071ec <_Balloc>
 8007770:	4602      	mov	r2, r0
 8007772:	b918      	cbnz	r0, 800777c <__mdiff+0x5c>
 8007774:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007778:	4b2d      	ldr	r3, [pc, #180]	; (8007830 <__mdiff+0x110>)
 800777a:	e7e5      	b.n	8007748 <__mdiff+0x28>
 800777c:	f102 0814 	add.w	r8, r2, #20
 8007780:	46c2      	mov	sl, r8
 8007782:	f04f 0c00 	mov.w	ip, #0
 8007786:	6927      	ldr	r7, [r4, #16]
 8007788:	60c6      	str	r6, [r0, #12]
 800778a:	692e      	ldr	r6, [r5, #16]
 800778c:	f104 0014 	add.w	r0, r4, #20
 8007790:	f105 0914 	add.w	r9, r5, #20
 8007794:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007798:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800779c:	3410      	adds	r4, #16
 800779e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80077a6:	fa1f f18b 	uxth.w	r1, fp
 80077aa:	448c      	add	ip, r1
 80077ac:	b299      	uxth	r1, r3
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	ebac 0101 	sub.w	r1, ip, r1
 80077b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077bc:	b289      	uxth	r1, r1
 80077be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80077c2:	454e      	cmp	r6, r9
 80077c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80077c8:	f84a 3b04 	str.w	r3, [sl], #4
 80077cc:	d8e7      	bhi.n	800779e <__mdiff+0x7e>
 80077ce:	1b73      	subs	r3, r6, r5
 80077d0:	3b15      	subs	r3, #21
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	3515      	adds	r5, #21
 80077d8:	3304      	adds	r3, #4
 80077da:	42ae      	cmp	r6, r5
 80077dc:	bf38      	it	cc
 80077de:	2304      	movcc	r3, #4
 80077e0:	4418      	add	r0, r3
 80077e2:	4443      	add	r3, r8
 80077e4:	461e      	mov	r6, r3
 80077e6:	4605      	mov	r5, r0
 80077e8:	4575      	cmp	r5, lr
 80077ea:	d30e      	bcc.n	800780a <__mdiff+0xea>
 80077ec:	f10e 0103 	add.w	r1, lr, #3
 80077f0:	1a09      	subs	r1, r1, r0
 80077f2:	f021 0103 	bic.w	r1, r1, #3
 80077f6:	3803      	subs	r0, #3
 80077f8:	4586      	cmp	lr, r0
 80077fa:	bf38      	it	cc
 80077fc:	2100      	movcc	r1, #0
 80077fe:	4419      	add	r1, r3
 8007800:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007804:	b18b      	cbz	r3, 800782a <__mdiff+0x10a>
 8007806:	6117      	str	r7, [r2, #16]
 8007808:	e7a4      	b.n	8007754 <__mdiff+0x34>
 800780a:	f855 8b04 	ldr.w	r8, [r5], #4
 800780e:	fa1f f188 	uxth.w	r1, r8
 8007812:	4461      	add	r1, ip
 8007814:	140c      	asrs	r4, r1, #16
 8007816:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800781a:	b289      	uxth	r1, r1
 800781c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007820:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007824:	f846 1b04 	str.w	r1, [r6], #4
 8007828:	e7de      	b.n	80077e8 <__mdiff+0xc8>
 800782a:	3f01      	subs	r7, #1
 800782c:	e7e8      	b.n	8007800 <__mdiff+0xe0>
 800782e:	bf00      	nop
 8007830:	0800a547 	.word	0x0800a547
 8007834:	0800a558 	.word	0x0800a558

08007838 <__d2b>:
 8007838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800783c:	2101      	movs	r1, #1
 800783e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007842:	4690      	mov	r8, r2
 8007844:	461d      	mov	r5, r3
 8007846:	f7ff fcd1 	bl	80071ec <_Balloc>
 800784a:	4604      	mov	r4, r0
 800784c:	b930      	cbnz	r0, 800785c <__d2b+0x24>
 800784e:	4602      	mov	r2, r0
 8007850:	f240 310a 	movw	r1, #778	; 0x30a
 8007854:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <__d2b+0xb0>)
 8007856:	4825      	ldr	r0, [pc, #148]	; (80078ec <__d2b+0xb4>)
 8007858:	f000 faa6 	bl	8007da8 <__assert_func>
 800785c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007860:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007864:	bb2d      	cbnz	r5, 80078b2 <__d2b+0x7a>
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	f1b8 0300 	subs.w	r3, r8, #0
 800786c:	d026      	beq.n	80078bc <__d2b+0x84>
 800786e:	4668      	mov	r0, sp
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	f7ff fd83 	bl	800737c <__lo0bits>
 8007876:	9900      	ldr	r1, [sp, #0]
 8007878:	b1f0      	cbz	r0, 80078b8 <__d2b+0x80>
 800787a:	9a01      	ldr	r2, [sp, #4]
 800787c:	f1c0 0320 	rsb	r3, r0, #32
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	430b      	orrs	r3, r1
 8007886:	40c2      	lsrs	r2, r0
 8007888:	6163      	str	r3, [r4, #20]
 800788a:	9201      	str	r2, [sp, #4]
 800788c:	9b01      	ldr	r3, [sp, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2102      	movne	r1, #2
 8007894:	2101      	moveq	r1, #1
 8007896:	61a3      	str	r3, [r4, #24]
 8007898:	6121      	str	r1, [r4, #16]
 800789a:	b1c5      	cbz	r5, 80078ce <__d2b+0x96>
 800789c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078a0:	4405      	add	r5, r0
 80078a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078a6:	603d      	str	r5, [r7, #0]
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	4620      	mov	r0, r4
 80078ac:	b002      	add	sp, #8
 80078ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078b6:	e7d6      	b.n	8007866 <__d2b+0x2e>
 80078b8:	6161      	str	r1, [r4, #20]
 80078ba:	e7e7      	b.n	800788c <__d2b+0x54>
 80078bc:	a801      	add	r0, sp, #4
 80078be:	f7ff fd5d 	bl	800737c <__lo0bits>
 80078c2:	2101      	movs	r1, #1
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	6121      	str	r1, [r4, #16]
 80078c8:	6163      	str	r3, [r4, #20]
 80078ca:	3020      	adds	r0, #32
 80078cc:	e7e5      	b.n	800789a <__d2b+0x62>
 80078ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80078d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078d6:	6038      	str	r0, [r7, #0]
 80078d8:	6918      	ldr	r0, [r3, #16]
 80078da:	f7ff fd2f 	bl	800733c <__hi0bits>
 80078de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80078e2:	6031      	str	r1, [r6, #0]
 80078e4:	e7e1      	b.n	80078aa <__d2b+0x72>
 80078e6:	bf00      	nop
 80078e8:	0800a547 	.word	0x0800a547
 80078ec:	0800a558 	.word	0x0800a558

080078f0 <_calloc_r>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	fba1 5402 	umull	r5, r4, r1, r2
 80078f6:	b934      	cbnz	r4, 8007906 <_calloc_r+0x16>
 80078f8:	4629      	mov	r1, r5
 80078fa:	f000 f875 	bl	80079e8 <_malloc_r>
 80078fe:	4606      	mov	r6, r0
 8007900:	b928      	cbnz	r0, 800790e <_calloc_r+0x1e>
 8007902:	4630      	mov	r0, r6
 8007904:	bd70      	pop	{r4, r5, r6, pc}
 8007906:	220c      	movs	r2, #12
 8007908:	2600      	movs	r6, #0
 800790a:	6002      	str	r2, [r0, #0]
 800790c:	e7f9      	b.n	8007902 <_calloc_r+0x12>
 800790e:	462a      	mov	r2, r5
 8007910:	4621      	mov	r1, r4
 8007912:	f7fe f93f 	bl	8005b94 <memset>
 8007916:	e7f4      	b.n	8007902 <_calloc_r+0x12>

08007918 <_free_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4605      	mov	r5, r0
 800791c:	2900      	cmp	r1, #0
 800791e:	d040      	beq.n	80079a2 <_free_r+0x8a>
 8007920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007924:	1f0c      	subs	r4, r1, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfb8      	it	lt
 800792a:	18e4      	addlt	r4, r4, r3
 800792c:	f000 fa98 	bl	8007e60 <__malloc_lock>
 8007930:	4a1c      	ldr	r2, [pc, #112]	; (80079a4 <_free_r+0x8c>)
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x2c>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	4628      	mov	r0, r5
 800793c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007940:	f000 ba94 	b.w	8007e6c <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x42>
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	1821      	adds	r1, r4, r0
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1809      	addeq	r1, r1, r0
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x1e>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x4c>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x42>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1850      	adds	r0, r2, r1
 8007968:	42a0      	cmp	r0, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x6c>
 800796c:	6820      	ldr	r0, [r4, #0]
 800796e:	4401      	add	r1, r0
 8007970:	1850      	adds	r0, r2, r1
 8007972:	4283      	cmp	r3, r0
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x22>
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4401      	add	r1, r0
 800797e:	6011      	str	r1, [r2, #0]
 8007980:	6053      	str	r3, [r2, #4]
 8007982:	e7da      	b.n	800793a <_free_r+0x22>
 8007984:	d902      	bls.n	800798c <_free_r+0x74>
 8007986:	230c      	movs	r3, #12
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x22>
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	1821      	adds	r1, r4, r0
 8007990:	428b      	cmp	r3, r1
 8007992:	bf01      	itttt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	1809      	addeq	r1, r1, r0
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6063      	str	r3, [r4, #4]
 800799e:	6054      	str	r4, [r2, #4]
 80079a0:	e7cb      	b.n	800793a <_free_r+0x22>
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000b88 	.word	0x20000b88

080079a8 <sbrk_aligned>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4e0e      	ldr	r6, [pc, #56]	; (80079e4 <sbrk_aligned+0x3c>)
 80079ac:	460c      	mov	r4, r1
 80079ae:	6831      	ldr	r1, [r6, #0]
 80079b0:	4605      	mov	r5, r0
 80079b2:	b911      	cbnz	r1, 80079ba <sbrk_aligned+0x12>
 80079b4:	f000 f9e8 	bl	8007d88 <_sbrk_r>
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 f9e3 	bl	8007d88 <_sbrk_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d00a      	beq.n	80079dc <sbrk_aligned+0x34>
 80079c6:	1cc4      	adds	r4, r0, #3
 80079c8:	f024 0403 	bic.w	r4, r4, #3
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d007      	beq.n	80079e0 <sbrk_aligned+0x38>
 80079d0:	1a21      	subs	r1, r4, r0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f9d8 	bl	8007d88 <_sbrk_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d101      	bne.n	80079e0 <sbrk_aligned+0x38>
 80079dc:	f04f 34ff 	mov.w	r4, #4294967295
 80079e0:	4620      	mov	r0, r4
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	20000b8c 	.word	0x20000b8c

080079e8 <_malloc_r>:
 80079e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	1ccd      	adds	r5, r1, #3
 80079ee:	f025 0503 	bic.w	r5, r5, #3
 80079f2:	3508      	adds	r5, #8
 80079f4:	2d0c      	cmp	r5, #12
 80079f6:	bf38      	it	cc
 80079f8:	250c      	movcc	r5, #12
 80079fa:	2d00      	cmp	r5, #0
 80079fc:	4607      	mov	r7, r0
 80079fe:	db01      	blt.n	8007a04 <_malloc_r+0x1c>
 8007a00:	42a9      	cmp	r1, r5
 8007a02:	d905      	bls.n	8007a10 <_malloc_r+0x28>
 8007a04:	230c      	movs	r3, #12
 8007a06:	2600      	movs	r6, #0
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	4e2e      	ldr	r6, [pc, #184]	; (8007acc <_malloc_r+0xe4>)
 8007a12:	f000 fa25 	bl	8007e60 <__malloc_lock>
 8007a16:	6833      	ldr	r3, [r6, #0]
 8007a18:	461c      	mov	r4, r3
 8007a1a:	bb34      	cbnz	r4, 8007a6a <_malloc_r+0x82>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff ffc2 	bl	80079a8 <sbrk_aligned>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	4604      	mov	r4, r0
 8007a28:	d14d      	bne.n	8007ac6 <_malloc_r+0xde>
 8007a2a:	6834      	ldr	r4, [r6, #0]
 8007a2c:	4626      	mov	r6, r4
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d140      	bne.n	8007ab4 <_malloc_r+0xcc>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	4631      	mov	r1, r6
 8007a36:	4638      	mov	r0, r7
 8007a38:	eb04 0803 	add.w	r8, r4, r3
 8007a3c:	f000 f9a4 	bl	8007d88 <_sbrk_r>
 8007a40:	4580      	cmp	r8, r0
 8007a42:	d13a      	bne.n	8007aba <_malloc_r+0xd2>
 8007a44:	6821      	ldr	r1, [r4, #0]
 8007a46:	3503      	adds	r5, #3
 8007a48:	1a6d      	subs	r5, r5, r1
 8007a4a:	f025 0503 	bic.w	r5, r5, #3
 8007a4e:	3508      	adds	r5, #8
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	bf38      	it	cc
 8007a54:	250c      	movcc	r5, #12
 8007a56:	4638      	mov	r0, r7
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7ff ffa5 	bl	80079a8 <sbrk_aligned>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d02b      	beq.n	8007aba <_malloc_r+0xd2>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	442b      	add	r3, r5
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	e00e      	b.n	8007a88 <_malloc_r+0xa0>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	1b52      	subs	r2, r2, r5
 8007a6e:	d41e      	bmi.n	8007aae <_malloc_r+0xc6>
 8007a70:	2a0b      	cmp	r2, #11
 8007a72:	d916      	bls.n	8007aa2 <_malloc_r+0xba>
 8007a74:	1961      	adds	r1, r4, r5
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	6025      	str	r5, [r4, #0]
 8007a7a:	bf18      	it	ne
 8007a7c:	6059      	strne	r1, [r3, #4]
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	bf08      	it	eq
 8007a82:	6031      	streq	r1, [r6, #0]
 8007a84:	5162      	str	r2, [r4, r5]
 8007a86:	604b      	str	r3, [r1, #4]
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f104 060b 	add.w	r6, r4, #11
 8007a8e:	f000 f9ed 	bl	8007e6c <__malloc_unlock>
 8007a92:	f026 0607 	bic.w	r6, r6, #7
 8007a96:	1d23      	adds	r3, r4, #4
 8007a98:	1af2      	subs	r2, r6, r3
 8007a9a:	d0b6      	beq.n	8007a0a <_malloc_r+0x22>
 8007a9c:	1b9b      	subs	r3, r3, r6
 8007a9e:	50a3      	str	r3, [r4, r2]
 8007aa0:	e7b3      	b.n	8007a0a <_malloc_r+0x22>
 8007aa2:	6862      	ldr	r2, [r4, #4]
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	bf0c      	ite	eq
 8007aa8:	6032      	streq	r2, [r6, #0]
 8007aaa:	605a      	strne	r2, [r3, #4]
 8007aac:	e7ec      	b.n	8007a88 <_malloc_r+0xa0>
 8007aae:	4623      	mov	r3, r4
 8007ab0:	6864      	ldr	r4, [r4, #4]
 8007ab2:	e7b2      	b.n	8007a1a <_malloc_r+0x32>
 8007ab4:	4634      	mov	r4, r6
 8007ab6:	6876      	ldr	r6, [r6, #4]
 8007ab8:	e7b9      	b.n	8007a2e <_malloc_r+0x46>
 8007aba:	230c      	movs	r3, #12
 8007abc:	4638      	mov	r0, r7
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	f000 f9d4 	bl	8007e6c <__malloc_unlock>
 8007ac4:	e7a1      	b.n	8007a0a <_malloc_r+0x22>
 8007ac6:	6025      	str	r5, [r4, #0]
 8007ac8:	e7de      	b.n	8007a88 <_malloc_r+0xa0>
 8007aca:	bf00      	nop
 8007acc:	20000b88 	.word	0x20000b88

08007ad0 <__ssputs_r>:
 8007ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	688e      	ldr	r6, [r1, #8]
 8007ad6:	4682      	mov	sl, r0
 8007ad8:	429e      	cmp	r6, r3
 8007ada:	460c      	mov	r4, r1
 8007adc:	4690      	mov	r8, r2
 8007ade:	461f      	mov	r7, r3
 8007ae0:	d838      	bhi.n	8007b54 <__ssputs_r+0x84>
 8007ae2:	898a      	ldrh	r2, [r1, #12]
 8007ae4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ae8:	d032      	beq.n	8007b50 <__ssputs_r+0x80>
 8007aea:	6825      	ldr	r5, [r4, #0]
 8007aec:	6909      	ldr	r1, [r1, #16]
 8007aee:	3301      	adds	r3, #1
 8007af0:	eba5 0901 	sub.w	r9, r5, r1
 8007af4:	6965      	ldr	r5, [r4, #20]
 8007af6:	444b      	add	r3, r9
 8007af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007afc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b00:	106d      	asrs	r5, r5, #1
 8007b02:	429d      	cmp	r5, r3
 8007b04:	bf38      	it	cc
 8007b06:	461d      	movcc	r5, r3
 8007b08:	0553      	lsls	r3, r2, #21
 8007b0a:	d531      	bpl.n	8007b70 <__ssputs_r+0xa0>
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7ff ff6b 	bl	80079e8 <_malloc_r>
 8007b12:	4606      	mov	r6, r0
 8007b14:	b950      	cbnz	r0, 8007b2c <__ssputs_r+0x5c>
 8007b16:	230c      	movs	r3, #12
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	f8ca 3000 	str.w	r3, [sl]
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	464a      	mov	r2, r9
 8007b2e:	6921      	ldr	r1, [r4, #16]
 8007b30:	f7ff fb4e 	bl	80071d0 <memcpy>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	6126      	str	r6, [r4, #16]
 8007b42:	444e      	add	r6, r9
 8007b44:	6026      	str	r6, [r4, #0]
 8007b46:	463e      	mov	r6, r7
 8007b48:	6165      	str	r5, [r4, #20]
 8007b4a:	eba5 0509 	sub.w	r5, r5, r9
 8007b4e:	60a5      	str	r5, [r4, #8]
 8007b50:	42be      	cmp	r6, r7
 8007b52:	d900      	bls.n	8007b56 <__ssputs_r+0x86>
 8007b54:	463e      	mov	r6, r7
 8007b56:	4632      	mov	r2, r6
 8007b58:	4641      	mov	r1, r8
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	f000 f966 	bl	8007e2c <memmove>
 8007b60:	68a3      	ldr	r3, [r4, #8]
 8007b62:	2000      	movs	r0, #0
 8007b64:	1b9b      	subs	r3, r3, r6
 8007b66:	60a3      	str	r3, [r4, #8]
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	4433      	add	r3, r6
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	e7db      	b.n	8007b28 <__ssputs_r+0x58>
 8007b70:	462a      	mov	r2, r5
 8007b72:	f000 f981 	bl	8007e78 <_realloc_r>
 8007b76:	4606      	mov	r6, r0
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d1e1      	bne.n	8007b40 <__ssputs_r+0x70>
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	6921      	ldr	r1, [r4, #16]
 8007b80:	f7ff feca 	bl	8007918 <_free_r>
 8007b84:	e7c7      	b.n	8007b16 <__ssputs_r+0x46>
	...

08007b88 <_svfiprintf_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	4698      	mov	r8, r3
 8007b8e:	898b      	ldrh	r3, [r1, #12]
 8007b90:	4607      	mov	r7, r0
 8007b92:	061b      	lsls	r3, r3, #24
 8007b94:	460d      	mov	r5, r1
 8007b96:	4614      	mov	r4, r2
 8007b98:	b09d      	sub	sp, #116	; 0x74
 8007b9a:	d50e      	bpl.n	8007bba <_svfiprintf_r+0x32>
 8007b9c:	690b      	ldr	r3, [r1, #16]
 8007b9e:	b963      	cbnz	r3, 8007bba <_svfiprintf_r+0x32>
 8007ba0:	2140      	movs	r1, #64	; 0x40
 8007ba2:	f7ff ff21 	bl	80079e8 <_malloc_r>
 8007ba6:	6028      	str	r0, [r5, #0]
 8007ba8:	6128      	str	r0, [r5, #16]
 8007baa:	b920      	cbnz	r0, 8007bb6 <_svfiprintf_r+0x2e>
 8007bac:	230c      	movs	r3, #12
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	e0d1      	b.n	8007d5a <_svfiprintf_r+0x1d2>
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	616b      	str	r3, [r5, #20]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bbe:	2320      	movs	r3, #32
 8007bc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bc4:	2330      	movs	r3, #48	; 0x30
 8007bc6:	f04f 0901 	mov.w	r9, #1
 8007bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d74 <_svfiprintf_r+0x1ec>
 8007bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	469a      	mov	sl, r3
 8007bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bde:	b10a      	cbz	r2, 8007be4 <_svfiprintf_r+0x5c>
 8007be0:	2a25      	cmp	r2, #37	; 0x25
 8007be2:	d1f9      	bne.n	8007bd8 <_svfiprintf_r+0x50>
 8007be4:	ebba 0b04 	subs.w	fp, sl, r4
 8007be8:	d00b      	beq.n	8007c02 <_svfiprintf_r+0x7a>
 8007bea:	465b      	mov	r3, fp
 8007bec:	4622      	mov	r2, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ff6d 	bl	8007ad0 <__ssputs_r>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f000 80aa 	beq.w	8007d50 <_svfiprintf_r+0x1c8>
 8007bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bfe:	445a      	add	r2, fp
 8007c00:	9209      	str	r2, [sp, #36]	; 0x24
 8007c02:	f89a 3000 	ldrb.w	r3, [sl]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80a2 	beq.w	8007d50 <_svfiprintf_r+0x1c8>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c16:	f10a 0a01 	add.w	sl, sl, #1
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	9307      	str	r3, [sp, #28]
 8007c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c22:	931a      	str	r3, [sp, #104]	; 0x68
 8007c24:	4654      	mov	r4, sl
 8007c26:	2205      	movs	r2, #5
 8007c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2c:	4851      	ldr	r0, [pc, #324]	; (8007d74 <_svfiprintf_r+0x1ec>)
 8007c2e:	f7ff fac1 	bl	80071b4 <memchr>
 8007c32:	9a04      	ldr	r2, [sp, #16]
 8007c34:	b9d8      	cbnz	r0, 8007c6e <_svfiprintf_r+0xe6>
 8007c36:	06d0      	lsls	r0, r2, #27
 8007c38:	bf44      	itt	mi
 8007c3a:	2320      	movmi	r3, #32
 8007c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c40:	0711      	lsls	r1, r2, #28
 8007c42:	bf44      	itt	mi
 8007c44:	232b      	movmi	r3, #43	; 0x2b
 8007c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c50:	d015      	beq.n	8007c7e <_svfiprintf_r+0xf6>
 8007c52:	4654      	mov	r4, sl
 8007c54:	2000      	movs	r0, #0
 8007c56:	f04f 0c0a 	mov.w	ip, #10
 8007c5a:	9a07      	ldr	r2, [sp, #28]
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c62:	3b30      	subs	r3, #48	; 0x30
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d94e      	bls.n	8007d06 <_svfiprintf_r+0x17e>
 8007c68:	b1b0      	cbz	r0, 8007c98 <_svfiprintf_r+0x110>
 8007c6a:	9207      	str	r2, [sp, #28]
 8007c6c:	e014      	b.n	8007c98 <_svfiprintf_r+0x110>
 8007c6e:	eba0 0308 	sub.w	r3, r0, r8
 8007c72:	fa09 f303 	lsl.w	r3, r9, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	46a2      	mov	sl, r4
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	e7d2      	b.n	8007c24 <_svfiprintf_r+0x9c>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	1d19      	adds	r1, r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	9103      	str	r1, [sp, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfbb      	ittet	lt
 8007c8a:	425b      	neglt	r3, r3
 8007c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c90:	9307      	strge	r3, [sp, #28]
 8007c92:	9307      	strlt	r3, [sp, #28]
 8007c94:	bfb8      	it	lt
 8007c96:	9204      	strlt	r2, [sp, #16]
 8007c98:	7823      	ldrb	r3, [r4, #0]
 8007c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c9c:	d10c      	bne.n	8007cb8 <_svfiprintf_r+0x130>
 8007c9e:	7863      	ldrb	r3, [r4, #1]
 8007ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca2:	d135      	bne.n	8007d10 <_svfiprintf_r+0x188>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	3402      	adds	r4, #2
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9203      	str	r2, [sp, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfb8      	it	lt
 8007cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007d78 <_svfiprintf_r+0x1f0>
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	7821      	ldrb	r1, [r4, #0]
 8007cc2:	f7ff fa77 	bl	80071b4 <memchr>
 8007cc6:	b140      	cbz	r0, 8007cda <_svfiprintf_r+0x152>
 8007cc8:	2340      	movs	r3, #64	; 0x40
 8007cca:	eba0 000a 	sub.w	r0, r0, sl
 8007cce:	fa03 f000 	lsl.w	r0, r3, r0
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	3401      	adds	r4, #1
 8007cd6:	4303      	orrs	r3, r0
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	2206      	movs	r2, #6
 8007ce0:	4826      	ldr	r0, [pc, #152]	; (8007d7c <_svfiprintf_r+0x1f4>)
 8007ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ce6:	f7ff fa65 	bl	80071b4 <memchr>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d038      	beq.n	8007d60 <_svfiprintf_r+0x1d8>
 8007cee:	4b24      	ldr	r3, [pc, #144]	; (8007d80 <_svfiprintf_r+0x1f8>)
 8007cf0:	bb1b      	cbnz	r3, 8007d3a <_svfiprintf_r+0x1b2>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	3307      	adds	r3, #7
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	9303      	str	r3, [sp, #12]
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	4433      	add	r3, r6
 8007d02:	9309      	str	r3, [sp, #36]	; 0x24
 8007d04:	e767      	b.n	8007bd6 <_svfiprintf_r+0x4e>
 8007d06:	460c      	mov	r4, r1
 8007d08:	2001      	movs	r0, #1
 8007d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d0e:	e7a5      	b.n	8007c5c <_svfiprintf_r+0xd4>
 8007d10:	2300      	movs	r3, #0
 8007d12:	f04f 0c0a 	mov.w	ip, #10
 8007d16:	4619      	mov	r1, r3
 8007d18:	3401      	adds	r4, #1
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d22:	3a30      	subs	r2, #48	; 0x30
 8007d24:	2a09      	cmp	r2, #9
 8007d26:	d903      	bls.n	8007d30 <_svfiprintf_r+0x1a8>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0c5      	beq.n	8007cb8 <_svfiprintf_r+0x130>
 8007d2c:	9105      	str	r1, [sp, #20]
 8007d2e:	e7c3      	b.n	8007cb8 <_svfiprintf_r+0x130>
 8007d30:	4604      	mov	r4, r0
 8007d32:	2301      	movs	r3, #1
 8007d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d38:	e7f0      	b.n	8007d1c <_svfiprintf_r+0x194>
 8007d3a:	ab03      	add	r3, sp, #12
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4638      	mov	r0, r7
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <_svfiprintf_r+0x1fc>)
 8007d44:	a904      	add	r1, sp, #16
 8007d46:	f7fd ffcb 	bl	8005ce0 <_printf_float>
 8007d4a:	1c42      	adds	r2, r0, #1
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	d1d6      	bne.n	8007cfe <_svfiprintf_r+0x176>
 8007d50:	89ab      	ldrh	r3, [r5, #12]
 8007d52:	065b      	lsls	r3, r3, #25
 8007d54:	f53f af2c 	bmi.w	8007bb0 <_svfiprintf_r+0x28>
 8007d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d5a:	b01d      	add	sp, #116	; 0x74
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	ab03      	add	r3, sp, #12
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	462a      	mov	r2, r5
 8007d66:	4638      	mov	r0, r7
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <_svfiprintf_r+0x1fc>)
 8007d6a:	a904      	add	r1, sp, #16
 8007d6c:	f7fe fa54 	bl	8006218 <_printf_i>
 8007d70:	e7eb      	b.n	8007d4a <_svfiprintf_r+0x1c2>
 8007d72:	bf00      	nop
 8007d74:	0800a6b4 	.word	0x0800a6b4
 8007d78:	0800a6ba 	.word	0x0800a6ba
 8007d7c:	0800a6be 	.word	0x0800a6be
 8007d80:	08005ce1 	.word	0x08005ce1
 8007d84:	08007ad1 	.word	0x08007ad1

08007d88 <_sbrk_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4d05      	ldr	r5, [pc, #20]	; (8007da4 <_sbrk_r+0x1c>)
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f7fa f9c6 	bl	8002124 <_sbrk>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_sbrk_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_sbrk_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	20000b90 	.word	0x20000b90

08007da8 <__assert_func>:
 8007da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007daa:	4614      	mov	r4, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <__assert_func+0x2c>)
 8007db0:	4605      	mov	r5, r0
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68d8      	ldr	r0, [r3, #12]
 8007db6:	b14c      	cbz	r4, 8007dcc <__assert_func+0x24>
 8007db8:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <__assert_func+0x30>)
 8007dba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dbe:	9100      	str	r1, [sp, #0]
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	4906      	ldr	r1, [pc, #24]	; (8007ddc <__assert_func+0x34>)
 8007dc4:	f000 f80e 	bl	8007de4 <fiprintf>
 8007dc8:	f000 faaa 	bl	8008320 <abort>
 8007dcc:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <__assert_func+0x38>)
 8007dce:	461c      	mov	r4, r3
 8007dd0:	e7f3      	b.n	8007dba <__assert_func+0x12>
 8007dd2:	bf00      	nop
 8007dd4:	20000020 	.word	0x20000020
 8007dd8:	0800a6c5 	.word	0x0800a6c5
 8007ddc:	0800a6d2 	.word	0x0800a6d2
 8007de0:	0800a700 	.word	0x0800a700

08007de4 <fiprintf>:
 8007de4:	b40e      	push	{r1, r2, r3}
 8007de6:	b503      	push	{r0, r1, lr}
 8007de8:	4601      	mov	r1, r0
 8007dea:	ab03      	add	r3, sp, #12
 8007dec:	4805      	ldr	r0, [pc, #20]	; (8007e04 <fiprintf+0x20>)
 8007dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	f000 f895 	bl	8007f24 <_vfiprintf_r>
 8007dfa:	b002      	add	sp, #8
 8007dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e00:	b003      	add	sp, #12
 8007e02:	4770      	bx	lr
 8007e04:	20000020 	.word	0x20000020

08007e08 <__ascii_mbtowc>:
 8007e08:	b082      	sub	sp, #8
 8007e0a:	b901      	cbnz	r1, 8007e0e <__ascii_mbtowc+0x6>
 8007e0c:	a901      	add	r1, sp, #4
 8007e0e:	b142      	cbz	r2, 8007e22 <__ascii_mbtowc+0x1a>
 8007e10:	b14b      	cbz	r3, 8007e26 <__ascii_mbtowc+0x1e>
 8007e12:	7813      	ldrb	r3, [r2, #0]
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	1e10      	subs	r0, r2, #0
 8007e1a:	bf18      	it	ne
 8007e1c:	2001      	movne	r0, #1
 8007e1e:	b002      	add	sp, #8
 8007e20:	4770      	bx	lr
 8007e22:	4610      	mov	r0, r2
 8007e24:	e7fb      	b.n	8007e1e <__ascii_mbtowc+0x16>
 8007e26:	f06f 0001 	mvn.w	r0, #1
 8007e2a:	e7f8      	b.n	8007e1e <__ascii_mbtowc+0x16>

08007e2c <memmove>:
 8007e2c:	4288      	cmp	r0, r1
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	eb01 0402 	add.w	r4, r1, r2
 8007e34:	d902      	bls.n	8007e3c <memmove+0x10>
 8007e36:	4284      	cmp	r4, r0
 8007e38:	4623      	mov	r3, r4
 8007e3a:	d807      	bhi.n	8007e4c <memmove+0x20>
 8007e3c:	1e43      	subs	r3, r0, #1
 8007e3e:	42a1      	cmp	r1, r4
 8007e40:	d008      	beq.n	8007e54 <memmove+0x28>
 8007e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e4a:	e7f8      	b.n	8007e3e <memmove+0x12>
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	4402      	add	r2, r0
 8007e50:	428a      	cmp	r2, r1
 8007e52:	d100      	bne.n	8007e56 <memmove+0x2a>
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e5e:	e7f7      	b.n	8007e50 <memmove+0x24>

08007e60 <__malloc_lock>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__malloc_lock+0x8>)
 8007e62:	f000 bc19 	b.w	8008698 <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	20000b94 	.word	0x20000b94

08007e6c <__malloc_unlock>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__malloc_unlock+0x8>)
 8007e6e:	f000 bc14 	b.w	800869a <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	20000b94 	.word	0x20000b94

08007e78 <_realloc_r>:
 8007e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	4614      	mov	r4, r2
 8007e80:	460e      	mov	r6, r1
 8007e82:	b921      	cbnz	r1, 8007e8e <_realloc_r+0x16>
 8007e84:	4611      	mov	r1, r2
 8007e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8a:	f7ff bdad 	b.w	80079e8 <_malloc_r>
 8007e8e:	b92a      	cbnz	r2, 8007e9c <_realloc_r+0x24>
 8007e90:	f7ff fd42 	bl	8007918 <_free_r>
 8007e94:	4625      	mov	r5, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9c:	f000 fc64 	bl	8008768 <_malloc_usable_size_r>
 8007ea0:	4284      	cmp	r4, r0
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	d802      	bhi.n	8007eac <_realloc_r+0x34>
 8007ea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eaa:	d812      	bhi.n	8007ed2 <_realloc_r+0x5a>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff fd9a 	bl	80079e8 <_malloc_r>
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d0ed      	beq.n	8007e96 <_realloc_r+0x1e>
 8007eba:	42bc      	cmp	r4, r7
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	bf28      	it	cs
 8007ec2:	463a      	movcs	r2, r7
 8007ec4:	f7ff f984 	bl	80071d0 <memcpy>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff fd24 	bl	8007918 <_free_r>
 8007ed0:	e7e1      	b.n	8007e96 <_realloc_r+0x1e>
 8007ed2:	4635      	mov	r5, r6
 8007ed4:	e7df      	b.n	8007e96 <_realloc_r+0x1e>

08007ed6 <__sfputc_r>:
 8007ed6:	6893      	ldr	r3, [r2, #8]
 8007ed8:	b410      	push	{r4}
 8007eda:	3b01      	subs	r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	6093      	str	r3, [r2, #8]
 8007ee0:	da07      	bge.n	8007ef2 <__sfputc_r+0x1c>
 8007ee2:	6994      	ldr	r4, [r2, #24]
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	db01      	blt.n	8007eec <__sfputc_r+0x16>
 8007ee8:	290a      	cmp	r1, #10
 8007eea:	d102      	bne.n	8007ef2 <__sfputc_r+0x1c>
 8007eec:	bc10      	pop	{r4}
 8007eee:	f000 b949 	b.w	8008184 <__swbuf_r>
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	1c58      	adds	r0, r3, #1
 8007ef6:	6010      	str	r0, [r2, #0]
 8007ef8:	7019      	strb	r1, [r3, #0]
 8007efa:	4608      	mov	r0, r1
 8007efc:	bc10      	pop	{r4}
 8007efe:	4770      	bx	lr

08007f00 <__sfputs_r>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	4606      	mov	r6, r0
 8007f04:	460f      	mov	r7, r1
 8007f06:	4614      	mov	r4, r2
 8007f08:	18d5      	adds	r5, r2, r3
 8007f0a:	42ac      	cmp	r4, r5
 8007f0c:	d101      	bne.n	8007f12 <__sfputs_r+0x12>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e007      	b.n	8007f22 <__sfputs_r+0x22>
 8007f12:	463a      	mov	r2, r7
 8007f14:	4630      	mov	r0, r6
 8007f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1a:	f7ff ffdc 	bl	8007ed6 <__sfputc_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d1f3      	bne.n	8007f0a <__sfputs_r+0xa>
 8007f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f24 <_vfiprintf_r>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	460d      	mov	r5, r1
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	4606      	mov	r6, r0
 8007f30:	b09d      	sub	sp, #116	; 0x74
 8007f32:	b118      	cbz	r0, 8007f3c <_vfiprintf_r+0x18>
 8007f34:	6983      	ldr	r3, [r0, #24]
 8007f36:	b90b      	cbnz	r3, 8007f3c <_vfiprintf_r+0x18>
 8007f38:	f000 fb10 	bl	800855c <__sinit>
 8007f3c:	4b89      	ldr	r3, [pc, #548]	; (8008164 <_vfiprintf_r+0x240>)
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	d11b      	bne.n	8007f7a <_vfiprintf_r+0x56>
 8007f42:	6875      	ldr	r5, [r6, #4]
 8007f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	d405      	bmi.n	8007f56 <_vfiprintf_r+0x32>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	059a      	lsls	r2, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_vfiprintf_r+0x32>
 8007f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f52:	f000 fba1 	bl	8008698 <__retarget_lock_acquire_recursive>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	071b      	lsls	r3, r3, #28
 8007f5a:	d501      	bpl.n	8007f60 <_vfiprintf_r+0x3c>
 8007f5c:	692b      	ldr	r3, [r5, #16]
 8007f5e:	b9eb      	cbnz	r3, 8007f9c <_vfiprintf_r+0x78>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f96e 	bl	8008244 <__swsetup_r>
 8007f68:	b1c0      	cbz	r0, 8007f9c <_vfiprintf_r+0x78>
 8007f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f6c:	07dc      	lsls	r4, r3, #31
 8007f6e:	d50e      	bpl.n	8007f8e <_vfiprintf_r+0x6a>
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	b01d      	add	sp, #116	; 0x74
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	4b7b      	ldr	r3, [pc, #492]	; (8008168 <_vfiprintf_r+0x244>)
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	d101      	bne.n	8007f84 <_vfiprintf_r+0x60>
 8007f80:	68b5      	ldr	r5, [r6, #8]
 8007f82:	e7df      	b.n	8007f44 <_vfiprintf_r+0x20>
 8007f84:	4b79      	ldr	r3, [pc, #484]	; (800816c <_vfiprintf_r+0x248>)
 8007f86:	429d      	cmp	r5, r3
 8007f88:	bf08      	it	eq
 8007f8a:	68f5      	ldreq	r5, [r6, #12]
 8007f8c:	e7da      	b.n	8007f44 <_vfiprintf_r+0x20>
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	0598      	lsls	r0, r3, #22
 8007f92:	d4ed      	bmi.n	8007f70 <_vfiprintf_r+0x4c>
 8007f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f96:	f000 fb80 	bl	800869a <__retarget_lock_release_recursive>
 8007f9a:	e7e9      	b.n	8007f70 <_vfiprintf_r+0x4c>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fa6:	2330      	movs	r3, #48	; 0x30
 8007fa8:	f04f 0901 	mov.w	r9, #1
 8007fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008170 <_vfiprintf_r+0x24c>
 8007fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fb8:	4623      	mov	r3, r4
 8007fba:	469a      	mov	sl, r3
 8007fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc0:	b10a      	cbz	r2, 8007fc6 <_vfiprintf_r+0xa2>
 8007fc2:	2a25      	cmp	r2, #37	; 0x25
 8007fc4:	d1f9      	bne.n	8007fba <_vfiprintf_r+0x96>
 8007fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fca:	d00b      	beq.n	8007fe4 <_vfiprintf_r+0xc0>
 8007fcc:	465b      	mov	r3, fp
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ff94 	bl	8007f00 <__sfputs_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f000 80aa 	beq.w	8008132 <_vfiprintf_r+0x20e>
 8007fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe0:	445a      	add	r2, fp
 8007fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80a2 	beq.w	8008132 <_vfiprintf_r+0x20e>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff8:	f10a 0a01 	add.w	sl, sl, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008004:	931a      	str	r3, [sp, #104]	; 0x68
 8008006:	4654      	mov	r4, sl
 8008008:	2205      	movs	r2, #5
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4858      	ldr	r0, [pc, #352]	; (8008170 <_vfiprintf_r+0x24c>)
 8008010:	f7ff f8d0 	bl	80071b4 <memchr>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	b9d8      	cbnz	r0, 8008050 <_vfiprintf_r+0x12c>
 8008018:	06d1      	lsls	r1, r2, #27
 800801a:	bf44      	itt	mi
 800801c:	2320      	movmi	r3, #32
 800801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008022:	0713      	lsls	r3, r2, #28
 8008024:	bf44      	itt	mi
 8008026:	232b      	movmi	r3, #43	; 0x2b
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802c:	f89a 3000 	ldrb.w	r3, [sl]
 8008030:	2b2a      	cmp	r3, #42	; 0x2a
 8008032:	d015      	beq.n	8008060 <_vfiprintf_r+0x13c>
 8008034:	4654      	mov	r4, sl
 8008036:	2000      	movs	r0, #0
 8008038:	f04f 0c0a 	mov.w	ip, #10
 800803c:	9a07      	ldr	r2, [sp, #28]
 800803e:	4621      	mov	r1, r4
 8008040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008044:	3b30      	subs	r3, #48	; 0x30
 8008046:	2b09      	cmp	r3, #9
 8008048:	d94e      	bls.n	80080e8 <_vfiprintf_r+0x1c4>
 800804a:	b1b0      	cbz	r0, 800807a <_vfiprintf_r+0x156>
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	e014      	b.n	800807a <_vfiprintf_r+0x156>
 8008050:	eba0 0308 	sub.w	r3, r0, r8
 8008054:	fa09 f303 	lsl.w	r3, r9, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	46a2      	mov	sl, r4
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	e7d2      	b.n	8008006 <_vfiprintf_r+0xe2>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d19      	adds	r1, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9103      	str	r1, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfbb      	ittet	lt
 800806c:	425b      	neglt	r3, r3
 800806e:	f042 0202 	orrlt.w	r2, r2, #2
 8008072:	9307      	strge	r3, [sp, #28]
 8008074:	9307      	strlt	r3, [sp, #28]
 8008076:	bfb8      	it	lt
 8008078:	9204      	strlt	r2, [sp, #16]
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	2b2e      	cmp	r3, #46	; 0x2e
 800807e:	d10c      	bne.n	800809a <_vfiprintf_r+0x176>
 8008080:	7863      	ldrb	r3, [r4, #1]
 8008082:	2b2a      	cmp	r3, #42	; 0x2a
 8008084:	d135      	bne.n	80080f2 <_vfiprintf_r+0x1ce>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	3402      	adds	r4, #2
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9203      	str	r2, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfb8      	it	lt
 8008094:	f04f 33ff 	movlt.w	r3, #4294967295
 8008098:	9305      	str	r3, [sp, #20]
 800809a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008174 <_vfiprintf_r+0x250>
 800809e:	2203      	movs	r2, #3
 80080a0:	4650      	mov	r0, sl
 80080a2:	7821      	ldrb	r1, [r4, #0]
 80080a4:	f7ff f886 	bl	80071b4 <memchr>
 80080a8:	b140      	cbz	r0, 80080bc <_vfiprintf_r+0x198>
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	eba0 000a 	sub.w	r0, r0, sl
 80080b0:	fa03 f000 	lsl.w	r0, r3, r0
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	3401      	adds	r4, #1
 80080b8:	4303      	orrs	r3, r0
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c0:	2206      	movs	r2, #6
 80080c2:	482d      	ldr	r0, [pc, #180]	; (8008178 <_vfiprintf_r+0x254>)
 80080c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080c8:	f7ff f874 	bl	80071b4 <memchr>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d03f      	beq.n	8008150 <_vfiprintf_r+0x22c>
 80080d0:	4b2a      	ldr	r3, [pc, #168]	; (800817c <_vfiprintf_r+0x258>)
 80080d2:	bb1b      	cbnz	r3, 800811c <_vfiprintf_r+0x1f8>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	3307      	adds	r3, #7
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	3308      	adds	r3, #8
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	443b      	add	r3, r7
 80080e4:	9309      	str	r3, [sp, #36]	; 0x24
 80080e6:	e767      	b.n	8007fb8 <_vfiprintf_r+0x94>
 80080e8:	460c      	mov	r4, r1
 80080ea:	2001      	movs	r0, #1
 80080ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80080f0:	e7a5      	b.n	800803e <_vfiprintf_r+0x11a>
 80080f2:	2300      	movs	r3, #0
 80080f4:	f04f 0c0a 	mov.w	ip, #10
 80080f8:	4619      	mov	r1, r3
 80080fa:	3401      	adds	r4, #1
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4620      	mov	r0, r4
 8008100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008104:	3a30      	subs	r2, #48	; 0x30
 8008106:	2a09      	cmp	r2, #9
 8008108:	d903      	bls.n	8008112 <_vfiprintf_r+0x1ee>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0c5      	beq.n	800809a <_vfiprintf_r+0x176>
 800810e:	9105      	str	r1, [sp, #20]
 8008110:	e7c3      	b.n	800809a <_vfiprintf_r+0x176>
 8008112:	4604      	mov	r4, r0
 8008114:	2301      	movs	r3, #1
 8008116:	fb0c 2101 	mla	r1, ip, r1, r2
 800811a:	e7f0      	b.n	80080fe <_vfiprintf_r+0x1da>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	462a      	mov	r2, r5
 8008122:	4630      	mov	r0, r6
 8008124:	4b16      	ldr	r3, [pc, #88]	; (8008180 <_vfiprintf_r+0x25c>)
 8008126:	a904      	add	r1, sp, #16
 8008128:	f7fd fdda 	bl	8005ce0 <_printf_float>
 800812c:	4607      	mov	r7, r0
 800812e:	1c78      	adds	r0, r7, #1
 8008130:	d1d6      	bne.n	80080e0 <_vfiprintf_r+0x1bc>
 8008132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008134:	07d9      	lsls	r1, r3, #31
 8008136:	d405      	bmi.n	8008144 <_vfiprintf_r+0x220>
 8008138:	89ab      	ldrh	r3, [r5, #12]
 800813a:	059a      	lsls	r2, r3, #22
 800813c:	d402      	bmi.n	8008144 <_vfiprintf_r+0x220>
 800813e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008140:	f000 faab 	bl	800869a <__retarget_lock_release_recursive>
 8008144:	89ab      	ldrh	r3, [r5, #12]
 8008146:	065b      	lsls	r3, r3, #25
 8008148:	f53f af12 	bmi.w	8007f70 <_vfiprintf_r+0x4c>
 800814c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800814e:	e711      	b.n	8007f74 <_vfiprintf_r+0x50>
 8008150:	ab03      	add	r3, sp, #12
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	462a      	mov	r2, r5
 8008156:	4630      	mov	r0, r6
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <_vfiprintf_r+0x25c>)
 800815a:	a904      	add	r1, sp, #16
 800815c:	f7fe f85c 	bl	8006218 <_printf_i>
 8008160:	e7e4      	b.n	800812c <_vfiprintf_r+0x208>
 8008162:	bf00      	nop
 8008164:	0800a82c 	.word	0x0800a82c
 8008168:	0800a84c 	.word	0x0800a84c
 800816c:	0800a80c 	.word	0x0800a80c
 8008170:	0800a6b4 	.word	0x0800a6b4
 8008174:	0800a6ba 	.word	0x0800a6ba
 8008178:	0800a6be 	.word	0x0800a6be
 800817c:	08005ce1 	.word	0x08005ce1
 8008180:	08007f01 	.word	0x08007f01

08008184 <__swbuf_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	460e      	mov	r6, r1
 8008188:	4614      	mov	r4, r2
 800818a:	4605      	mov	r5, r0
 800818c:	b118      	cbz	r0, 8008196 <__swbuf_r+0x12>
 800818e:	6983      	ldr	r3, [r0, #24]
 8008190:	b90b      	cbnz	r3, 8008196 <__swbuf_r+0x12>
 8008192:	f000 f9e3 	bl	800855c <__sinit>
 8008196:	4b21      	ldr	r3, [pc, #132]	; (800821c <__swbuf_r+0x98>)
 8008198:	429c      	cmp	r4, r3
 800819a:	d12b      	bne.n	80081f4 <__swbuf_r+0x70>
 800819c:	686c      	ldr	r4, [r5, #4]
 800819e:	69a3      	ldr	r3, [r4, #24]
 80081a0:	60a3      	str	r3, [r4, #8]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	071a      	lsls	r2, r3, #28
 80081a6:	d52f      	bpl.n	8008208 <__swbuf_r+0x84>
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	b36b      	cbz	r3, 8008208 <__swbuf_r+0x84>
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	6820      	ldr	r0, [r4, #0]
 80081b0:	b2f6      	uxtb	r6, r6
 80081b2:	1ac0      	subs	r0, r0, r3
 80081b4:	6963      	ldr	r3, [r4, #20]
 80081b6:	4637      	mov	r7, r6
 80081b8:	4283      	cmp	r3, r0
 80081ba:	dc04      	bgt.n	80081c6 <__swbuf_r+0x42>
 80081bc:	4621      	mov	r1, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 f938 	bl	8008434 <_fflush_r>
 80081c4:	bb30      	cbnz	r0, 8008214 <__swbuf_r+0x90>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	3001      	adds	r0, #1
 80081ca:	3b01      	subs	r3, #1
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	701e      	strb	r6, [r3, #0]
 80081d6:	6963      	ldr	r3, [r4, #20]
 80081d8:	4283      	cmp	r3, r0
 80081da:	d004      	beq.n	80081e6 <__swbuf_r+0x62>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	07db      	lsls	r3, r3, #31
 80081e0:	d506      	bpl.n	80081f0 <__swbuf_r+0x6c>
 80081e2:	2e0a      	cmp	r6, #10
 80081e4:	d104      	bne.n	80081f0 <__swbuf_r+0x6c>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 f923 	bl	8008434 <_fflush_r>
 80081ee:	b988      	cbnz	r0, 8008214 <__swbuf_r+0x90>
 80081f0:	4638      	mov	r0, r7
 80081f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <__swbuf_r+0x9c>)
 80081f6:	429c      	cmp	r4, r3
 80081f8:	d101      	bne.n	80081fe <__swbuf_r+0x7a>
 80081fa:	68ac      	ldr	r4, [r5, #8]
 80081fc:	e7cf      	b.n	800819e <__swbuf_r+0x1a>
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <__swbuf_r+0xa0>)
 8008200:	429c      	cmp	r4, r3
 8008202:	bf08      	it	eq
 8008204:	68ec      	ldreq	r4, [r5, #12]
 8008206:	e7ca      	b.n	800819e <__swbuf_r+0x1a>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f81a 	bl	8008244 <__swsetup_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0cb      	beq.n	80081ac <__swbuf_r+0x28>
 8008214:	f04f 37ff 	mov.w	r7, #4294967295
 8008218:	e7ea      	b.n	80081f0 <__swbuf_r+0x6c>
 800821a:	bf00      	nop
 800821c:	0800a82c 	.word	0x0800a82c
 8008220:	0800a84c 	.word	0x0800a84c
 8008224:	0800a80c 	.word	0x0800a80c

08008228 <__ascii_wctomb>:
 8008228:	4603      	mov	r3, r0
 800822a:	4608      	mov	r0, r1
 800822c:	b141      	cbz	r1, 8008240 <__ascii_wctomb+0x18>
 800822e:	2aff      	cmp	r2, #255	; 0xff
 8008230:	d904      	bls.n	800823c <__ascii_wctomb+0x14>
 8008232:	228a      	movs	r2, #138	; 0x8a
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	4770      	bx	lr
 800823c:	2001      	movs	r0, #1
 800823e:	700a      	strb	r2, [r1, #0]
 8008240:	4770      	bx	lr
	...

08008244 <__swsetup_r>:
 8008244:	4b32      	ldr	r3, [pc, #200]	; (8008310 <__swsetup_r+0xcc>)
 8008246:	b570      	push	{r4, r5, r6, lr}
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	4606      	mov	r6, r0
 800824c:	460c      	mov	r4, r1
 800824e:	b125      	cbz	r5, 800825a <__swsetup_r+0x16>
 8008250:	69ab      	ldr	r3, [r5, #24]
 8008252:	b913      	cbnz	r3, 800825a <__swsetup_r+0x16>
 8008254:	4628      	mov	r0, r5
 8008256:	f000 f981 	bl	800855c <__sinit>
 800825a:	4b2e      	ldr	r3, [pc, #184]	; (8008314 <__swsetup_r+0xd0>)
 800825c:	429c      	cmp	r4, r3
 800825e:	d10f      	bne.n	8008280 <__swsetup_r+0x3c>
 8008260:	686c      	ldr	r4, [r5, #4]
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008268:	0719      	lsls	r1, r3, #28
 800826a:	d42c      	bmi.n	80082c6 <__swsetup_r+0x82>
 800826c:	06dd      	lsls	r5, r3, #27
 800826e:	d411      	bmi.n	8008294 <__swsetup_r+0x50>
 8008270:	2309      	movs	r3, #9
 8008272:	6033      	str	r3, [r6, #0]
 8008274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e03e      	b.n	80082fe <__swsetup_r+0xba>
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <__swsetup_r+0xd4>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d101      	bne.n	800828a <__swsetup_r+0x46>
 8008286:	68ac      	ldr	r4, [r5, #8]
 8008288:	e7eb      	b.n	8008262 <__swsetup_r+0x1e>
 800828a:	4b24      	ldr	r3, [pc, #144]	; (800831c <__swsetup_r+0xd8>)
 800828c:	429c      	cmp	r4, r3
 800828e:	bf08      	it	eq
 8008290:	68ec      	ldreq	r4, [r5, #12]
 8008292:	e7e6      	b.n	8008262 <__swsetup_r+0x1e>
 8008294:	0758      	lsls	r0, r3, #29
 8008296:	d512      	bpl.n	80082be <__swsetup_r+0x7a>
 8008298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800829a:	b141      	cbz	r1, 80082ae <__swsetup_r+0x6a>
 800829c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a0:	4299      	cmp	r1, r3
 80082a2:	d002      	beq.n	80082aa <__swsetup_r+0x66>
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fb37 	bl	8007918 <_free_r>
 80082aa:	2300      	movs	r3, #0
 80082ac:	6363      	str	r3, [r4, #52]	; 0x34
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	2300      	movs	r3, #0
 80082b8:	6063      	str	r3, [r4, #4]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f043 0308 	orr.w	r3, r3, #8
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	b94b      	cbnz	r3, 80082de <__swsetup_r+0x9a>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d4:	d003      	beq.n	80082de <__swsetup_r+0x9a>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 fa05 	bl	80086e8 <__smakebuf_r>
 80082de:	89a0      	ldrh	r0, [r4, #12]
 80082e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e4:	f010 0301 	ands.w	r3, r0, #1
 80082e8:	d00a      	beq.n	8008300 <__swsetup_r+0xbc>
 80082ea:	2300      	movs	r3, #0
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	425b      	negs	r3, r3
 80082f2:	61a3      	str	r3, [r4, #24]
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b943      	cbnz	r3, 800830a <__swsetup_r+0xc6>
 80082f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082fc:	d1ba      	bne.n	8008274 <__swsetup_r+0x30>
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	0781      	lsls	r1, r0, #30
 8008302:	bf58      	it	pl
 8008304:	6963      	ldrpl	r3, [r4, #20]
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	e7f4      	b.n	80082f4 <__swsetup_r+0xb0>
 800830a:	2000      	movs	r0, #0
 800830c:	e7f7      	b.n	80082fe <__swsetup_r+0xba>
 800830e:	bf00      	nop
 8008310:	20000020 	.word	0x20000020
 8008314:	0800a82c 	.word	0x0800a82c
 8008318:	0800a84c 	.word	0x0800a84c
 800831c:	0800a80c 	.word	0x0800a80c

08008320 <abort>:
 8008320:	2006      	movs	r0, #6
 8008322:	b508      	push	{r3, lr}
 8008324:	f000 fa50 	bl	80087c8 <raise>
 8008328:	2001      	movs	r0, #1
 800832a:	f7f9 fe88 	bl	800203e <_exit>
	...

08008330 <__sflush_r>:
 8008330:	898a      	ldrh	r2, [r1, #12]
 8008332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008334:	4605      	mov	r5, r0
 8008336:	0710      	lsls	r0, r2, #28
 8008338:	460c      	mov	r4, r1
 800833a:	d457      	bmi.n	80083ec <__sflush_r+0xbc>
 800833c:	684b      	ldr	r3, [r1, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	dc04      	bgt.n	800834c <__sflush_r+0x1c>
 8008342:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	dc01      	bgt.n	800834c <__sflush_r+0x1c>
 8008348:	2000      	movs	r0, #0
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800834e:	2e00      	cmp	r6, #0
 8008350:	d0fa      	beq.n	8008348 <__sflush_r+0x18>
 8008352:	2300      	movs	r3, #0
 8008354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008358:	682f      	ldr	r7, [r5, #0]
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	d032      	beq.n	80083c4 <__sflush_r+0x94>
 800835e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	075a      	lsls	r2, r3, #29
 8008364:	d505      	bpl.n	8008372 <__sflush_r+0x42>
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	1ac0      	subs	r0, r0, r3
 800836a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800836c:	b10b      	cbz	r3, 8008372 <__sflush_r+0x42>
 800836e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008370:	1ac0      	subs	r0, r0, r3
 8008372:	2300      	movs	r3, #0
 8008374:	4602      	mov	r2, r0
 8008376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008378:	4628      	mov	r0, r5
 800837a:	6a21      	ldr	r1, [r4, #32]
 800837c:	47b0      	blx	r6
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	d106      	bne.n	8008392 <__sflush_r+0x62>
 8008384:	6829      	ldr	r1, [r5, #0]
 8008386:	291d      	cmp	r1, #29
 8008388:	d82c      	bhi.n	80083e4 <__sflush_r+0xb4>
 800838a:	4a29      	ldr	r2, [pc, #164]	; (8008430 <__sflush_r+0x100>)
 800838c:	40ca      	lsrs	r2, r1
 800838e:	07d6      	lsls	r6, r2, #31
 8008390:	d528      	bpl.n	80083e4 <__sflush_r+0xb4>
 8008392:	2200      	movs	r2, #0
 8008394:	6062      	str	r2, [r4, #4]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	04d9      	lsls	r1, r3, #19
 800839a:	6022      	str	r2, [r4, #0]
 800839c:	d504      	bpl.n	80083a8 <__sflush_r+0x78>
 800839e:	1c42      	adds	r2, r0, #1
 80083a0:	d101      	bne.n	80083a6 <__sflush_r+0x76>
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b903      	cbnz	r3, 80083a8 <__sflush_r+0x78>
 80083a6:	6560      	str	r0, [r4, #84]	; 0x54
 80083a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083aa:	602f      	str	r7, [r5, #0]
 80083ac:	2900      	cmp	r1, #0
 80083ae:	d0cb      	beq.n	8008348 <__sflush_r+0x18>
 80083b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083b4:	4299      	cmp	r1, r3
 80083b6:	d002      	beq.n	80083be <__sflush_r+0x8e>
 80083b8:	4628      	mov	r0, r5
 80083ba:	f7ff faad 	bl	8007918 <_free_r>
 80083be:	2000      	movs	r0, #0
 80083c0:	6360      	str	r0, [r4, #52]	; 0x34
 80083c2:	e7c2      	b.n	800834a <__sflush_r+0x1a>
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	2301      	movs	r3, #1
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b0      	blx	r6
 80083cc:	1c41      	adds	r1, r0, #1
 80083ce:	d1c7      	bne.n	8008360 <__sflush_r+0x30>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0c4      	beq.n	8008360 <__sflush_r+0x30>
 80083d6:	2b1d      	cmp	r3, #29
 80083d8:	d001      	beq.n	80083de <__sflush_r+0xae>
 80083da:	2b16      	cmp	r3, #22
 80083dc:	d101      	bne.n	80083e2 <__sflush_r+0xb2>
 80083de:	602f      	str	r7, [r5, #0]
 80083e0:	e7b2      	b.n	8008348 <__sflush_r+0x18>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	e7ae      	b.n	800834a <__sflush_r+0x1a>
 80083ec:	690f      	ldr	r7, [r1, #16]
 80083ee:	2f00      	cmp	r7, #0
 80083f0:	d0aa      	beq.n	8008348 <__sflush_r+0x18>
 80083f2:	0793      	lsls	r3, r2, #30
 80083f4:	bf18      	it	ne
 80083f6:	2300      	movne	r3, #0
 80083f8:	680e      	ldr	r6, [r1, #0]
 80083fa:	bf08      	it	eq
 80083fc:	694b      	ldreq	r3, [r1, #20]
 80083fe:	1bf6      	subs	r6, r6, r7
 8008400:	600f      	str	r7, [r1, #0]
 8008402:	608b      	str	r3, [r1, #8]
 8008404:	2e00      	cmp	r6, #0
 8008406:	dd9f      	ble.n	8008348 <__sflush_r+0x18>
 8008408:	4633      	mov	r3, r6
 800840a:	463a      	mov	r2, r7
 800840c:	4628      	mov	r0, r5
 800840e:	6a21      	ldr	r1, [r4, #32]
 8008410:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008414:	47e0      	blx	ip
 8008416:	2800      	cmp	r0, #0
 8008418:	dc06      	bgt.n	8008428 <__sflush_r+0xf8>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	e790      	b.n	800834a <__sflush_r+0x1a>
 8008428:	4407      	add	r7, r0
 800842a:	1a36      	subs	r6, r6, r0
 800842c:	e7ea      	b.n	8008404 <__sflush_r+0xd4>
 800842e:	bf00      	nop
 8008430:	20400001 	.word	0x20400001

08008434 <_fflush_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	690b      	ldr	r3, [r1, #16]
 8008438:	4605      	mov	r5, r0
 800843a:	460c      	mov	r4, r1
 800843c:	b913      	cbnz	r3, 8008444 <_fflush_r+0x10>
 800843e:	2500      	movs	r5, #0
 8008440:	4628      	mov	r0, r5
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	b118      	cbz	r0, 800844e <_fflush_r+0x1a>
 8008446:	6983      	ldr	r3, [r0, #24]
 8008448:	b90b      	cbnz	r3, 800844e <_fflush_r+0x1a>
 800844a:	f000 f887 	bl	800855c <__sinit>
 800844e:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <_fflush_r+0x6c>)
 8008450:	429c      	cmp	r4, r3
 8008452:	d11b      	bne.n	800848c <_fflush_r+0x58>
 8008454:	686c      	ldr	r4, [r5, #4]
 8008456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ef      	beq.n	800843e <_fflush_r+0xa>
 800845e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008460:	07d0      	lsls	r0, r2, #31
 8008462:	d404      	bmi.n	800846e <_fflush_r+0x3a>
 8008464:	0599      	lsls	r1, r3, #22
 8008466:	d402      	bmi.n	800846e <_fflush_r+0x3a>
 8008468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846a:	f000 f915 	bl	8008698 <__retarget_lock_acquire_recursive>
 800846e:	4628      	mov	r0, r5
 8008470:	4621      	mov	r1, r4
 8008472:	f7ff ff5d 	bl	8008330 <__sflush_r>
 8008476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008478:	4605      	mov	r5, r0
 800847a:	07da      	lsls	r2, r3, #31
 800847c:	d4e0      	bmi.n	8008440 <_fflush_r+0xc>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	059b      	lsls	r3, r3, #22
 8008482:	d4dd      	bmi.n	8008440 <_fflush_r+0xc>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f000 f908 	bl	800869a <__retarget_lock_release_recursive>
 800848a:	e7d9      	b.n	8008440 <_fflush_r+0xc>
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <_fflush_r+0x70>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <_fflush_r+0x62>
 8008492:	68ac      	ldr	r4, [r5, #8]
 8008494:	e7df      	b.n	8008456 <_fflush_r+0x22>
 8008496:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <_fflush_r+0x74>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68ec      	ldreq	r4, [r5, #12]
 800849e:	e7da      	b.n	8008456 <_fflush_r+0x22>
 80084a0:	0800a82c 	.word	0x0800a82c
 80084a4:	0800a84c 	.word	0x0800a84c
 80084a8:	0800a80c 	.word	0x0800a80c

080084ac <std>:
 80084ac:	2300      	movs	r3, #0
 80084ae:	b510      	push	{r4, lr}
 80084b0:	4604      	mov	r4, r0
 80084b2:	e9c0 3300 	strd	r3, r3, [r0]
 80084b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ba:	6083      	str	r3, [r0, #8]
 80084bc:	8181      	strh	r1, [r0, #12]
 80084be:	6643      	str	r3, [r0, #100]	; 0x64
 80084c0:	81c2      	strh	r2, [r0, #14]
 80084c2:	6183      	str	r3, [r0, #24]
 80084c4:	4619      	mov	r1, r3
 80084c6:	2208      	movs	r2, #8
 80084c8:	305c      	adds	r0, #92	; 0x5c
 80084ca:	f7fd fb63 	bl	8005b94 <memset>
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <std+0x38>)
 80084d0:	6224      	str	r4, [r4, #32]
 80084d2:	6263      	str	r3, [r4, #36]	; 0x24
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <std+0x3c>)
 80084d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <std+0x40>)
 80084da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <std+0x44>)
 80084de:	6323      	str	r3, [r4, #48]	; 0x30
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	bf00      	nop
 80084e4:	08008801 	.word	0x08008801
 80084e8:	08008823 	.word	0x08008823
 80084ec:	0800885b 	.word	0x0800885b
 80084f0:	0800887f 	.word	0x0800887f

080084f4 <_cleanup_r>:
 80084f4:	4901      	ldr	r1, [pc, #4]	; (80084fc <_cleanup_r+0x8>)
 80084f6:	f000 b8af 	b.w	8008658 <_fwalk_reent>
 80084fa:	bf00      	nop
 80084fc:	08008435 	.word	0x08008435

08008500 <__sfmoreglue>:
 8008500:	2268      	movs	r2, #104	; 0x68
 8008502:	b570      	push	{r4, r5, r6, lr}
 8008504:	1e4d      	subs	r5, r1, #1
 8008506:	4355      	muls	r5, r2
 8008508:	460e      	mov	r6, r1
 800850a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800850e:	f7ff fa6b 	bl	80079e8 <_malloc_r>
 8008512:	4604      	mov	r4, r0
 8008514:	b140      	cbz	r0, 8008528 <__sfmoreglue+0x28>
 8008516:	2100      	movs	r1, #0
 8008518:	e9c0 1600 	strd	r1, r6, [r0]
 800851c:	300c      	adds	r0, #12
 800851e:	60a0      	str	r0, [r4, #8]
 8008520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008524:	f7fd fb36 	bl	8005b94 <memset>
 8008528:	4620      	mov	r0, r4
 800852a:	bd70      	pop	{r4, r5, r6, pc}

0800852c <__sfp_lock_acquire>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__sfp_lock_acquire+0x8>)
 800852e:	f000 b8b3 	b.w	8008698 <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	20000b95 	.word	0x20000b95

08008538 <__sfp_lock_release>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__sfp_lock_release+0x8>)
 800853a:	f000 b8ae 	b.w	800869a <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	20000b95 	.word	0x20000b95

08008544 <__sinit_lock_acquire>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__sinit_lock_acquire+0x8>)
 8008546:	f000 b8a7 	b.w	8008698 <__retarget_lock_acquire_recursive>
 800854a:	bf00      	nop
 800854c:	20000b96 	.word	0x20000b96

08008550 <__sinit_lock_release>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__sinit_lock_release+0x8>)
 8008552:	f000 b8a2 	b.w	800869a <__retarget_lock_release_recursive>
 8008556:	bf00      	nop
 8008558:	20000b96 	.word	0x20000b96

0800855c <__sinit>:
 800855c:	b510      	push	{r4, lr}
 800855e:	4604      	mov	r4, r0
 8008560:	f7ff fff0 	bl	8008544 <__sinit_lock_acquire>
 8008564:	69a3      	ldr	r3, [r4, #24]
 8008566:	b11b      	cbz	r3, 8008570 <__sinit+0x14>
 8008568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856c:	f7ff bff0 	b.w	8008550 <__sinit_lock_release>
 8008570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008574:	6523      	str	r3, [r4, #80]	; 0x50
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <__sinit+0x68>)
 8008578:	4a13      	ldr	r2, [pc, #76]	; (80085c8 <__sinit+0x6c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	62a2      	str	r2, [r4, #40]	; 0x28
 800857e:	42a3      	cmp	r3, r4
 8008580:	bf08      	it	eq
 8008582:	2301      	moveq	r3, #1
 8008584:	4620      	mov	r0, r4
 8008586:	bf08      	it	eq
 8008588:	61a3      	streq	r3, [r4, #24]
 800858a:	f000 f81f 	bl	80085cc <__sfp>
 800858e:	6060      	str	r0, [r4, #4]
 8008590:	4620      	mov	r0, r4
 8008592:	f000 f81b 	bl	80085cc <__sfp>
 8008596:	60a0      	str	r0, [r4, #8]
 8008598:	4620      	mov	r0, r4
 800859a:	f000 f817 	bl	80085cc <__sfp>
 800859e:	2200      	movs	r2, #0
 80085a0:	2104      	movs	r1, #4
 80085a2:	60e0      	str	r0, [r4, #12]
 80085a4:	6860      	ldr	r0, [r4, #4]
 80085a6:	f7ff ff81 	bl	80084ac <std>
 80085aa:	2201      	movs	r2, #1
 80085ac:	2109      	movs	r1, #9
 80085ae:	68a0      	ldr	r0, [r4, #8]
 80085b0:	f7ff ff7c 	bl	80084ac <std>
 80085b4:	2202      	movs	r2, #2
 80085b6:	2112      	movs	r1, #18
 80085b8:	68e0      	ldr	r0, [r4, #12]
 80085ba:	f7ff ff77 	bl	80084ac <std>
 80085be:	2301      	movs	r3, #1
 80085c0:	61a3      	str	r3, [r4, #24]
 80085c2:	e7d1      	b.n	8008568 <__sinit+0xc>
 80085c4:	0800a490 	.word	0x0800a490
 80085c8:	080084f5 	.word	0x080084f5

080085cc <__sfp>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	4607      	mov	r7, r0
 80085d0:	f7ff ffac 	bl	800852c <__sfp_lock_acquire>
 80085d4:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <__sfp+0x84>)
 80085d6:	681e      	ldr	r6, [r3, #0]
 80085d8:	69b3      	ldr	r3, [r6, #24]
 80085da:	b913      	cbnz	r3, 80085e2 <__sfp+0x16>
 80085dc:	4630      	mov	r0, r6
 80085de:	f7ff ffbd 	bl	800855c <__sinit>
 80085e2:	3648      	adds	r6, #72	; 0x48
 80085e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	d503      	bpl.n	80085f4 <__sfp+0x28>
 80085ec:	6833      	ldr	r3, [r6, #0]
 80085ee:	b30b      	cbz	r3, 8008634 <__sfp+0x68>
 80085f0:	6836      	ldr	r6, [r6, #0]
 80085f2:	e7f7      	b.n	80085e4 <__sfp+0x18>
 80085f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085f8:	b9d5      	cbnz	r5, 8008630 <__sfp+0x64>
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <__sfp+0x88>)
 80085fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008600:	60e3      	str	r3, [r4, #12]
 8008602:	6665      	str	r5, [r4, #100]	; 0x64
 8008604:	f000 f847 	bl	8008696 <__retarget_lock_init_recursive>
 8008608:	f7ff ff96 	bl	8008538 <__sfp_lock_release>
 800860c:	2208      	movs	r2, #8
 800860e:	4629      	mov	r1, r5
 8008610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008618:	6025      	str	r5, [r4, #0]
 800861a:	61a5      	str	r5, [r4, #24]
 800861c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008620:	f7fd fab8 	bl	8005b94 <memset>
 8008624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800862c:	4620      	mov	r0, r4
 800862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008630:	3468      	adds	r4, #104	; 0x68
 8008632:	e7d9      	b.n	80085e8 <__sfp+0x1c>
 8008634:	2104      	movs	r1, #4
 8008636:	4638      	mov	r0, r7
 8008638:	f7ff ff62 	bl	8008500 <__sfmoreglue>
 800863c:	4604      	mov	r4, r0
 800863e:	6030      	str	r0, [r6, #0]
 8008640:	2800      	cmp	r0, #0
 8008642:	d1d5      	bne.n	80085f0 <__sfp+0x24>
 8008644:	f7ff ff78 	bl	8008538 <__sfp_lock_release>
 8008648:	230c      	movs	r3, #12
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	e7ee      	b.n	800862c <__sfp+0x60>
 800864e:	bf00      	nop
 8008650:	0800a490 	.word	0x0800a490
 8008654:	ffff0001 	.word	0xffff0001

08008658 <_fwalk_reent>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4606      	mov	r6, r0
 800865e:	4688      	mov	r8, r1
 8008660:	2700      	movs	r7, #0
 8008662:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800866a:	f1b9 0901 	subs.w	r9, r9, #1
 800866e:	d505      	bpl.n	800867c <_fwalk_reent+0x24>
 8008670:	6824      	ldr	r4, [r4, #0]
 8008672:	2c00      	cmp	r4, #0
 8008674:	d1f7      	bne.n	8008666 <_fwalk_reent+0xe>
 8008676:	4638      	mov	r0, r7
 8008678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867c:	89ab      	ldrh	r3, [r5, #12]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d907      	bls.n	8008692 <_fwalk_reent+0x3a>
 8008682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008686:	3301      	adds	r3, #1
 8008688:	d003      	beq.n	8008692 <_fwalk_reent+0x3a>
 800868a:	4629      	mov	r1, r5
 800868c:	4630      	mov	r0, r6
 800868e:	47c0      	blx	r8
 8008690:	4307      	orrs	r7, r0
 8008692:	3568      	adds	r5, #104	; 0x68
 8008694:	e7e9      	b.n	800866a <_fwalk_reent+0x12>

08008696 <__retarget_lock_init_recursive>:
 8008696:	4770      	bx	lr

08008698 <__retarget_lock_acquire_recursive>:
 8008698:	4770      	bx	lr

0800869a <__retarget_lock_release_recursive>:
 800869a:	4770      	bx	lr

0800869c <__swhatbuf_r>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	460e      	mov	r6, r1
 80086a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a4:	4614      	mov	r4, r2
 80086a6:	2900      	cmp	r1, #0
 80086a8:	461d      	mov	r5, r3
 80086aa:	b096      	sub	sp, #88	; 0x58
 80086ac:	da08      	bge.n	80086c0 <__swhatbuf_r+0x24>
 80086ae:	2200      	movs	r2, #0
 80086b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086b4:	602a      	str	r2, [r5, #0]
 80086b6:	061a      	lsls	r2, r3, #24
 80086b8:	d410      	bmi.n	80086dc <__swhatbuf_r+0x40>
 80086ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086be:	e00e      	b.n	80086de <__swhatbuf_r+0x42>
 80086c0:	466a      	mov	r2, sp
 80086c2:	f000 f903 	bl	80088cc <_fstat_r>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	dbf1      	blt.n	80086ae <__swhatbuf_r+0x12>
 80086ca:	9a01      	ldr	r2, [sp, #4]
 80086cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086d4:	425a      	negs	r2, r3
 80086d6:	415a      	adcs	r2, r3
 80086d8:	602a      	str	r2, [r5, #0]
 80086da:	e7ee      	b.n	80086ba <__swhatbuf_r+0x1e>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	2000      	movs	r0, #0
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	b016      	add	sp, #88	; 0x58
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080086e8 <__smakebuf_r>:
 80086e8:	898b      	ldrh	r3, [r1, #12]
 80086ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086ec:	079d      	lsls	r5, r3, #30
 80086ee:	4606      	mov	r6, r0
 80086f0:	460c      	mov	r4, r1
 80086f2:	d507      	bpl.n	8008704 <__smakebuf_r+0x1c>
 80086f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	6123      	str	r3, [r4, #16]
 80086fc:	2301      	movs	r3, #1
 80086fe:	6163      	str	r3, [r4, #20]
 8008700:	b002      	add	sp, #8
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	466a      	mov	r2, sp
 8008706:	ab01      	add	r3, sp, #4
 8008708:	f7ff ffc8 	bl	800869c <__swhatbuf_r>
 800870c:	9900      	ldr	r1, [sp, #0]
 800870e:	4605      	mov	r5, r0
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff f969 	bl	80079e8 <_malloc_r>
 8008716:	b948      	cbnz	r0, 800872c <__smakebuf_r+0x44>
 8008718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871c:	059a      	lsls	r2, r3, #22
 800871e:	d4ef      	bmi.n	8008700 <__smakebuf_r+0x18>
 8008720:	f023 0303 	bic.w	r3, r3, #3
 8008724:	f043 0302 	orr.w	r3, r3, #2
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	e7e3      	b.n	80086f4 <__smakebuf_r+0xc>
 800872c:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <__smakebuf_r+0x7c>)
 800872e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	6020      	str	r0, [r4, #0]
 8008734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	9b00      	ldr	r3, [sp, #0]
 800873c:	6120      	str	r0, [r4, #16]
 800873e:	6163      	str	r3, [r4, #20]
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	b15b      	cbz	r3, 800875c <__smakebuf_r+0x74>
 8008744:	4630      	mov	r0, r6
 8008746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874a:	f000 f8d1 	bl	80088f0 <_isatty_r>
 800874e:	b128      	cbz	r0, 800875c <__smakebuf_r+0x74>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	89a0      	ldrh	r0, [r4, #12]
 800875e:	4305      	orrs	r5, r0
 8008760:	81a5      	strh	r5, [r4, #12]
 8008762:	e7cd      	b.n	8008700 <__smakebuf_r+0x18>
 8008764:	080084f5 	.word	0x080084f5

08008768 <_malloc_usable_size_r>:
 8008768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800876c:	1f18      	subs	r0, r3, #4
 800876e:	2b00      	cmp	r3, #0
 8008770:	bfbc      	itt	lt
 8008772:	580b      	ldrlt	r3, [r1, r0]
 8008774:	18c0      	addlt	r0, r0, r3
 8008776:	4770      	bx	lr

08008778 <_raise_r>:
 8008778:	291f      	cmp	r1, #31
 800877a:	b538      	push	{r3, r4, r5, lr}
 800877c:	4604      	mov	r4, r0
 800877e:	460d      	mov	r5, r1
 8008780:	d904      	bls.n	800878c <_raise_r+0x14>
 8008782:	2316      	movs	r3, #22
 8008784:	6003      	str	r3, [r0, #0]
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800878e:	b112      	cbz	r2, 8008796 <_raise_r+0x1e>
 8008790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008794:	b94b      	cbnz	r3, 80087aa <_raise_r+0x32>
 8008796:	4620      	mov	r0, r4
 8008798:	f000 f830 	bl	80087fc <_getpid_r>
 800879c:	462a      	mov	r2, r5
 800879e:	4601      	mov	r1, r0
 80087a0:	4620      	mov	r0, r4
 80087a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087a6:	f000 b817 	b.w	80087d8 <_kill_r>
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d00a      	beq.n	80087c4 <_raise_r+0x4c>
 80087ae:	1c59      	adds	r1, r3, #1
 80087b0:	d103      	bne.n	80087ba <_raise_r+0x42>
 80087b2:	2316      	movs	r3, #22
 80087b4:	6003      	str	r3, [r0, #0]
 80087b6:	2001      	movs	r0, #1
 80087b8:	e7e7      	b.n	800878a <_raise_r+0x12>
 80087ba:	2400      	movs	r4, #0
 80087bc:	4628      	mov	r0, r5
 80087be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087c2:	4798      	blx	r3
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7e0      	b.n	800878a <_raise_r+0x12>

080087c8 <raise>:
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <raise+0xc>)
 80087ca:	4601      	mov	r1, r0
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	f7ff bfd3 	b.w	8008778 <_raise_r>
 80087d2:	bf00      	nop
 80087d4:	20000020 	.word	0x20000020

080087d8 <_kill_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	2300      	movs	r3, #0
 80087dc:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_kill_r+0x20>)
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	4611      	mov	r1, r2
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	f7f9 fc1a 	bl	800201e <_kill>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d102      	bne.n	80087f4 <_kill_r+0x1c>
 80087ee:	682b      	ldr	r3, [r5, #0]
 80087f0:	b103      	cbz	r3, 80087f4 <_kill_r+0x1c>
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	bd38      	pop	{r3, r4, r5, pc}
 80087f6:	bf00      	nop
 80087f8:	20000b90 	.word	0x20000b90

080087fc <_getpid_r>:
 80087fc:	f7f9 bc08 	b.w	8002010 <_getpid>

08008800 <__sread>:
 8008800:	b510      	push	{r4, lr}
 8008802:	460c      	mov	r4, r1
 8008804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008808:	f000 f894 	bl	8008934 <_read_r>
 800880c:	2800      	cmp	r0, #0
 800880e:	bfab      	itete	ge
 8008810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008812:	89a3      	ldrhlt	r3, [r4, #12]
 8008814:	181b      	addge	r3, r3, r0
 8008816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800881a:	bfac      	ite	ge
 800881c:	6563      	strge	r3, [r4, #84]	; 0x54
 800881e:	81a3      	strhlt	r3, [r4, #12]
 8008820:	bd10      	pop	{r4, pc}

08008822 <__swrite>:
 8008822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	461f      	mov	r7, r3
 8008828:	898b      	ldrh	r3, [r1, #12]
 800882a:	4605      	mov	r5, r0
 800882c:	05db      	lsls	r3, r3, #23
 800882e:	460c      	mov	r4, r1
 8008830:	4616      	mov	r6, r2
 8008832:	d505      	bpl.n	8008840 <__swrite+0x1e>
 8008834:	2302      	movs	r3, #2
 8008836:	2200      	movs	r2, #0
 8008838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883c:	f000 f868 	bl	8008910 <_lseek_r>
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	4632      	mov	r2, r6
 8008844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	4628      	mov	r0, r5
 800884c:	463b      	mov	r3, r7
 800884e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008856:	f000 b817 	b.w	8008888 <_write_r>

0800885a <__sseek>:
 800885a:	b510      	push	{r4, lr}
 800885c:	460c      	mov	r4, r1
 800885e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008862:	f000 f855 	bl	8008910 <_lseek_r>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	bf15      	itete	ne
 800886c:	6560      	strne	r0, [r4, #84]	; 0x54
 800886e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008876:	81a3      	strheq	r3, [r4, #12]
 8008878:	bf18      	it	ne
 800887a:	81a3      	strhne	r3, [r4, #12]
 800887c:	bd10      	pop	{r4, pc}

0800887e <__sclose>:
 800887e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008882:	f000 b813 	b.w	80088ac <_close_r>
	...

08008888 <_write_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	2200      	movs	r2, #0
 8008892:	4d05      	ldr	r5, [pc, #20]	; (80088a8 <_write_r+0x20>)
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7f9 fbf8 	bl	800208c <_write>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_write_r+0x1e>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_write_r+0x1e>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	20000b90 	.word	0x20000b90

080088ac <_close_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	2300      	movs	r3, #0
 80088b0:	4d05      	ldr	r5, [pc, #20]	; (80088c8 <_close_r+0x1c>)
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	f7f9 fc04 	bl	80020c4 <_close>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_close_r+0x1a>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_close_r+0x1a>
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	20000b90 	.word	0x20000b90

080088cc <_fstat_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	2300      	movs	r3, #0
 80088d0:	4d06      	ldr	r5, [pc, #24]	; (80088ec <_fstat_r+0x20>)
 80088d2:	4604      	mov	r4, r0
 80088d4:	4608      	mov	r0, r1
 80088d6:	4611      	mov	r1, r2
 80088d8:	602b      	str	r3, [r5, #0]
 80088da:	f7f9 fbfe 	bl	80020da <_fstat>
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	d102      	bne.n	80088e8 <_fstat_r+0x1c>
 80088e2:	682b      	ldr	r3, [r5, #0]
 80088e4:	b103      	cbz	r3, 80088e8 <_fstat_r+0x1c>
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	bd38      	pop	{r3, r4, r5, pc}
 80088ea:	bf00      	nop
 80088ec:	20000b90 	.word	0x20000b90

080088f0 <_isatty_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	2300      	movs	r3, #0
 80088f4:	4d05      	ldr	r5, [pc, #20]	; (800890c <_isatty_r+0x1c>)
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	602b      	str	r3, [r5, #0]
 80088fc:	f7f9 fbfc 	bl	80020f8 <_isatty>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_isatty_r+0x1a>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_isatty_r+0x1a>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20000b90 	.word	0x20000b90

08008910 <_lseek_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	2200      	movs	r2, #0
 800891a:	4d05      	ldr	r5, [pc, #20]	; (8008930 <_lseek_r+0x20>)
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f9 fbf4 	bl	800210c <_lseek>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_lseek_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_lseek_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	20000b90 	.word	0x20000b90

08008934 <_read_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	4611      	mov	r1, r2
 800893c:	2200      	movs	r2, #0
 800893e:	4d05      	ldr	r5, [pc, #20]	; (8008954 <_read_r+0x20>)
 8008940:	602a      	str	r2, [r5, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7f9 fb85 	bl	8002052 <_read>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_read_r+0x1e>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_read_r+0x1e>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	20000b90 	.word	0x20000b90

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
