
STM32F103_HotPlate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008088  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024bc  08008198  08008198  00018198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a654  0800a654  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a654  0800a654  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a654  0800a654  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a654  0800a654  0001a654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a658  0800a658  0001a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  200001f0  0800a84c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  0800a84c  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010db1  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285a  00000000  00000000  00030fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00033828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00034878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001952c  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001177b  00000000  00000000  0004eca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eabe  00000000  00000000  0006041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeedd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005584  00000000  00000000  000eef30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008180 	.word	0x08008180

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008180 	.word	0x08008180

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <beep>:
uint8_t beepFlag = 0;

uint16_t beepFrequency = 1000;
uint16_t beepTime = 0;

void beep (uint16_t frequency, uint16_t time){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	80fb      	strh	r3, [r7, #6]
 8000a94:	4613      	mov	r3, r2
 8000a96:	80bb      	strh	r3, [r7, #4]
	beepFlag = 1;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <beep+0x2c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	beepFrequency = frequency;
 8000a9e:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <beep+0x30>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	8013      	strh	r3, [r2, #0]
	beepTime = time;
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <beep+0x34>)
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	8013      	strh	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	2000020c 	.word	0x2000020c
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	2000020e 	.word	0x2000020e

08000ac0 <beep_callback>:


void beep_callback(TIM_HandleTypeDef *htim, uint32_t channel){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if(beepFlag == 1){
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <beep_callback+0x48>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d116      	bne.n	8000b00 <beep_callback+0x40>
		TIM3->CCR1 = 9;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <beep_callback+0x4c>)
 8000ad4:	2209      	movs	r2, #9
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->PSC = beepFrequency;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <beep_callback+0x50>)
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <beep_callback+0x4c>)
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_PWM_Start(htim, channel);
 8000ae0:	6839      	ldr	r1, [r7, #0]
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f003 fc70 	bl	80043c8 <HAL_TIM_PWM_Start>
		HAL_Delay(beepTime);
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <beep_callback+0x54>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 faf9 	bl	80020e4 <HAL_Delay>
		HAL_TIM_PWM_Stop(htim, channel);
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f003 fd09 	bl	800450c <HAL_TIM_PWM_Stop>
		beepFlag = 0;
 8000afa:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <beep_callback+0x48>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
	}
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000020c 	.word	0x2000020c
 8000b0c:	40000400 	.word	0x40000400
 8000b10:	20000000 	.word	0x20000000
 8000b14:	2000020e 	.word	0x2000020e

08000b18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d105      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x1e>
		oledRefreshActiveFlag = 1;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
		oledRefreshAll(&hspi1);
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b32:	f000 fd91 	bl	8001658 <oledRefreshAll>
	}
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000738 	.word	0x20000738
 8000b44:	20000210 	.word	0x20000210

08000b48 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	oledRefreshAll(&hspi1);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <HAL_SPI_TxCpltCallback+0x18>)
 8000b52:	f000 fd81 	bl	8001658 <oledRefreshAll>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000210 	.word	0x20000210

08000b64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_1_Pin){
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d113      	bne.n	8000b9c <HAL_GPIO_EXTI_Callback+0x38>
		sprintf((char*)buf,"Dziala!");
 8000b74:	491a      	ldr	r1, [pc, #104]	; (8000be0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b76:	481b      	ldr	r0, [pc, #108]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b78:	f005 f88a 	bl	8005c90 <siprintf>
		oledDispTxt(0, 0, buf, Font_11x18, 1);
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	9201      	str	r2, [sp, #4]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 feb4 	bl	80018fa <oledDispTxt>
		beep(500, 30);
 8000b92:	211e      	movs	r1, #30
 8000b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b98:	f7ff ff76 	bl	8000a88 <beep>
	}
	if(GPIO_Pin == ENC_1_Pin){
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d119      	bne.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x72>
		if(HAL_GPIO_ReadPin(ENC_2_GPIO_Port, ENC_2_Pin) == GPIO_PIN_SET){
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <HAL_GPIO_EXTI_Callback+0x88>)
 8000ba6:	f001 fff1 	bl	8002b8c <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d109      	bne.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x60>
			testEncoder--;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bc0:	801a      	strh	r2, [r3, #0]
		} else {
			testEncoder++;
		}
	}

}
 8000bc2:	e008      	b.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x72>
			testEncoder++;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bd4:	801a      	strh	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08008198 	.word	0x08008198
 8000be4:	20000710 	.word	0x20000710
 8000be8:	20000004 	.word	0x20000004
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	20000730 	.word	0x20000730

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f001 fa11 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 f881 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f000 fb15 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c06:	f000 faf5 	bl	80011f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c0a:	f000 f8d7 	bl	8000dbc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c0e:	f000 f90b 	bl	8000e28 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c12:	f000 f93f 	bl	8000e94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c16:	f000 f9c1 	bl	8000f9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c1a:	f000 fa0b 	bl	8001034 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c1e:	f000 fa63 	bl	80010e8 <MX_TIM4_Init>
  MX_USB_PCD_Init();
 8000c22:	f000 fac5 	bl	80011b0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim2);
 8000c26:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <main+0xe4>)
 8000c28:	f003 fade 	bl	80041e8 <HAL_TIM_Base_Start_IT>
  	oledInit(&hspi1, 1);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	482b      	ldr	r0, [pc, #172]	; (8000cdc <main+0xe8>)
 8000c30:	f000 fc0e 	bl	8001450 <oledInit>

  	sprintf((char*)buf,"HOT");
 8000c34:	492a      	ldr	r1, [pc, #168]	; (8000ce0 <main+0xec>)
 8000c36:	482b      	ldr	r0, [pc, #172]	; (8000ce4 <main+0xf0>)
 8000c38:	f005 f82a 	bl	8005c90 <siprintf>
  	oledDispTxt(40, 0, buf, Font_16x26, 1);
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <main+0xf4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	9201      	str	r2, [sp, #4]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	9200      	str	r2, [sp, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <main+0xf0>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2028      	movs	r0, #40	; 0x28
 8000c4e:	f000 fe54 	bl	80018fa <oledDispTxt>

  	sprintf((char*)buf,"PLATE");
 8000c52:	4926      	ldr	r1, [pc, #152]	; (8000cec <main+0xf8>)
 8000c54:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <main+0xf0>)
 8000c56:	f005 f81b 	bl	8005c90 <siprintf>
  	oledDispTxt(20, 35, buf, Font_16x26, 1);
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <main+0xf4>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	9200      	str	r2, [sp, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <main+0xf0>)
 8000c68:	2123      	movs	r1, #35	; 0x23
 8000c6a:	2014      	movs	r0, #20
 8000c6c:	f000 fe45 	bl	80018fa <oledDispTxt>

  	oledRefreshActiveFlag = 1;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <main+0xfc>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
  	oledRefreshAll(&hspi1);
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <main+0xe8>)
 8000c78:	f000 fcee 	bl	8001658 <oledRefreshAll>

  	beep(1400, 40);
 8000c7c:	2128      	movs	r1, #40	; 0x28
 8000c7e:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000c82:	f7ff ff01 	bl	8000a88 <beep>
  	beep_callback(&htim3, TIM_CHANNEL_1);
 8000c86:	2100      	movs	r1, #0
 8000c88:	481a      	ldr	r0, [pc, #104]	; (8000cf4 <main+0x100>)
 8000c8a:	f7ff ff19 	bl	8000ac0 <beep_callback>

	HAL_Delay(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f001 fa27 	bl	80020e4 <HAL_Delay>
	oledDisplayCls(0);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fcb6 	bl	8001608 <oledDisplayCls>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  oledDisplayCls(0);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 fcb3 	bl	8001608 <oledDisplayCls>
	  sprintf((char*)buf,"enc: %i", testEncoder);
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <main+0x104>)
 8000ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4914      	ldr	r1, [pc, #80]	; (8000cfc <main+0x108>)
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <main+0xf0>)
 8000cae:	f004 ffef 	bl	8005c90 <siprintf>
	  oledDispTxt(0, 35, buf, Font_11x18, 1);
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <main+0x10c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	9201      	str	r2, [sp, #4]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	9200      	str	r2, [sp, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <main+0xf0>)
 8000cc0:	2123      	movs	r1, #35	; 0x23
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fe19 	bl	80018fa <oledDispTxt>
	  HAL_Delay(100);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f001 fa0b 	bl	80020e4 <HAL_Delay>
	  beep_callback(&htim3, TIM_CHANNEL_1);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <main+0x100>)
 8000cd2:	f7ff fef5 	bl	8000ac0 <beep_callback>
	  oledDisplayCls(0);
 8000cd6:	e7e1      	b.n	8000c9c <main+0xa8>
 8000cd8:	2000034c 	.word	0x2000034c
 8000cdc:	20000210 	.word	0x20000210
 8000ce0:	080081a0 	.word	0x080081a0
 8000ce4:	20000710 	.word	0x20000710
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	080081a4 	.word	0x080081a4
 8000cf0:	20000738 	.word	0x20000738
 8000cf4:	20000394 	.word	0x20000394
 8000cf8:	20000730 	.word	0x20000730
 8000cfc:	080081ac 	.word	0x080081ac
 8000d00:	20000004 	.word	0x20000004

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0e:	2228      	movs	r2, #40	; 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f004 fb54 	bl	80053c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 f869 	bl	8002e34 <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d68:	f000 fb12 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2102      	movs	r1, #2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fad5 	bl	8003338 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d94:	f000 fafc 	bl	8001390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fc30 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dae:	f000 faef 	bl	8001390 <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3750      	adds	r7, #80	; 0x50
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000df0:	2210      	movs	r2, #16
 8000df2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000e08:	220a      	movs	r2, #10
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_SPI1_Init+0x64>)
 8000e0e:	f002 fcb1 	bl	8003774 <HAL_SPI_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e18:	f000 faba 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000210 	.word	0x20000210
 8000e24:	40013000 	.word	0x40013000

08000e28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <MX_SPI2_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_SPI2_Init+0x64>)
 8000e7a:	f002 fc7b 	bl	8003774 <HAL_SPI_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e84:	f000 fa84 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000268 	.word	0x20000268
 8000e90:	40003800 	.word	0x40003800

08000e94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b092      	sub	sp, #72	; 0x48
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2220      	movs	r2, #32
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fa7e 	bl	80053c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ec6:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <MX_TIM1_Init+0x104>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ef0:	4828      	ldr	r0, [pc, #160]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000ef2:	f003 f9cb 	bl	800428c <HAL_TIM_OC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000efc:	f000 fa48 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4821      	ldr	r0, [pc, #132]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000f10:	f004 f90a 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f1a:	f000 fa39 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	2208      	movs	r2, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000f44:	f003 fc4e 	bl	80047e4 <HAL_TIM_OC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000f4e:	f000 fa1f 	bl	8001390 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000f76:	f004 f935 	bl	80051e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000f80:	f000 fa06 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM1_Init+0x100>)
 8000f86:	f000 fe5b 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 8000f8a:	bf00      	nop
 8000f8c:	3748      	adds	r7, #72	; 0x48
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000304 	.word	0x20000304
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 219;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fd0:	22db      	movs	r2, #219	; 0xdb
 8000fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fe2:	f003 f8b1 	bl	8004148 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fec:	f000 f9d0 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_TIM2_Init+0x94>)
 8000ffe:	f003 fd07 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001008:	f000 f9c2 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_TIM2_Init+0x94>)
 800101a:	f004 f885 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001024:	f000 f9b4 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000034c 	.word	0x2000034c

08001034 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_TIM3_Init+0xac>)
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <MX_TIM3_Init+0xb0>)
 800105a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 700;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_TIM3_Init+0xac>)
 800105e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001062:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_TIM3_Init+0xac>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 17;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM3_Init+0xac>)
 800106c:	2211      	movs	r2, #17
 800106e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_TIM3_Init+0xac>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM3_Init+0xac>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800107c:	4818      	ldr	r0, [pc, #96]	; (80010e0 <MX_TIM3_Init+0xac>)
 800107e:	f003 f954 	bl	800432a <HAL_TIM_PWM_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001088:	f000 f982 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4619      	mov	r1, r3
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <MX_TIM3_Init+0xac>)
 800109c:	f004 f844 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010a6:	f000 f973 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010aa:	2360      	movs	r3, #96	; 0x60
 80010ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_TIM3_Init+0xac>)
 80010c2:	f003 fbe7 	bl	8004894 <HAL_TIM_PWM_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010cc:	f000 f960 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <MX_TIM3_Init+0xac>)
 80010d2:	f000 fdb5 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000394 	.word	0x20000394
 80010e4:	40000400 	.word	0x40000400

080010e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_TIM4_Init+0xc0>)
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <MX_TIM4_Init+0xc4>)
 800110e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_TIM4_Init+0xc0>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_TIM4_Init+0xc0>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_TIM4_Init+0xc0>)
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_TIM4_Init+0xc0>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_TIM4_Init+0xc0>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001130:	481d      	ldr	r0, [pc, #116]	; (80011a8 <MX_TIM4_Init+0xc0>)
 8001132:	f003 f8fa 	bl	800432a <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800113c:	f000 f928 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4619      	mov	r1, r3
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <MX_TIM4_Init+0xc0>)
 8001150:	f003 ffea 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800115a:	f000 f919 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	; 0x60
 8001160:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_TIM4_Init+0xc0>)
 8001176:	f003 fb8d 	bl	8004894 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001180:	f000 f906 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2204      	movs	r2, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM4_Init+0xc0>)
 800118c:	f003 fb82 	bl	8004894 <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001196:	f000 f8fb 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM4_Init+0xc0>)
 800119c:	f000 fd50 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200003dc 	.word	0x200003dc
 80011ac:	40000800 	.word	0x40000800

080011b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <MX_USB_PCD_Init+0x40>)
 80011b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011bc:	2208      	movs	r2, #8
 80011be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_USB_PCD_Init+0x3c>)
 80011da:	f001 fd1f 	bl	8002c1c <HAL_PCD_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011e4:	f000 f8d4 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000424 	.word	0x20000424
 80011f0:	40005c00 	.word	0x40005c00

080011f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_DMA_Init+0x38>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <MX_DMA_Init+0x38>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_DMA_Init+0x38>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200d      	movs	r0, #13
 8001218:	f001 f85f 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800121c:	200d      	movs	r0, #13
 800121e:	f001 f878 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	4b4d      	ldr	r3, [pc, #308]	; (800137c <MX_GPIO_Init+0x14c>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a4c      	ldr	r2, [pc, #304]	; (800137c <MX_GPIO_Init+0x14c>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b4a      	ldr	r3, [pc, #296]	; (800137c <MX_GPIO_Init+0x14c>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125c:	4b47      	ldr	r3, [pc, #284]	; (800137c <MX_GPIO_Init+0x14c>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a46      	ldr	r2, [pc, #280]	; (800137c <MX_GPIO_Init+0x14c>)
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <MX_GPIO_Init+0x14c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <MX_GPIO_Init+0x14c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a40      	ldr	r2, [pc, #256]	; (800137c <MX_GPIO_Init+0x14c>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b3e      	ldr	r3, [pc, #248]	; (800137c <MX_GPIO_Init+0x14c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <MX_GPIO_Init+0x14c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a3a      	ldr	r2, [pc, #232]	; (800137c <MX_GPIO_Init+0x14c>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <MX_GPIO_Init+0x14c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_RES_Pin|OLED_DC_Pin|MAX6675_1_CS_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f241 0107 	movw	r1, #4103	; 0x1007
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <MX_GPIO_Init+0x150>)
 80012ac:	f001 fc85 	bl	8002bba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX6675_2_CS_Pin|FAN1_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012b6:	4833      	ldr	r0, [pc, #204]	; (8001384 <MX_GPIO_Init+0x154>)
 80012b8:	f001 fc7f 	bl	8002bba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AC_ZERO_Pin */
  GPIO_InitStruct.Pin = AC_ZERO_Pin;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_GPIO_Init+0x158>)
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AC_ZERO_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	482e      	ldr	r0, [pc, #184]	; (800138c <MX_GPIO_Init+0x15c>)
 80012d2:	f001 fad7 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_1_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = ENC_1_Pin|BUTTON_1_Pin;
 80012d6:	2305      	movs	r3, #5
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_GPIO_Init+0x158>)
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	4826      	ldr	r0, [pc, #152]	; (8001384 <MX_GPIO_Init+0x154>)
 80012ea:	f001 facb 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_2_Pin */
  GPIO_InitStruct.Pin = ENC_2_Pin;
 80012ee:	2302      	movs	r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_2_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	4820      	ldr	r0, [pc, #128]	; (8001384 <MX_GPIO_Init+0x154>)
 8001302:	f001 fabf 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_RES_Pin OLED_DC_Pin MAX6675_1_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_RES_Pin|OLED_DC_Pin|MAX6675_1_CS_Pin;
 8001306:	f241 0307 	movw	r3, #4103	; 0x1007
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <MX_GPIO_Init+0x150>)
 8001320:	f001 fab0 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX6675_2_CS_Pin FAN1_Pin */
  GPIO_InitStruct.Pin = MAX6675_2_CS_Pin|FAN1_Pin;
 8001324:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2302      	movs	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_GPIO_Init+0x154>)
 800133e:	f001 faa1 	bl	8002884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2006      	movs	r0, #6
 8001348:	f000 ffc7 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800134c:	2006      	movs	r0, #6
 800134e:	f000 ffe0 	bl	8002312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2008      	movs	r0, #8
 8001358:	f000 ffbf 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800135c:	2008      	movs	r0, #8
 800135e:	f000 ffd8 	bl	8002312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2028      	movs	r0, #40	; 0x28
 8001368:	f000 ffb7 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800136c:	2028      	movs	r0, #40	; 0x28
 800136e:	f000 ffd0 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40010800 	.word	0x40010800
 8001388:	10110000 	.word	0x10110000
 800138c:	40011000 	.word	0x40011000

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>

0800139a <oledWriteSpi>:

uint8_t DispBuff [SSD1306_HEIGHT/8][SSD1306_TOTAL_WIDTH];



void oledWriteSpi(SPI_HandleTypeDef *hspi, unsigned char data){  // 5 - wszystkie razem
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi, &data, 1,100);
 80013a6:	1cf9      	adds	r1, r7, #3
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	2201      	movs	r2, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 fa65 	bl	800387c <HAL_SPI_Transmit>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <chipSelect>:

void chipSelect(uint8_t lcd_nr, uint8_t param){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
	if (lcd_nr == 0){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <chipSelect+0x24>
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	461a      	mov	r2, r3
 80013d6:	2101      	movs	r1, #1
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <chipSelect+0x40>)
 80013da:	f001 fbee 	bl	8002bba <HAL_GPIO_WritePin>
	} else if (lcd_nr == 5){
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
	}
}
 80013de:	e008      	b.n	80013f2 <chipSelect+0x36>
	} else if (lcd_nr == 5){
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d105      	bne.n	80013f2 <chipSelect+0x36>
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, param);
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	461a      	mov	r2, r3
 80013ea:	2101      	movs	r1, #1
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <chipSelect+0x40>)
 80013ee:	f001 fbe4 	bl	8002bba <HAL_GPIO_WritePin>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010c00 	.word	0x40010c00

08001400 <oledWriteCmd>:

void oledWriteCmd(SPI_HandleTypeDef *hspi, uint8_t lcd_nr, unsigned char cmd){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
 800140c:	4613      	mov	r3, r2
 800140e:	70bb      	strb	r3, [r7, #2]
	chipSelect(lcd_nr, 1);
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2101      	movs	r1, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffd1 	bl	80013bc <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2104      	movs	r1, #4
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <oledWriteCmd+0x4c>)
 8001420:	f001 fbcb 	bl	8002bba <HAL_GPIO_WritePin>
	chipSelect(lcd_nr, 0);
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffc7 	bl	80013bc <chipSelect>
	oledWriteSpi(hspi, cmd);
 800142e:	78bb      	ldrb	r3, [r7, #2]
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb1 	bl	800139a <oledWriteSpi>
	chipSelect(lcd_nr, 1);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2101      	movs	r1, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffbd 	bl	80013bc <chipSelect>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010c00 	.word	0x40010c00

08001450 <oledInit>:
	chipSelect(lcd_nr, 0);
	oledWriteSpi(hspi, data);
	chipSelect(lcd_nr, 1);
}

void oledInit(SPI_HandleTypeDef *hspi, uint8_t lcd_nr){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
	chipSelect(lcd_nr, 1);
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffab 	bl	80013bc <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2104      	movs	r1, #4
 800146a:	4866      	ldr	r0, [pc, #408]	; (8001604 <oledInit+0x1b4>)
 800146c:	f001 fba5 	bl	8002bba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	2102      	movs	r1, #2
 8001474:	4863      	ldr	r0, [pc, #396]	; (8001604 <oledInit+0x1b4>)
 8001476:	f001 fba0 	bl	8002bba <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f000 fe32 	bl	80020e4 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2102      	movs	r1, #2
 8001484:	485f      	ldr	r0, [pc, #380]	; (8001604 <oledInit+0x1b4>)
 8001486:	f001 fb98 	bl	8002bba <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800148a:	200a      	movs	r0, #10
 800148c:	f000 fe2a 	bl	80020e4 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	2102      	movs	r1, #2
 8001494:	485b      	ldr	r0, [pc, #364]	; (8001604 <oledInit+0x1b4>)
 8001496:	f001 fb90 	bl	8002bba <HAL_GPIO_WritePin>
	oledWriteCmd(hspi, lcd_nr, 0xAE); //wy��cz panel OLED
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	22ae      	movs	r2, #174	; 0xae
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffad 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x00); //adres koluny LOW
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffa7 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x10); //adres koluny HIGH
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2210      	movs	r2, #16
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffa1 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x40); //adres startu linii
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	2240      	movs	r2, #64	; 0x40
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff9b 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x20); //tryb adresowania strony
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	2220      	movs	r2, #32
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff95 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x02);
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	2202      	movs	r2, #2
 80014da:	4619      	mov	r1, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff8f 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x81); //ustaw kontrast
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2281      	movs	r2, #129	; 0x81
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff89 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xCF);
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	22cf      	movs	r2, #207	; 0xcf
 80014f2:	4619      	mov	r1, r3
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff83 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA1); //ustaw remapowanie
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	22a1      	movs	r2, #161	; 0xa1
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff7d 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xC0); //kierunek skanowania
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	22c0      	movs	r2, #192	; 0xc0
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff77 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA6); //wy�wietlanie bez inwersji
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	22a6      	movs	r2, #166	; 0xa6
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff71 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA8); //ustaw multiplex ratio
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	22a8      	movs	r2, #168	; 0xa8
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff6b 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x3F); //1/64
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	223f      	movs	r2, #63	; 0x3f
 800152e:	4619      	mov	r1, r3
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff65 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD3); //ustaw display offset
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	22d3      	movs	r2, #211	; 0xd3
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff5f 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x00); //bez offsetu
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff59 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD5); //ustaw divide ratio/cz�stotliwo��oscylatora
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	22d5      	movs	r2, #213	; 0xd5
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff53 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x80); //100ramek/sec
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff4d 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xD9); //ustaw okres pre charge
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	22d9      	movs	r2, #217	; 0xd9
 800156a:	4619      	mov	r1, r3
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff47 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xF1); //pre charge 15 cykli, discharge 1cykl
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	22f1      	movs	r2, #241	; 0xf1
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff41 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xDA); //konfiguracja wyprowadze�sterownika
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	22da      	movs	r2, #218	; 0xda
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff3b 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x12);
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	2212      	movs	r2, #18
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff35 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xDB); //ustawienie vcomh
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	22db      	movs	r2, #219	; 0xdb
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff2f 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x40);
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x8D); //ustawienie Charge Pump
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	228d      	movs	r2, #141	; 0x8d
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff23 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x14);
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	2214      	movs	r2, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff1d 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA4); //�pod��czenie� zawarto�ci RAMdo panelu OLED
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	22a4      	movs	r2, #164	; 0xa4
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff17 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xA6); //wy��czenie inwersji wy�wietlania
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	22a6      	movs	r2, #166	; 0xa6
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff11 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0xAF); //w��cza wy�wietlacz
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	22af      	movs	r2, #175	; 0xaf
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff0b 	bl	8001400 <oledWriteCmd>
	oledDisplayCls(0);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f80c 	bl	8001608 <oledDisplayCls>
	chipSelect(lcd_nr, 0);
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fee1 	bl	80013bc <chipSelect>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010c00 	.word	0x40010c00

08001608 <oledDisplayCls>:

void oledDisplayCls(unsigned char fill){
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	 uint16_t i, j;

	 for (i = 0; i < 8; i ++) {
 8001612:	2300      	movs	r3, #0
 8001614:	81fb      	strh	r3, [r7, #14]
 8001616:	e013      	b.n	8001640 <oledDisplayCls+0x38>
		 for (j = 0; j < SSD1306_TOTAL_WIDTH; j ++) {
 8001618:	2300      	movs	r3, #0
 800161a:	81bb      	strh	r3, [r7, #12]
 800161c:	e00a      	b.n	8001634 <oledDisplayCls+0x2c>
			 DispBuff[i][j] = fill;
 800161e:	89fa      	ldrh	r2, [r7, #14]
 8001620:	89bb      	ldrh	r3, [r7, #12]
 8001622:	490c      	ldr	r1, [pc, #48]	; (8001654 <oledDisplayCls+0x4c>)
 8001624:	01d2      	lsls	r2, r2, #7
 8001626:	440a      	add	r2, r1
 8001628:	4413      	add	r3, r2
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	701a      	strb	r2, [r3, #0]
		 for (j = 0; j < SSD1306_TOTAL_WIDTH; j ++) {
 800162e:	89bb      	ldrh	r3, [r7, #12]
 8001630:	3301      	adds	r3, #1
 8001632:	81bb      	strh	r3, [r7, #12]
 8001634:	89bb      	ldrh	r3, [r7, #12]
 8001636:	2b7f      	cmp	r3, #127	; 0x7f
 8001638:	d9f1      	bls.n	800161e <oledDisplayCls+0x16>
	 for (i = 0; i < 8; i ++) {
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	3301      	adds	r3, #1
 800163e:	81fb      	strh	r3, [r7, #14]
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	2b07      	cmp	r3, #7
 8001644:	d9e8      	bls.n	8001618 <oledDisplayCls+0x10>
		 }
	 }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000073c 	.word	0x2000073c

08001658 <oledRefreshAll>:

void oledRefreshAll(SPI_HandleTypeDef *hspi){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	if(oledRefreshActiveFlag == 1){
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <oledRefreshAll+0x80>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d133      	bne.n	80016d0 <oledRefreshAll+0x78>
		if (lcd_line > 7) {
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <oledRefreshAll+0x84>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b07      	cmp	r3, #7
 800166e:	d911      	bls.n	8001694 <oledRefreshAll+0x3c>
			lcd_line = 0;
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <oledRefreshAll+0x84>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			chipSelect(act_lcd, 1);
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <oledRefreshAll+0x88>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2101      	movs	r1, #1
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fe9d 	bl	80013bc <chipSelect>
			HAL_SPI_DMAStop(hspi);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f002 faec 	bl	8003c60 <HAL_SPI_DMAStop>
			act_lcd++;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <oledRefreshAll+0x88>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <oledRefreshAll+0x88>)
 8001692:	701a      	strb	r2, [r3, #0]
		}
		if (act_lcd > 1) {
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <oledRefreshAll+0x88>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d90a      	bls.n	80016b2 <oledRefreshAll+0x5a>
			act_lcd = 0;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <oledRefreshAll+0x88>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
			licznik++;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <oledRefreshAll+0x8c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <oledRefreshAll+0x8c>)
 80016aa:	6013      	str	r3, [r2, #0]
			oledRefreshActiveFlag=0;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <oledRefreshAll+0x80>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		}
		oledRefresh(hspi, act_lcd, lcd_line);
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <oledRefreshAll+0x88>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <oledRefreshAll+0x84>)
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	b292      	uxth	r2, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f812 	bl	80016e8 <oledRefresh>
		lcd_line++;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <oledRefreshAll+0x84>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <oledRefreshAll+0x84>)
 80016ce:	701a      	strb	r2, [r3, #0]
	}
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000738 	.word	0x20000738
 80016dc:	20000733 	.word	0x20000733
 80016e0:	20000732 	.word	0x20000732
 80016e4:	20000734 	.word	0x20000734

080016e8 <oledRefresh>:

void oledRefresh(SPI_HandleTypeDef *hspi, uint8_t lcd_nr, uint16_t line){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	4613      	mov	r3, r2
 80016f6:	803b      	strh	r3, [r7, #0]
	oledWriteCmd(hspi, lcd_nr, 0xB0 + line);
 80016f8:	883b      	ldrh	r3, [r7, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3b50      	subs	r3, #80	; 0x50
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fe7b 	bl	8001400 <oledWriteCmd>
	oledSetColStart(hspi, lcd_nr);
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f824 	bl	800175c <oledSetColStart>
	chipSelect(lcd_nr, lcd_nr);
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe4e 	bl	80013bc <chipSelect>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	2104      	movs	r1, #4
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <oledRefresh+0x6c>)
 8001726:	f001 fa48 	bl	8002bba <HAL_GPIO_WritePin>
	chipSelect(lcd_nr, 0);
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe44 	bl	80013bc <chipSelect>
	HAL_SPI_Transmit_DMA(hspi, &DispBuff[line][0+(lcd_nr*128)], 128);
 8001734:	883a      	ldrh	r2, [r7, #0]
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	01db      	lsls	r3, r3, #7
 800173a:	01d2      	lsls	r2, r2, #7
 800173c:	4413      	add	r3, r2
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <oledRefresh+0x70>)
 8001740:	4413      	add	r3, r2
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f002 f9d4 	bl	8003af4 <HAL_SPI_Transmit_DMA>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010c00 	.word	0x40010c00
 8001758:	2000073c 	.word	0x2000073c

0800175c <oledSetColStart>:

void oledSetColStart(SPI_HandleTypeDef *hspi, uint8_t lcd_nr){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
	oledWriteCmd(hspi, lcd_nr, 0x00); //low
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe46 	bl	8001400 <oledWriteCmd>
	oledWriteCmd(hspi, lcd_nr, 0x10); //high
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2210      	movs	r2, #16
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fe40 	bl	8001400 <oledWriteCmd>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <oledDrawPoint>:

void oledDrawPoint(uint16_t x, uint16_t y, unsigned char p){
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	80bb      	strh	r3, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	70fb      	strb	r3, [r7, #3]
	 uint16_t chPos, chBx, chTemp = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	81fb      	strh	r3, [r7, #14]

	 if (x > (5*127) || y > 63) return;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 80017a4:	d242      	bcs.n	800182c <oledDrawPoint+0xa4>
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	2b3f      	cmp	r3, #63	; 0x3f
 80017aa:	d83f      	bhi.n	800182c <oledDrawPoint+0xa4>
	 chPos = 7 - y / 8;
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	08db      	lsrs	r3, r3, #3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	81bb      	strh	r3, [r7, #12]
	 chBx = y % 8;
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	817b      	strh	r3, [r7, #10]
	 chTemp = 1 << (7 - chBx);
 80017c0:	897b      	ldrh	r3, [r7, #10]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2201      	movs	r2, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	81fb      	strh	r3, [r7, #14]
	 if (p) {
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <oledDrawPoint+0x74>
		 DispBuff[chPos][x] |= chTemp;
 80017d4:	89ba      	ldrh	r2, [r7, #12]
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4917      	ldr	r1, [pc, #92]	; (8001838 <oledDrawPoint+0xb0>)
 80017da:	01d2      	lsls	r2, r2, #7
 80017dc:	440a      	add	r2, r1
 80017de:	4413      	add	r3, r2
 80017e0:	7818      	ldrb	r0, [r3, #0]
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	b2d9      	uxtb	r1, r3
 80017e6:	89ba      	ldrh	r2, [r7, #12]
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4301      	orrs	r1, r0
 80017ec:	b2c8      	uxtb	r0, r1
 80017ee:	4912      	ldr	r1, [pc, #72]	; (8001838 <oledDrawPoint+0xb0>)
 80017f0:	01d2      	lsls	r2, r2, #7
 80017f2:	440a      	add	r2, r1
 80017f4:	4413      	add	r3, r2
 80017f6:	4602      	mov	r2, r0
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e018      	b.n	800182e <oledDrawPoint+0xa6>
	 } else {
		 DispBuff[chPos][x] &= ~chTemp;
 80017fc:	89ba      	ldrh	r2, [r7, #12]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	490d      	ldr	r1, [pc, #52]	; (8001838 <oledDrawPoint+0xb0>)
 8001802:	01d2      	lsls	r2, r2, #7
 8001804:	440a      	add	r2, r1
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25a      	sxtb	r2, r3
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	b25b      	sxtb	r3, r3
 8001814:	4013      	ands	r3, r2
 8001816:	b259      	sxtb	r1, r3
 8001818:	89ba      	ldrh	r2, [r7, #12]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	b2c8      	uxtb	r0, r1
 800181e:	4906      	ldr	r1, [pc, #24]	; (8001838 <oledDrawPoint+0xb0>)
 8001820:	01d2      	lsls	r2, r2, #7
 8001822:	440a      	add	r2, r1
 8001824:	4413      	add	r3, r2
 8001826:	4602      	mov	r2, r0
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e000      	b.n	800182e <oledDrawPoint+0xa6>
	 if (x > (5*127) || y > 63) return;
 800182c:	bf00      	nop
	 }
}
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000073c 	.word	0x2000073c

0800183c <oledWriteChar>:
    oledDrawPoint(xc+1, yc-1, colour);
    oledDrawPoint(xc-1, yc+1, colour);
    oledDrawPoint(xc-1, yc-1, colour);
}

char oledWriteChar(uint16_t x, uint16_t y, uint8_t ch, FontDef Font, uint8_t mode){
 800183c:	b082      	sub	sp, #8
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	460b      	mov	r3, r1
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	for (i = 0; i < Font.FontHeight; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e042      	b.n	80018de <oledWriteChar+0xa2>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	3b20      	subs	r3, #32
 800185e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4619      	mov	r1, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	440b      	add	r3, r1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font.FontWidth+1; j++)
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e027      	b.n	80018ca <oledWriteChar+0x8e>
		{
			if ((b << j) & 0x8000)
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00e      	beq.n	80018a8 <oledWriteChar+0x6c>
			{
				oledDrawPoint(x + j, (y + i), 1);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	b29a      	uxth	r2, r3
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4413      	add	r3, r2
 8001892:	b298      	uxth	r0, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	b29a      	uxth	r2, r3
 8001898:	88bb      	ldrh	r3, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff ff71 	bl	8001788 <oledDrawPoint>
 80018a6:	e00d      	b.n	80018c4 <oledWriteChar+0x88>
			}
			else
			{
				oledDrawPoint(x + j, (y + i), 0);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4413      	add	r3, r2
 80018b0:	b298      	uxth	r0, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff ff62 	bl	8001788 <oledDrawPoint>
		for (j = 0; j < Font.FontWidth+1; j++)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3301      	adds	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ce:	3301      	adds	r3, #1
 80018d0:	461a      	mov	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d3d0      	bcc.n	800187a <oledWriteChar+0x3e>
	for (i = 0; i < Font.FontHeight; i++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018e2:	461a      	mov	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d3b6      	bcc.n	8001858 <oledWriteChar+0x1c>
			}
		}
	}
	return ch;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018f6:	b002      	add	sp, #8
 80018f8:	4770      	bx	lr

080018fa <oledDispTxt>:
	}
	return ch;
}


void oledDispTxt(uint16_t x, uint16_t y, const uint8_t *txt, FontDef Font, uint8_t mode){
 80018fa:	b082      	sub	sp, #8
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af02      	add	r7, sp, #8
 8001902:	603a      	str	r2, [r7, #0]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
	 while (*txt != '\0') {
 800190e:	e02d      	b.n	800196c <oledDispTxt+0x72>
		 if (x > (SSD1306_TOTAL_WIDTH - Font.FontWidth / 2)) {
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	7d3b      	ldrb	r3, [r7, #20]
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800191c:	429a      	cmp	r2, r3
 800191e:	dd10      	ble.n	8001942 <oledDispTxt+0x48>
			 x = 0; y += Font.FontWidth;
 8001920:	2300      	movs	r3, #0
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	7d3b      	ldrb	r3, [r7, #20]
 8001926:	b29a      	uxth	r2, r3
 8001928:	88bb      	ldrh	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	80bb      	strh	r3, [r7, #4]
			 if (y > (SSD1306_HEIGHT - Font.FontHeight)) {
 800192e:	88ba      	ldrh	r2, [r7, #4]
 8001930:	7d7b      	ldrb	r3, [r7, #21]
 8001932:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001936:	429a      	cmp	r2, r3
 8001938:	dd03      	ble.n	8001942 <oledDispTxt+0x48>
				 y = x = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	80bb      	strh	r3, [r7, #4]
			 }
		 }
		 oledWriteChar(x, y, *txt, Font, mode);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	88b9      	ldrh	r1, [r7, #4]
 8001948:	88f8      	ldrh	r0, [r7, #6]
 800194a:	7f3b      	ldrb	r3, [r7, #28]
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f7ff ff72 	bl	800183c <oledWriteChar>
		 x += Font.FontWidth+1;
 8001958:	7d3b      	ldrb	r3, [r7, #20]
 800195a:	b29a      	uxth	r2, r3
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	4413      	add	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	80fb      	strh	r3, [r7, #6]
		 txt ++;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	603b      	str	r3, [r7, #0]
	 while (*txt != '\0') {
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1cd      	bne.n	8001910 <oledDispTxt+0x16>
	 }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001980:	b002      	add	sp, #8
 8001982:	4770      	bx	lr

08001984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_MspInit+0x5c>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_MspInit+0x5c>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6193      	str	r3, [r2, #24]
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_MspInit+0x5c>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_MspInit+0x5c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_MspInit+0x5c>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_MspInit+0x5c>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_MspInit+0x60>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_MspInit+0x60>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000

080019e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_SPI_MspInit+0x154>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d15e      	bne.n	8001ac6 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a08:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a38:	23a0      	movs	r3, #160	; 0xa0
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	483e      	ldr	r0, [pc, #248]	; (8001b44 <HAL_SPI_MspInit+0x15c>)
 8001a4c:	f000 ff1a 	bl	8002884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a50:	2340      	movs	r3, #64	; 0x40
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4838      	ldr	r0, [pc, #224]	; (8001b44 <HAL_SPI_MspInit+0x15c>)
 8001a64:	f000 ff0e 	bl	8002884 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a6a:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <HAL_SPI_MspInit+0x164>)
 8001a6c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6e:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a70:	2210      	movs	r2, #16
 8001a72:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a98:	482b      	ldr	r0, [pc, #172]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001a9a:	f000 fc55 	bl	8002348 <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001aa4:	f7ff fc74 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001aac:	649a      	str	r2, [r3, #72]	; 0x48
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_SPI_MspInit+0x160>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2023      	movs	r0, #35	; 0x23
 8001aba:	f000 fc0e 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001abe:	2023      	movs	r0, #35	; 0x23
 8001ac0:	f000 fc27 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ac4:	e036      	b.n	8001b34 <HAL_SPI_MspInit+0x14c>
  else if(hspi->Instance==SPI2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_SPI_MspInit+0x168>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d131      	bne.n	8001b34 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ada:	61d3      	str	r3, [r2, #28]
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_SPI_MspInit+0x158>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b00:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4619      	mov	r1, r3
 8001b14:	480f      	ldr	r0, [pc, #60]	; (8001b54 <HAL_SPI_MspInit+0x16c>)
 8001b16:	f000 feb5 	bl	8002884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <HAL_SPI_MspInit+0x16c>)
 8001b30:	f000 fea8 	bl	8002884 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	200002c0 	.word	0x200002c0
 8001b4c:	40020030 	.word	0x40020030
 8001b50:	40003800 	.word	0x40003800
 8001b54:	40010c00 	.word	0x40010c00

08001b58 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_TIM_OC_MspInit+0x34>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_TIM_OC_MspInit+0x38>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_TIM_OC_MspInit+0x38>)
 8001b70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_TIM_OC_MspInit+0x38>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d113      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	201c      	movs	r0, #28
 8001bc4:	f000 fb89 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f000 fba2 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <HAL_TIM_PWM_MspInit+0x58>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10c      	bne.n	8001c08 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c06:	e010      	b.n	8001c2a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <HAL_TIM_PWM_MspInit+0x60>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10b      	bne.n	8001c2a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40000400 	.word	0x40000400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40000800 	.word	0x40000800

08001c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a37      	ldr	r2, [pc, #220]	; (8001d38 <HAL_TIM_MspPostInit+0xf8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d119      	bne.n	8001c94 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = FAN2_Pin;
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FAN2_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482c      	ldr	r0, [pc, #176]	; (8001d40 <HAL_TIM_MspPostInit+0x100>)
 8001c8e:	f000 fdf9 	bl	8002884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c92:	e04c      	b.n	8001d2e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12a      	bne.n	8001cf4 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481f      	ldr	r0, [pc, #124]	; (8001d48 <HAL_TIM_MspPostInit+0x108>)
 8001cca:	f000 fddb 	bl	8002884 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_TIM_MspPostInit+0x10c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_TIM_MspPostInit+0x10c>)
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	6053      	str	r3, [r2, #4]
}
 8001cf2:	e01c      	b.n	8001d2e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <HAL_TIM_MspPostInit+0x110>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d117      	bne.n	8001d2e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_TIM_MspPostInit+0xfc>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AC_PWM1_Pin|AC_PWM2_Pin;
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <HAL_TIM_MspPostInit+0x108>)
 8001d2a:	f000 fdab 	bl	8002884 <HAL_GPIO_Init>
}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000800 	.word	0x40000800

08001d54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_PCD_MspInit+0x34>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10b      	bne.n	8001d7e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_PCD_MspInit+0x38>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_PCD_MspInit+0x38>)
 8001d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_PCD_MspInit+0x38>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40005c00 	.word	0x40005c00
 8001d8c:	40021000 	.word	0x40021000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f969 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_1_Pin);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 ff02 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8001df0:	2004      	movs	r0, #4
 8001df2:	f000 fefb 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA1_Channel3_IRQHandler+0x10>)
 8001e02:	f000 fc0b 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002c0 	.word	0x200002c0

08001e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM2_IRQHandler+0x10>)
 8001e16:	f002 fbdd 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000034c 	.word	0x2000034c

08001e24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <SPI1_IRQHandler+0x10>)
 8001e2a:	f001 ff59 	bl	8003ce0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000210 	.word	0x20000210

08001e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AC_ZERO_Pin);
 8001e3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e40:	f000 fed4 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <_kill>:

int _kill(int pid, int sig)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e60:	f003 fa84 	bl	800536c <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2216      	movs	r2, #22
 8001e68:	601a      	str	r2, [r3, #0]
	return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_exit>:

void _exit (int status)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffe7 	bl	8001e56 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e88:	e7fe      	b.n	8001e88 <_exit+0x12>

08001e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e00a      	b.n	8001eb2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf0      	blt.n	8001e9c <_read+0x12>
	}

return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e009      	b.n	8001eea <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbf1      	blt.n	8001ed6 <_write+0x12>
	}
	return len;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_close>:

int _close(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f22:	605a      	str	r2, [r3, #4]
	return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <_isatty>:

int _isatty(int file)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <_sbrk+0x5c>)
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <_sbrk+0x60>)
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <_sbrk+0x64>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <_sbrk+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d207      	bcs.n	8001f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f8c:	f003 f9ee 	bl	800536c <__errno>
 8001f90:	4603      	mov	r3, r0
 8001f92:	220c      	movs	r2, #12
 8001f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e009      	b.n	8001fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <_sbrk+0x64>)
 8001fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20005000 	.word	0x20005000
 8001fbc:	00000400 	.word	0x00000400
 8001fc0:	20000b3c 	.word	0x20000b3c
 8001fc4:	20000b58 	.word	0x20000b58

08001fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	; (8002018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ffa:	f7ff ffe5 	bl	8001fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f003 f9bb 	bl	8005378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002002:	f7fe fdf7 	bl	8000bf4 <main>
  bx lr
 8002006:	4770      	bx	lr
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002010:	0800a65c 	.word	0x0800a65c
  ldr r2, =_sbss
 8002014:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002018:	20000b54 	.word	0x20000b54

0800201c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_2_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_Init+0x28>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_Init+0x28>)
 800202a:	f043 0310 	orr.w	r3, r3, #16
 800202e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f947 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	200f      	movs	r0, #15
 8002038:	f000 f808 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fca2 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f95f 	bl	800232e <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 f927 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000014 	.word	0x20000014
 80020a4:	2000001c 	.word	0x2000001c
 80020a8:	20000018 	.word	0x20000018

080020ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_IncTick+0x1c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_IncTick+0x20>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a03      	ldr	r2, [pc, #12]	; (80020cc <HAL_IncTick+0x20>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	2000001c 	.word	0x2000001c
 80020cc:	20000b40 	.word	0x20000b40

080020d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <HAL_GetTick+0x10>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000b40 	.word	0x20000b40

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffe0 	bl	80020d0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000001c 	.word	0x2000001c

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4906      	ldr	r1, [pc, #24]	; (80021c4 <__NVIC_EnableIRQ+0x34>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff90 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff2d 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff42 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff90 	bl	800221c <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5f 	bl	80021c8 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff35 	bl	8002190 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e043      	b.n	80023e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_DMA_Init+0xa8>)
 8002366:	4413      	add	r3, r2
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMA_Init+0xac>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	009a      	lsls	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_DMA_Init+0xb0>)
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002392:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002396:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	bffdfff8 	.word	0xbffdfff8
 80023f4:	cccccccd 	.word	0xcccccccd
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_DMA_Start_IT+0x20>
 8002418:	2302      	movs	r3, #2
 800241a:	e04a      	b.n	80024b2 <HAL_DMA_Start_IT+0xb6>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800242a:	2b01      	cmp	r3, #1
 800242c:	d13a      	bne.n	80024a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f9e8 	bl	8002828 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 020e 	orr.w	r2, r2, #14
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e00f      	b.n	8002492 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0204 	bic.w	r2, r2, #4
 8002480:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 020a 	orr.w	r2, r2, #10
 8002490:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e005      	b.n	80024b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e020      	b.n	8002524 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 020e 	bic.w	r2, r2, #14
 80024f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002542:	2b02      	cmp	r3, #2
 8002544:	d005      	beq.n	8002552 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2204      	movs	r2, #4
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e051      	b.n	80025f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 020e 	bic.w	r2, r2, #14
 8002560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a22      	ldr	r2, [pc, #136]	; (8002600 <HAL_DMA_Abort_IT+0xd0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d029      	beq.n	80025d0 <HAL_DMA_Abort_IT+0xa0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a20      	ldr	r2, [pc, #128]	; (8002604 <HAL_DMA_Abort_IT+0xd4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_DMA_Abort_IT+0x9c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	; (8002608 <HAL_DMA_Abort_IT+0xd8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01a      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x96>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1d      	ldr	r2, [pc, #116]	; (800260c <HAL_DMA_Abort_IT+0xdc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d012      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x90>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <HAL_DMA_Abort_IT+0xe0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00a      	beq.n	80025ba <HAL_DMA_Abort_IT+0x8a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_DMA_Abort_IT+0xe4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d102      	bne.n	80025b4 <HAL_DMA_Abort_IT+0x84>
 80025ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b2:	e00e      	b.n	80025d2 <HAL_DMA_Abort_IT+0xa2>
 80025b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b8:	e00b      	b.n	80025d2 <HAL_DMA_Abort_IT+0xa2>
 80025ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025be:	e008      	b.n	80025d2 <HAL_DMA_Abort_IT+0xa2>
 80025c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c4:	e005      	b.n	80025d2 <HAL_DMA_Abort_IT+0xa2>
 80025c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ca:	e002      	b.n	80025d2 <HAL_DMA_Abort_IT+0xa2>
 80025cc:	2310      	movs	r3, #16
 80025ce:	e000      	b.n	80025d2 <HAL_DMA_Abort_IT+0xa2>
 80025d0:	2301      	movs	r3, #1
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_DMA_Abort_IT+0xe8>)
 80025d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
    } 
  }
  return status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40020008 	.word	0x40020008
 8002604:	4002001c 	.word	0x4002001c
 8002608:	40020030 	.word	0x40020030
 800260c:	40020044 	.word	0x40020044
 8002610:	40020058 	.word	0x40020058
 8002614:	4002006c 	.word	0x4002006c
 8002618:	40020000 	.word	0x40020000

0800261c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2204      	movs	r2, #4
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d04f      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xc8>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a66      	ldr	r2, [pc, #408]	; (800280c <HAL_DMA_IRQHandler+0x1f0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d029      	beq.n	80026ca <HAL_DMA_IRQHandler+0xae>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_DMA_IRQHandler+0x1f4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xaa>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a63      	ldr	r2, [pc, #396]	; (8002814 <HAL_DMA_IRQHandler+0x1f8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0xa4>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a62      	ldr	r2, [pc, #392]	; (8002818 <HAL_DMA_IRQHandler+0x1fc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d012      	beq.n	80026ba <HAL_DMA_IRQHandler+0x9e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a60      	ldr	r2, [pc, #384]	; (800281c <HAL_DMA_IRQHandler+0x200>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00a      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x98>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a5f      	ldr	r2, [pc, #380]	; (8002820 <HAL_DMA_IRQHandler+0x204>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d102      	bne.n	80026ae <HAL_DMA_IRQHandler+0x92>
 80026a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026ac:	e00e      	b.n	80026cc <HAL_DMA_IRQHandler+0xb0>
 80026ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026b2:	e00b      	b.n	80026cc <HAL_DMA_IRQHandler+0xb0>
 80026b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b8:	e008      	b.n	80026cc <HAL_DMA_IRQHandler+0xb0>
 80026ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026be:	e005      	b.n	80026cc <HAL_DMA_IRQHandler+0xb0>
 80026c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c4:	e002      	b.n	80026cc <HAL_DMA_IRQHandler+0xb0>
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	e000      	b.n	80026cc <HAL_DMA_IRQHandler+0xb0>
 80026ca:	2304      	movs	r3, #4
 80026cc:	4a55      	ldr	r2, [pc, #340]	; (8002824 <HAL_DMA_IRQHandler+0x208>)
 80026ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8094 	beq.w	8002802 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026e2:	e08e      	b.n	8002802 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2202      	movs	r2, #2
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d056      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x186>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d051      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 020a 	bic.w	r2, r2, #10
 800271a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_DMA_IRQHandler+0x1f0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d029      	beq.n	8002782 <HAL_DMA_IRQHandler+0x166>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a37      	ldr	r2, [pc, #220]	; (8002810 <HAL_DMA_IRQHandler+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <HAL_DMA_IRQHandler+0x162>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_DMA_IRQHandler+0x1f8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x15c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_DMA_IRQHandler+0x1fc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d012      	beq.n	8002772 <HAL_DMA_IRQHandler+0x156>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_DMA_IRQHandler+0x200>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00a      	beq.n	800276c <HAL_DMA_IRQHandler+0x150>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a31      	ldr	r2, [pc, #196]	; (8002820 <HAL_DMA_IRQHandler+0x204>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d102      	bne.n	8002766 <HAL_DMA_IRQHandler+0x14a>
 8002760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002764:	e00e      	b.n	8002784 <HAL_DMA_IRQHandler+0x168>
 8002766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276a:	e00b      	b.n	8002784 <HAL_DMA_IRQHandler+0x168>
 800276c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002770:	e008      	b.n	8002784 <HAL_DMA_IRQHandler+0x168>
 8002772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002776:	e005      	b.n	8002784 <HAL_DMA_IRQHandler+0x168>
 8002778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800277c:	e002      	b.n	8002784 <HAL_DMA_IRQHandler+0x168>
 800277e:	2320      	movs	r3, #32
 8002780:	e000      	b.n	8002784 <HAL_DMA_IRQHandler+0x168>
 8002782:	2302      	movs	r3, #2
 8002784:	4a27      	ldr	r2, [pc, #156]	; (8002824 <HAL_DMA_IRQHandler+0x208>)
 8002786:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d034      	beq.n	8002802 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027a0:	e02f      	b.n	8002802 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <HAL_DMA_IRQHandler+0x1e8>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d023      	beq.n	8002804 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 020e 	bic.w	r2, r2, #14
 80027ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f202 	lsl.w	r2, r1, r2
 80027da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
    }
  }
  return;
 8002802:	bf00      	nop
 8002804:	bf00      	nop
}
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40020008 	.word	0x40020008
 8002810:	4002001c 	.word	0x4002001c
 8002814:	40020030 	.word	0x40020030
 8002818:	40020044 	.word	0x40020044
 800281c:	40020058 	.word	0x40020058
 8002820:	4002006c 	.word	0x4002006c
 8002824:	40020000 	.word	0x40020000

08002828 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b10      	cmp	r3, #16
 8002854:	d108      	bne.n	8002868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002866:	e007      	b.n	8002878 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b08b      	sub	sp, #44	; 0x2c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e169      	b.n	8002b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002898:	2201      	movs	r2, #1
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 8158 	bne.w	8002b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a9a      	ldr	r2, [pc, #616]	; (8002b24 <HAL_GPIO_Init+0x2a0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028c0:	4a98      	ldr	r2, [pc, #608]	; (8002b24 <HAL_GPIO_Init+0x2a0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d875      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028c6:	4a98      	ldr	r2, [pc, #608]	; (8002b28 <HAL_GPIO_Init+0x2a4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d058      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028cc:	4a96      	ldr	r2, [pc, #600]	; (8002b28 <HAL_GPIO_Init+0x2a4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d86f      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028d2:	4a96      	ldr	r2, [pc, #600]	; (8002b2c <HAL_GPIO_Init+0x2a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d052      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028d8:	4a94      	ldr	r2, [pc, #592]	; (8002b2c <HAL_GPIO_Init+0x2a8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d869      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028de:	4a94      	ldr	r2, [pc, #592]	; (8002b30 <HAL_GPIO_Init+0x2ac>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04c      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028e4:	4a92      	ldr	r2, [pc, #584]	; (8002b30 <HAL_GPIO_Init+0x2ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d863      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028ea:	4a92      	ldr	r2, [pc, #584]	; (8002b34 <HAL_GPIO_Init+0x2b0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d046      	beq.n	800297e <HAL_GPIO_Init+0xfa>
 80028f0:	4a90      	ldr	r2, [pc, #576]	; (8002b34 <HAL_GPIO_Init+0x2b0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d85d      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d82a      	bhi.n	8002950 <HAL_GPIO_Init+0xcc>
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d859      	bhi.n	80029b2 <HAL_GPIO_Init+0x12e>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_GPIO_Init+0x80>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	0800297f 	.word	0x0800297f
 8002908:	08002959 	.word	0x08002959
 800290c:	0800296b 	.word	0x0800296b
 8002910:	080029ad 	.word	0x080029ad
 8002914:	080029b3 	.word	0x080029b3
 8002918:	080029b3 	.word	0x080029b3
 800291c:	080029b3 	.word	0x080029b3
 8002920:	080029b3 	.word	0x080029b3
 8002924:	080029b3 	.word	0x080029b3
 8002928:	080029b3 	.word	0x080029b3
 800292c:	080029b3 	.word	0x080029b3
 8002930:	080029b3 	.word	0x080029b3
 8002934:	080029b3 	.word	0x080029b3
 8002938:	080029b3 	.word	0x080029b3
 800293c:	080029b3 	.word	0x080029b3
 8002940:	080029b3 	.word	0x080029b3
 8002944:	080029b3 	.word	0x080029b3
 8002948:	08002961 	.word	0x08002961
 800294c:	08002975 	.word	0x08002975
 8002950:	4a79      	ldr	r2, [pc, #484]	; (8002b38 <HAL_GPIO_Init+0x2b4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002956:	e02c      	b.n	80029b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	623b      	str	r3, [r7, #32]
          break;
 800295e:	e029      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	3304      	adds	r3, #4
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e024      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	3308      	adds	r3, #8
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e01f      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	330c      	adds	r3, #12
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e01a      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002986:	2304      	movs	r3, #4
 8002988:	623b      	str	r3, [r7, #32]
          break;
 800298a:	e013      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002994:	2308      	movs	r3, #8
 8002996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	611a      	str	r2, [r3, #16]
          break;
 800299e:	e009      	b.n	80029b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a0:	2308      	movs	r3, #8
 80029a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	615a      	str	r2, [r3, #20]
          break;
 80029aa:	e003      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
          break;
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_Init+0x130>
          break;
 80029b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d801      	bhi.n	80029be <HAL_GPIO_Init+0x13a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_Init+0x13e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d802      	bhi.n	80029d0 <HAL_GPIO_Init+0x14c>
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x152>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3b08      	subs	r3, #8
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	210f      	movs	r1, #15
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	6a39      	ldr	r1, [r7, #32]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80b1 	beq.w	8002b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a4c      	ldr	r2, [pc, #304]	; (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <HAL_GPIO_Init+0x2b8>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a1c:	4a48      	ldr	r2, [pc, #288]	; (8002b40 <HAL_GPIO_Init+0x2bc>)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <HAL_GPIO_Init+0x2c0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1ec>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_GPIO_Init+0x2c4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1e8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3e      	ldr	r2, [pc, #248]	; (8002b4c <HAL_GPIO_Init+0x2c8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1e4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <HAL_GPIO_Init+0x2cc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1e0>
 8002a60:	2303      	movs	r3, #3
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e004      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_GPIO_Init+0x1ee>
 8002a70:	2300      	movs	r3, #0
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a82:	492f      	ldr	r1, [pc, #188]	; (8002b40 <HAL_GPIO_Init+0x2bc>)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	492c      	ldr	r1, [pc, #176]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4928      	ldr	r1, [pc, #160]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4922      	ldr	r1, [pc, #136]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	491e      	ldr	r1, [pc, #120]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4918      	ldr	r1, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	4914      	ldr	r1, [pc, #80]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d021      	beq.n	8002b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
 8002b20:	e021      	b.n	8002b66 <HAL_GPIO_Init+0x2e2>
 8002b22:	bf00      	nop
 8002b24:	10320000 	.word	0x10320000
 8002b28:	10310000 	.word	0x10310000
 8002b2c:	10220000 	.word	0x10220000
 8002b30:	10210000 	.word	0x10210000
 8002b34:	10120000 	.word	0x10120000
 8002b38:	10110000 	.word	0x10110000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010800 	.word	0x40010800
 8002b48:	40010c00 	.word	0x40010c00
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	40011400 	.word	0x40011400
 8002b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	4909      	ldr	r1, [pc, #36]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f ae8e 	bne.w	8002898 <HAL_GPIO_Init+0x14>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	372c      	adds	r7, #44	; 0x2c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e001      	b.n	8002bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	807b      	strh	r3, [r7, #2]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bca:	787b      	ldrb	r3, [r7, #1]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	041a      	lsls	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd ffaa 	bl	8000b64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	af06      	add	r7, sp, #24
 8002c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0fd      	b.n	8002e2a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff f886 	bl	8001d54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fb38 	bl	80052ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	687e      	ldr	r6, [r7, #4]
 8002c62:	466d      	mov	r5, sp
 8002c64:	f106 0410 	add.w	r4, r6, #16
 8002c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	602b      	str	r3, [r5, #0]
 8002c70:	1d33      	adds	r3, r6, #4
 8002c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f002 fb18 	bl	80052aa <USB_CoreInit>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0ce      	b.n	8002e2a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fb33 	bl	80052fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e04c      	b.n	8002d38 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	3301      	adds	r3, #1
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	b298      	uxth	r0, r3
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3336      	adds	r3, #54	; 0x36
 8002cdc:	4602      	mov	r2, r0
 8002cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3338      	adds	r3, #56	; 0x38
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	333c      	adds	r3, #60	; 0x3c
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3340      	adds	r3, #64	; 0x40
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	3301      	adds	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3ad      	bcc.n	8002c9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e044      	b.n	8002dd2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3b5      	bcc.n	8002d48 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	687e      	ldr	r6, [r7, #4]
 8002de4:	466d      	mov	r5, sp
 8002de6:	f106 0410 	add.w	r4, r6, #16
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	602b      	str	r3, [r5, #0]
 8002df2:	1d33      	adds	r3, r6, #4
 8002df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f002 fa8d 	bl	8005316 <USB_DevInit>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00d      	b.n	8002e2a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 fa97 	bl	8005356 <USB_DevDisconnect>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e272      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8087 	beq.w	8002f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e60:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d112      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5e>
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d10b      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7a:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d06c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x12c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d168      	bne.n	8002f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e24c      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x76>
 8002e9c:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7f      	ldr	r2, [pc, #508]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e02e      	b.n	8002f08 <HAL_RCC_OscConfig+0xd4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7a      	ldr	r2, [pc, #488]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b78      	ldr	r3, [pc, #480]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a77      	ldr	r2, [pc, #476]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xd4>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xbc>
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a71      	ldr	r2, [pc, #452]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xd4>
 8002ef0:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6a      	ldr	r2, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff f8de 	bl	80020d0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7ff f8da 	bl	80020d0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e200      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe4>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7ff f8ca 	bl	80020d0 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7ff f8c6 	bl	80020d0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1ec      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x10c>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f7a:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x18c>
 8002f86:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x176>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1c0      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4939      	ldr	r1, [pc, #228]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x270>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7ff f87f 	bl	80020d0 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7ff f87b 	bl	80020d0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1a1      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4927      	ldr	r1, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_RCC_OscConfig+0x270>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7ff f85e 	bl	80020d0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7ff f85a 	bl	80020d0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e180      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03a      	beq.n	80030b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d019      	beq.n	800307e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_RCC_OscConfig+0x274>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7ff f83e 	bl	80020d0 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7ff f83a 	bl	80020d0 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e160      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003076:	2001      	movs	r0, #1
 8003078:	f000 faa8 	bl	80035cc <RCC_Delay>
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_OscConfig+0x274>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7ff f824 	bl	80020d0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308a:	e00f      	b.n	80030ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7ff f820 	bl	80020d0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d908      	bls.n	80030ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e146      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	42420000 	.word	0x42420000
 80030a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b92      	ldr	r3, [pc, #584]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e9      	bne.n	800308c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a6 	beq.w	8003212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b8b      	ldr	r3, [pc, #556]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a87      	ldr	r2, [pc, #540]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b82      	ldr	r3, [pc, #520]	; (80032fc <HAL_RCC_OscConfig+0x4c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x4c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7e      	ldr	r2, [pc, #504]	; (80032fc <HAL_RCC_OscConfig+0x4c8>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe ffe1 	bl	80020d0 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe ffdd 	bl	80020d0 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b64      	cmp	r3, #100	; 0x64
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e103      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b75      	ldr	r3, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x4c8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x312>
 8003138:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a6e      	ldr	r2, [pc, #440]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e02d      	b.n	80031a2 <HAL_RCC_OscConfig+0x36e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x334>
 800314e:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a66      	ldr	r2, [pc, #408]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6213      	str	r3, [r2, #32]
 8003166:	e01c      	b.n	80031a2 <HAL_RCC_OscConfig+0x36e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d10c      	bne.n	800318a <HAL_RCC_OscConfig+0x356>
 8003170:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a60      	ldr	r2, [pc, #384]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6213      	str	r3, [r2, #32]
 8003188:	e00b      	b.n	80031a2 <HAL_RCC_OscConfig+0x36e>
 800318a:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a5a      	ldr	r2, [pc, #360]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d015      	beq.n	80031d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe ff91 	bl	80020d0 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe ff8d 	bl	80020d0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0b1      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ee      	beq.n	80031b2 <HAL_RCC_OscConfig+0x37e>
 80031d4:	e014      	b.n	8003200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe ff7b 	bl	80020d0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe ff77 	bl	80020d0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e09b      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ee      	bne.n	80031de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8087 	beq.w	800332a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b08      	cmp	r3, #8
 8003226:	d061      	beq.n	80032ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d146      	bne.n	80032be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe ff4b 	bl	80020d0 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fe ff47 	bl	80020d0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e06d      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4921      	ldr	r1, [pc, #132]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a19      	ldr	r1, [r3, #32]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	430b      	orrs	r3, r1
 800328a:	491b      	ldr	r1, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe ff1b 	bl	80020d0 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe ff17 	bl	80020d0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e03d      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x46a>
 80032bc:	e035      	b.n	800332a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe ff04 	bl	80020d0 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe ff00 	bl	80020d0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e026      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x498>
 80032ea:	e01e      	b.n	800332a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e019      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
 8003300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x500>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	429a      	cmp	r2, r3
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0d0      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d910      	bls.n	800337c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 0207 	bic.w	r2, r3, #7
 8003362:	4965      	ldr	r1, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800339e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d040      	beq.n	8003458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d115      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e073      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003416:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4936      	ldr	r1, [pc, #216]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003428:	f7fe fe52 	bl	80020d0 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	e00a      	b.n	8003446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fe fe4e 	bl	80020d0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e053      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 020c 	and.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d1eb      	bne.n	8003430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d210      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 0207 	bic.w	r2, r3, #7
 800346e:	4922      	ldr	r1, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1cc>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1d0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fdb0 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40021000 	.word	0x40021000
 8003500:	0800a26c 	.word	0x0800a26c
 8003504:	20000014 	.word	0x20000014
 8003508:	20000018 	.word	0x20000018

0800350c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b490      	push	{r4, r7}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003514:	1d3c      	adds	r4, r7, #4
 8003516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800351c:	f240 2301 	movw	r3, #513	; 0x201
 8003520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x40>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x46>
 800354a:	e02b      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800354e:	623b      	str	r3, [r7, #32]
      break;
 8003550:	e02b      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	0c9b      	lsrs	r3, r3, #18
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3328      	adds	r3, #40	; 0x28
 800355c:	443b      	add	r3, r7
 800355e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003562:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0c5b      	lsrs	r3, r3, #17
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	3328      	adds	r3, #40	; 0x28
 800357a:	443b      	add	r3, r7
 800357c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4a0e      	ldr	r2, [pc, #56]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003586:	fb03 f202 	mul.w	r2, r3, r2
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e004      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	623b      	str	r3, [r7, #32]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a6:	623b      	str	r3, [r7, #32]
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc90      	pop	{r4, r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	080081b4 	.word	0x080081b4
 80035bc:	40021000 	.word	0x40021000
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	003d0900 	.word	0x003d0900
 80035c8:	007a1200 	.word	0x007a1200

080035cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <RCC_Delay+0x34>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <RCC_Delay+0x38>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0a5b      	lsrs	r3, r3, #9
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e8:	bf00      	nop
  }
  while (Delay --);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <RCC_Delay+0x1c>
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000014 	.word	0x20000014
 8003604:	10624dd3 	.word	0x10624dd3

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d07d      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003628:	4b4f      	ldr	r3, [pc, #316]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4a4b      	ldr	r2, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	61d3      	str	r3, [r2, #28]
 8003640:	4b49      	ldr	r3, [pc, #292]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a42      	ldr	r2, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003668:	f7fe fd32 	bl	80020d0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fe fd2e 	bl	80020d0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06d      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d027      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d014      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fcfd 	bl	80020d0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fcf9 	bl	80020d0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e036      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4917      	ldr	r1, [pc, #92]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	4313      	orrs	r3, r2
 800370c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a13      	ldr	r2, [pc, #76]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	490b      	ldr	r1, [pc, #44]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	42420440 	.word	0x42420440

08003774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e076      	b.n	8003874 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003796:	d009      	beq.n	80037ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
 800379e:	e005      	b.n	80037ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fe f90e 	bl	80019e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	ea42 0103 	orr.w	r1, r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	0c1a      	lsrs	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f002 0204 	and.w	r2, r2, #4
 8003852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_SPI_Transmit+0x22>
 800389a:	2302      	movs	r3, #2
 800389c:	e126      	b.n	8003aec <HAL_SPI_Transmit+0x270>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a6:	f7fe fc13 	bl	80020d0 <HAL_GetTick>
 80038aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c0:	e10b      	b.n	8003ada <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0x52>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d2:	e102      	b.n	8003ada <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391a:	d10f      	bne.n	800393c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d007      	beq.n	800395a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003962:	d14b      	bne.n	80039fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_SPI_Transmit+0xf6>
 800396c:	8afb      	ldrh	r3, [r7, #22]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d13e      	bne.n	80039f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003996:	e02b      	b.n	80039f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d112      	bne.n	80039cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	1c9a      	adds	r2, r3, #2
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ca:	e011      	b.n	80039f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039cc:	f7fe fb80 	bl	80020d0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d803      	bhi.n	80039e4 <HAL_SPI_Transmit+0x168>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Transmit+0x16e>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ee:	e074      	b.n	8003ada <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ce      	bne.n	8003998 <HAL_SPI_Transmit+0x11c>
 80039fa:	e04c      	b.n	8003a96 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_Transmit+0x18e>
 8003a04:	8afb      	ldrh	r3, [r7, #22]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d140      	bne.n	8003a8c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a30:	e02c      	b.n	8003a8c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d113      	bne.n	8003a68 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a66:	e011      	b.n	8003a8c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a68:	f7fe fb32 	bl	80020d0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d803      	bhi.n	8003a80 <HAL_SPI_Transmit+0x204>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d102      	bne.n	8003a86 <HAL_SPI_Transmit+0x20a>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a8a:	e026      	b.n	8003ada <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1cd      	bne.n	8003a32 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	6839      	ldr	r1, [r7, #0]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fb36 	bl	800410c <SPI_EndRxTxTransaction>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e000      	b.n	8003ada <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ad8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_SPI_Transmit_DMA+0x20>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e09b      	b.n	8003c4c <HAL_SPI_Transmit_DMA+0x158>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b2c:	e089      	b.n	8003c42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Transmit_DMA+0x46>
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b3e:	e080      	b.n	8003c42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2203      	movs	r2, #3
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b86:	d10f      	bne.n	8003ba8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bac:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <HAL_SPI_Transmit_DMA+0x160>)
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_SPI_Transmit_DMA+0x164>)
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <HAL_SPI_Transmit_DMA+0x168>)
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003be0:	f7fe fc0c 	bl	80023fc <HAL_DMA_Start_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c02:	e01e      	b.n	8003c42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d007      	beq.n	8003c22 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0220 	orr.w	r2, r2, #32
 8003c30:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0202 	orr.w	r2, r2, #2
 8003c40:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08003f77 	.word	0x08003f77
 8003c58:	08003ed1 	.word	0x08003ed1
 8003c5c:	08003f93 	.word	0x08003f93

08003c60 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00f      	beq.n	8003c94 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fc1e 	bl	80024ba <HAL_DMA_Abort>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0210 	orr.w	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fc0a 	bl	80024ba <HAL_DMA_Abort>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0210 	orr.w	r2, r3, #16
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0203 	bic.w	r2, r2, #3
 8003cca:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
    return;
 8003d22:	e0be      	b.n	8003ea2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_SPI_IRQHandler+0x66>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	09db      	lsrs	r3, r3, #7
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
    return;
 8003d44:	e0ad      	b.n	8003ea2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_SPI_IRQHandler+0x80>
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a1 	beq.w	8003ea2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 809a 	beq.w	8003ea2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d023      	beq.n	8003dc2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d011      	beq.n	8003daa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	e00b      	b.n	8003dc2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
        return;
 8003dc0:	e06f      	b.n	8003ea2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d014      	beq.n	8003df8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f043 0201 	orr.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04f      	beq.n	8003ea0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e0e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <HAL_SPI_IRQHandler+0x14c>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d034      	beq.n	8003e96 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0203 	bic.w	r2, r2, #3
 8003e3a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d011      	beq.n	8003e68 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_SPI_IRQHandler+0x1c8>)
 8003e4a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fb6d 	bl	8002530 <HAL_DMA_Abort_IT>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_SPI_IRQHandler+0x1c8>)
 8003e76:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fb57 	bl	8002530 <HAL_DMA_Abort_IT>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e94:	e003      	b.n	8003e9e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f811 	bl	8003ebe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e9c:	e000      	b.n	8003ea0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003e9e:	bf00      	nop
    return;
 8003ea0:	bf00      	nop
  }
}
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	08003fd3 	.word	0x08003fd3

08003eac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ede:	f7fe f8f7 	bl	80020d0 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d03b      	beq.n	8003f6a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0220 	bic.w	r2, r2, #32
 8003f00:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0202 	bic.w	r2, r2, #2
 8003f10:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	2164      	movs	r1, #100	; 0x64
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f000 f8f8 	bl	800410c <SPI_EndRxTxTransaction>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	f7ff ffab 	bl	8003ebe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f68:	e002      	b.n	8003f70 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7fc fdec 	bl	8000b48 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ff91 	bl	8003eac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0203 	bic.w	r2, r2, #3
 8003fae:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f043 0210 	orr.w	r2, r3, #16
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ff7a 	bl	8003ebe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ff66 	bl	8003ebe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800400c:	f7fe f860 	bl	80020d0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4413      	add	r3, r2
 800401a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800401c:	f7fe f858 	bl	80020d0 <HAL_GetTick>
 8004020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004022:	4b39      	ldr	r3, [pc, #228]	; (8004108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	015b      	lsls	r3, r3, #5
 8004028:	0d1b      	lsrs	r3, r3, #20
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004032:	e054      	b.n	80040de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d050      	beq.n	80040de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800403c:	f7fe f848 	bl	80020d0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	429a      	cmp	r2, r3
 800404a:	d902      	bls.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d13d      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800406a:	d111      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d004      	beq.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d107      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d10f      	bne.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e017      	b.n	80040fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3b01      	subs	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d19b      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000014 	.word	0x20000014

0800410c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2200      	movs	r2, #0
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ff6a 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e000      	b.n	8004140 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e041      	b.n	80041de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fd10 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 fd2a 	bl	8004be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e03a      	b.n	8004276 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_TIM_Base_Start_IT+0x98>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x58>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d009      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x58>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a14      	ldr	r2, [pc, #80]	; (8004284 <HAL_TIM_Base_Start_IT+0x9c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x58>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_TIM_Base_Start_IT+0xa0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d111      	bne.n	8004264 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b06      	cmp	r3, #6
 8004250:	d010      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	e007      	b.n	8004274 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800

0800428c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e041      	b.n	8004322 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fc50 	bl	8001b58 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f000 fc88 	bl	8004be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e041      	b.n	80043c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fd fc43 	bl	8001bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f000 fc39 	bl	8004be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x24>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e022      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d109      	bne.n	8004406 <HAL_TIM_PWM_Start+0x3e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e015      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x58>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e008      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e05e      	b.n	80044f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0x82>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	e013      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0x92>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	e00b      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0xa2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004468:	e003      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fe30 	bl	80050e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_TIM_PWM_Start+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d107      	bne.n	800449a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIM_PWM_Start+0x138>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d009      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a14      	ldr	r2, [pc, #80]	; (8004504 <HAL_TIM_PWM_Start+0x13c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <HAL_TIM_PWM_Start+0x140>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d111      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d010      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	e007      	b.n	80044f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800

0800450c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fdde 	bl	80050e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_TIM_PWM_Stop+0xc4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d117      	bne.n	800455e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	f241 1311 	movw	r3, #4369	; 0x1111
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <HAL_TIM_PWM_Stop+0x52>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	f240 4344 	movw	r3, #1092	; 0x444
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_TIM_PWM_Stop+0x52>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f241 1311 	movw	r3, #4369	; 0x1111
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_TIM_PWM_Stop+0x82>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	f240 4344 	movw	r3, #1092	; 0x444
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <HAL_TIM_PWM_Stop+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Stop+0x92>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	e013      	b.n	80045c6 <HAL_TIM_PWM_Stop+0xba>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Stop+0xa2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_PWM_Stop+0xba>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Stop+0xb2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045bc:	e003      	b.n	80045c6 <HAL_TIM_PWM_Stop+0xba>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40012c00 	.word	0x40012c00

080045d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0202 	mvn.w	r2, #2
 8004600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fac7 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 faba 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fac9 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0204 	mvn.w	r2, #4
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa9d 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa90 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fa9f 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0208 	mvn.w	r2, #8
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa73 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa66 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fa75 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2208      	movs	r2, #8
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa49 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa3c 	bl	8004b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fa4b 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc f9e0 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fd8a 	bl	8005298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa0f 	bl	8004bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0220 	mvn.w	r2, #32
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fd55 	bl	8005286 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_OC_ConfigChannel+0x1a>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e046      	b.n	800488c <HAL_TIM_OC_ConfigChannel+0xa8>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d839      	bhi.n	8004880 <HAL_TIM_OC_ConfigChannel+0x9c>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <HAL_TIM_OC_ConfigChannel+0x30>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004849 	.word	0x08004849
 8004818:	08004881 	.word	0x08004881
 800481c:	08004881 	.word	0x08004881
 8004820:	08004881 	.word	0x08004881
 8004824:	08004857 	.word	0x08004857
 8004828:	08004881 	.word	0x08004881
 800482c:	08004881 	.word	0x08004881
 8004830:	08004881 	.word	0x08004881
 8004834:	08004865 	.word	0x08004865
 8004838:	08004881 	.word	0x08004881
 800483c:	08004881 	.word	0x08004881
 8004840:	08004881 	.word	0x08004881
 8004844:	08004873 	.word	0x08004873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fa28 	bl	8004ca4 <TIM_OC1_SetConfig>
      break;
 8004854:	e015      	b.n	8004882 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa87 	bl	8004d70 <TIM_OC2_SetConfig>
      break;
 8004862:	e00e      	b.n	8004882 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 faea 	bl	8004e44 <TIM_OC3_SetConfig>
      break;
 8004870:	e007      	b.n	8004882 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fb4d 	bl	8004f18 <TIM_OC4_SetConfig>
      break;
 800487e:	e000      	b.n	8004882 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0ac      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x174>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	f200 809f 	bhi.w	80049fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	080049fd 	.word	0x080049fd
 80048cc:	080049fd 	.word	0x080049fd
 80048d0:	080049fd 	.word	0x080049fd
 80048d4:	08004939 	.word	0x08004939
 80048d8:	080049fd 	.word	0x080049fd
 80048dc:	080049fd 	.word	0x080049fd
 80048e0:	080049fd 	.word	0x080049fd
 80048e4:	0800497b 	.word	0x0800497b
 80048e8:	080049fd 	.word	0x080049fd
 80048ec:	080049fd 	.word	0x080049fd
 80048f0:	080049fd 	.word	0x080049fd
 80048f4:	080049bb 	.word	0x080049bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f9d0 	bl	8004ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0204 	bic.w	r2, r2, #4
 8004922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6999      	ldr	r1, [r3, #24]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	619a      	str	r2, [r3, #24]
      break;
 8004936:	e062      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fa16 	bl	8004d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	021a      	lsls	r2, r3, #8
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	619a      	str	r2, [r3, #24]
      break;
 8004978:	e041      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fa5f 	bl	8004e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0208 	orr.w	r2, r2, #8
 8004994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0204 	bic.w	r2, r2, #4
 80049a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69d9      	ldr	r1, [r3, #28]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	61da      	str	r2, [r3, #28]
      break;
 80049b8:	e021      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 faa9 	bl	8004f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	021a      	lsls	r2, r3, #8
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	61da      	str	r2, [r3, #28]
      break;
 80049fa:	e000      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80049fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0b3      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x180>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a60:	d03e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0xd0>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	f200 8087 	bhi.w	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	f000 8085 	beq.w	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d87f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004a78:	2b70      	cmp	r3, #112	; 0x70
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xa2>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d87b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d050      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x116>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d877      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004a88:	2b50      	cmp	r3, #80	; 0x50
 8004a8a:	d03c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xf6>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d873      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d058      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x136>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d86f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004a98:	2b30      	cmp	r3, #48	; 0x30
 8004a9a:	d064      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x156>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d86b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d060      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x156>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d867      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x156>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d05a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ab0:	e062      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f000 faee 	bl	80050a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	609a      	str	r2, [r3, #8]
      break;
 8004ade:	e04e      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 fad7 	bl	80050a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e03b      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 fa4e 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2150      	movs	r1, #80	; 0x50
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 faa5 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004b24:	e02b      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fa6c 	bl	8005010 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2160      	movs	r1, #96	; 0x60
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fa95 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004b44:	e01b      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fa2e 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa85 	bl	800506e <TIM_ITRx_SetConfig>
      break;
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 fa7c 	bl	800506e <TIM_ITRx_SetConfig>
        break;
 8004b76:	e002      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_Base_SetConfig+0xb8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_Base_SetConfig+0x30>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfe:	d007      	beq.n	8004c10 <TIM_Base_SetConfig+0x30>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <TIM_Base_SetConfig+0xbc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_Base_SetConfig+0x30>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <TIM_Base_SetConfig+0xc0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <TIM_Base_SetConfig+0xb8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_Base_SetConfig+0x62>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d007      	beq.n	8004c42 <TIM_Base_SetConfig+0x62>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <TIM_Base_SetConfig+0xbc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_Base_SetConfig+0x62>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <TIM_Base_SetConfig+0xc0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d108      	bne.n	8004c54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <TIM_Base_SetConfig+0xb8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d103      	bne.n	8004c88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	615a      	str	r2, [r3, #20]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 0302 	bic.w	r3, r3, #2
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <TIM_OC1_SetConfig+0xc8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10c      	bne.n	8004d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 0308 	bic.w	r3, r3, #8
 8004d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 0304 	bic.w	r3, r3, #4
 8004d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <TIM_OC1_SetConfig+0xc8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d111      	bne.n	8004d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00

08004d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0210 	bic.w	r2, r3, #16
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0320 	bic.w	r3, r3, #32
 8004dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <TIM_OC2_SetConfig+0xd0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10d      	bne.n	8004dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <TIM_OC2_SetConfig+0xd0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d113      	bne.n	8004e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr
 8004e40:	40012c00 	.word	0x40012c00

08004e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <TIM_OC3_SetConfig+0xd0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10d      	bne.n	8004ebe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <TIM_OC3_SetConfig+0xd0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d113      	bne.n	8004eee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00

08004f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a0f      	ldr	r2, [pc, #60]	; (8004fb0 <TIM_OC4_SetConfig+0x98>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d109      	bne.n	8004f8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00

08004fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 030a 	bic.w	r3, r3, #10
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f023 0210 	bic.w	r2, r3, #16
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800503a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	031b      	lsls	r3, r3, #12
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800504c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	f043 0307 	orr.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b087      	sub	sp, #28
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	021a      	lsls	r2, r3, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	609a      	str	r2, [r3, #8]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2201      	movs	r2, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	43db      	mvns	r3, r3
 8005102:	401a      	ands	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	431a      	orrs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800513c:	2302      	movs	r3, #2
 800513e:	e046      	b.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d009      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10c      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800

080051e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e03d      	b.n	800527c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052aa:	b084      	sub	sp, #16
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	f107 0014 	add.w	r0, r7, #20
 80052b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	b004      	add	sp, #16
 80052c8:	4770      	bx	lr

080052ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052d2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	4013      	ands	r3, r2
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005316:	b084      	sub	sp, #16
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	f107 0014 	add.w	r0, r7, #20
 8005324:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	b004      	add	sp, #16
 8005354:	4770      	bx	lr

08005356 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
	...

0800536c <__errno>:
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <__errno+0x8>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000020 	.word	0x20000020

08005378 <__libc_init_array>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	2600      	movs	r6, #0
 800537c:	4d0c      	ldr	r5, [pc, #48]	; (80053b0 <__libc_init_array+0x38>)
 800537e:	4c0d      	ldr	r4, [pc, #52]	; (80053b4 <__libc_init_array+0x3c>)
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	42a6      	cmp	r6, r4
 8005386:	d109      	bne.n	800539c <__libc_init_array+0x24>
 8005388:	f002 fefa 	bl	8008180 <_init>
 800538c:	2600      	movs	r6, #0
 800538e:	4d0a      	ldr	r5, [pc, #40]	; (80053b8 <__libc_init_array+0x40>)
 8005390:	4c0a      	ldr	r4, [pc, #40]	; (80053bc <__libc_init_array+0x44>)
 8005392:	1b64      	subs	r4, r4, r5
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	42a6      	cmp	r6, r4
 8005398:	d105      	bne.n	80053a6 <__libc_init_array+0x2e>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a0:	4798      	blx	r3
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7ee      	b.n	8005384 <__libc_init_array+0xc>
 80053a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053aa:	4798      	blx	r3
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7f2      	b.n	8005396 <__libc_init_array+0x1e>
 80053b0:	0800a654 	.word	0x0800a654
 80053b4:	0800a654 	.word	0x0800a654
 80053b8:	0800a654 	.word	0x0800a654
 80053bc:	0800a658 	.word	0x0800a658

080053c0 <memset>:
 80053c0:	4603      	mov	r3, r0
 80053c2:	4402      	add	r2, r0
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d100      	bne.n	80053ca <memset+0xa>
 80053c8:	4770      	bx	lr
 80053ca:	f803 1b01 	strb.w	r1, [r3], #1
 80053ce:	e7f9      	b.n	80053c4 <memset+0x4>

080053d0 <__cvt>:
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d6:	461f      	mov	r7, r3
 80053d8:	bfbb      	ittet	lt
 80053da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80053de:	461f      	movlt	r7, r3
 80053e0:	2300      	movge	r3, #0
 80053e2:	232d      	movlt	r3, #45	; 0x2d
 80053e4:	b088      	sub	sp, #32
 80053e6:	4614      	mov	r4, r2
 80053e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80053ec:	7013      	strb	r3, [r2, #0]
 80053ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80053f4:	f023 0820 	bic.w	r8, r3, #32
 80053f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053fc:	d005      	beq.n	800540a <__cvt+0x3a>
 80053fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005402:	d100      	bne.n	8005406 <__cvt+0x36>
 8005404:	3501      	adds	r5, #1
 8005406:	2302      	movs	r3, #2
 8005408:	e000      	b.n	800540c <__cvt+0x3c>
 800540a:	2303      	movs	r3, #3
 800540c:	aa07      	add	r2, sp, #28
 800540e:	9204      	str	r2, [sp, #16]
 8005410:	aa06      	add	r2, sp, #24
 8005412:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005416:	e9cd 3500 	strd	r3, r5, [sp]
 800541a:	4622      	mov	r2, r4
 800541c:	463b      	mov	r3, r7
 800541e:	f000 fce3 	bl	8005de8 <_dtoa_r>
 8005422:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005426:	4606      	mov	r6, r0
 8005428:	d102      	bne.n	8005430 <__cvt+0x60>
 800542a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800542c:	07db      	lsls	r3, r3, #31
 800542e:	d522      	bpl.n	8005476 <__cvt+0xa6>
 8005430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005434:	eb06 0905 	add.w	r9, r6, r5
 8005438:	d110      	bne.n	800545c <__cvt+0x8c>
 800543a:	7833      	ldrb	r3, [r6, #0]
 800543c:	2b30      	cmp	r3, #48	; 0x30
 800543e:	d10a      	bne.n	8005456 <__cvt+0x86>
 8005440:	2200      	movs	r2, #0
 8005442:	2300      	movs	r3, #0
 8005444:	4620      	mov	r0, r4
 8005446:	4639      	mov	r1, r7
 8005448:	f7fb faae 	bl	80009a8 <__aeabi_dcmpeq>
 800544c:	b918      	cbnz	r0, 8005456 <__cvt+0x86>
 800544e:	f1c5 0501 	rsb	r5, r5, #1
 8005452:	f8ca 5000 	str.w	r5, [sl]
 8005456:	f8da 3000 	ldr.w	r3, [sl]
 800545a:	4499      	add	r9, r3
 800545c:	2200      	movs	r2, #0
 800545e:	2300      	movs	r3, #0
 8005460:	4620      	mov	r0, r4
 8005462:	4639      	mov	r1, r7
 8005464:	f7fb faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8005468:	b108      	cbz	r0, 800546e <__cvt+0x9e>
 800546a:	f8cd 901c 	str.w	r9, [sp, #28]
 800546e:	2230      	movs	r2, #48	; 0x30
 8005470:	9b07      	ldr	r3, [sp, #28]
 8005472:	454b      	cmp	r3, r9
 8005474:	d307      	bcc.n	8005486 <__cvt+0xb6>
 8005476:	4630      	mov	r0, r6
 8005478:	9b07      	ldr	r3, [sp, #28]
 800547a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800547c:	1b9b      	subs	r3, r3, r6
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	b008      	add	sp, #32
 8005482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005486:	1c59      	adds	r1, r3, #1
 8005488:	9107      	str	r1, [sp, #28]
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	e7f0      	b.n	8005470 <__cvt+0xa0>

0800548e <__exponent>:
 800548e:	4603      	mov	r3, r0
 8005490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005492:	2900      	cmp	r1, #0
 8005494:	f803 2b02 	strb.w	r2, [r3], #2
 8005498:	bfb6      	itet	lt
 800549a:	222d      	movlt	r2, #45	; 0x2d
 800549c:	222b      	movge	r2, #43	; 0x2b
 800549e:	4249      	neglt	r1, r1
 80054a0:	2909      	cmp	r1, #9
 80054a2:	7042      	strb	r2, [r0, #1]
 80054a4:	dd2b      	ble.n	80054fe <__exponent+0x70>
 80054a6:	f10d 0407 	add.w	r4, sp, #7
 80054aa:	46a4      	mov	ip, r4
 80054ac:	270a      	movs	r7, #10
 80054ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80054b2:	460a      	mov	r2, r1
 80054b4:	46a6      	mov	lr, r4
 80054b6:	fb07 1516 	mls	r5, r7, r6, r1
 80054ba:	2a63      	cmp	r2, #99	; 0x63
 80054bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80054c0:	4631      	mov	r1, r6
 80054c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80054c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054ca:	dcf0      	bgt.n	80054ae <__exponent+0x20>
 80054cc:	3130      	adds	r1, #48	; 0x30
 80054ce:	f1ae 0502 	sub.w	r5, lr, #2
 80054d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054d6:	4629      	mov	r1, r5
 80054d8:	1c44      	adds	r4, r0, #1
 80054da:	4561      	cmp	r1, ip
 80054dc:	d30a      	bcc.n	80054f4 <__exponent+0x66>
 80054de:	f10d 0209 	add.w	r2, sp, #9
 80054e2:	eba2 020e 	sub.w	r2, r2, lr
 80054e6:	4565      	cmp	r5, ip
 80054e8:	bf88      	it	hi
 80054ea:	2200      	movhi	r2, #0
 80054ec:	4413      	add	r3, r2
 80054ee:	1a18      	subs	r0, r3, r0
 80054f0:	b003      	add	sp, #12
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054fc:	e7ed      	b.n	80054da <__exponent+0x4c>
 80054fe:	2330      	movs	r3, #48	; 0x30
 8005500:	3130      	adds	r1, #48	; 0x30
 8005502:	7083      	strb	r3, [r0, #2]
 8005504:	70c1      	strb	r1, [r0, #3]
 8005506:	1d03      	adds	r3, r0, #4
 8005508:	e7f1      	b.n	80054ee <__exponent+0x60>
	...

0800550c <_printf_float>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	b091      	sub	sp, #68	; 0x44
 8005512:	460c      	mov	r4, r1
 8005514:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005518:	4616      	mov	r6, r2
 800551a:	461f      	mov	r7, r3
 800551c:	4605      	mov	r5, r0
 800551e:	f001 fa51 	bl	80069c4 <_localeconv_r>
 8005522:	6803      	ldr	r3, [r0, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	9309      	str	r3, [sp, #36]	; 0x24
 8005528:	f7fa fe12 	bl	8000150 <strlen>
 800552c:	2300      	movs	r3, #0
 800552e:	930e      	str	r3, [sp, #56]	; 0x38
 8005530:	f8d8 3000 	ldr.w	r3, [r8]
 8005534:	900a      	str	r0, [sp, #40]	; 0x28
 8005536:	3307      	adds	r3, #7
 8005538:	f023 0307 	bic.w	r3, r3, #7
 800553c:	f103 0208 	add.w	r2, r3, #8
 8005540:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005544:	f8d4 b000 	ldr.w	fp, [r4]
 8005548:	f8c8 2000 	str.w	r2, [r8]
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005554:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005558:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800555c:	930b      	str	r3, [sp, #44]	; 0x2c
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	4640      	mov	r0, r8
 8005564:	4b9c      	ldr	r3, [pc, #624]	; (80057d8 <_printf_float+0x2cc>)
 8005566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005568:	f7fb fa50 	bl	8000a0c <__aeabi_dcmpun>
 800556c:	bb70      	cbnz	r0, 80055cc <_printf_float+0xc0>
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	4640      	mov	r0, r8
 8005574:	4b98      	ldr	r3, [pc, #608]	; (80057d8 <_printf_float+0x2cc>)
 8005576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005578:	f7fb fa2a 	bl	80009d0 <__aeabi_dcmple>
 800557c:	bb30      	cbnz	r0, 80055cc <_printf_float+0xc0>
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	4640      	mov	r0, r8
 8005584:	4651      	mov	r1, sl
 8005586:	f7fb fa19 	bl	80009bc <__aeabi_dcmplt>
 800558a:	b110      	cbz	r0, 8005592 <_printf_float+0x86>
 800558c:	232d      	movs	r3, #45	; 0x2d
 800558e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005592:	4b92      	ldr	r3, [pc, #584]	; (80057dc <_printf_float+0x2d0>)
 8005594:	4892      	ldr	r0, [pc, #584]	; (80057e0 <_printf_float+0x2d4>)
 8005596:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800559a:	bf94      	ite	ls
 800559c:	4698      	movls	r8, r3
 800559e:	4680      	movhi	r8, r0
 80055a0:	2303      	movs	r3, #3
 80055a2:	f04f 0a00 	mov.w	sl, #0
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	f02b 0304 	bic.w	r3, fp, #4
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	4633      	mov	r3, r6
 80055b0:	4621      	mov	r1, r4
 80055b2:	4628      	mov	r0, r5
 80055b4:	9700      	str	r7, [sp, #0]
 80055b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80055b8:	f000 f9d4 	bl	8005964 <_printf_common>
 80055bc:	3001      	adds	r0, #1
 80055be:	f040 8090 	bne.w	80056e2 <_printf_float+0x1d6>
 80055c2:	f04f 30ff 	mov.w	r0, #4294967295
 80055c6:	b011      	add	sp, #68	; 0x44
 80055c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	4642      	mov	r2, r8
 80055ce:	4653      	mov	r3, sl
 80055d0:	4640      	mov	r0, r8
 80055d2:	4651      	mov	r1, sl
 80055d4:	f7fb fa1a 	bl	8000a0c <__aeabi_dcmpun>
 80055d8:	b148      	cbz	r0, 80055ee <_printf_float+0xe2>
 80055da:	f1ba 0f00 	cmp.w	sl, #0
 80055de:	bfb8      	it	lt
 80055e0:	232d      	movlt	r3, #45	; 0x2d
 80055e2:	4880      	ldr	r0, [pc, #512]	; (80057e4 <_printf_float+0x2d8>)
 80055e4:	bfb8      	it	lt
 80055e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055ea:	4b7f      	ldr	r3, [pc, #508]	; (80057e8 <_printf_float+0x2dc>)
 80055ec:	e7d3      	b.n	8005596 <_printf_float+0x8a>
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	d142      	bne.n	800567e <_printf_float+0x172>
 80055f8:	2306      	movs	r3, #6
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	9206      	str	r2, [sp, #24]
 8005600:	aa0e      	add	r2, sp, #56	; 0x38
 8005602:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005606:	aa0d      	add	r2, sp, #52	; 0x34
 8005608:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800560c:	9203      	str	r2, [sp, #12]
 800560e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005612:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	4642      	mov	r2, r8
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	4628      	mov	r0, r5
 8005620:	4653      	mov	r3, sl
 8005622:	910b      	str	r1, [sp, #44]	; 0x2c
 8005624:	f7ff fed4 	bl	80053d0 <__cvt>
 8005628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800562a:	4680      	mov	r8, r0
 800562c:	2947      	cmp	r1, #71	; 0x47
 800562e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005630:	d108      	bne.n	8005644 <_printf_float+0x138>
 8005632:	1cc8      	adds	r0, r1, #3
 8005634:	db02      	blt.n	800563c <_printf_float+0x130>
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	4299      	cmp	r1, r3
 800563a:	dd40      	ble.n	80056be <_printf_float+0x1b2>
 800563c:	f1a9 0902 	sub.w	r9, r9, #2
 8005640:	fa5f f989 	uxtb.w	r9, r9
 8005644:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005648:	d81f      	bhi.n	800568a <_printf_float+0x17e>
 800564a:	464a      	mov	r2, r9
 800564c:	3901      	subs	r1, #1
 800564e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005652:	910d      	str	r1, [sp, #52]	; 0x34
 8005654:	f7ff ff1b 	bl	800548e <__exponent>
 8005658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800565a:	4682      	mov	sl, r0
 800565c:	1813      	adds	r3, r2, r0
 800565e:	2a01      	cmp	r2, #1
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	dc02      	bgt.n	800566a <_printf_float+0x15e>
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	07d2      	lsls	r2, r2, #31
 8005668:	d501      	bpl.n	800566e <_printf_float+0x162>
 800566a:	3301      	adds	r3, #1
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005672:	2b00      	cmp	r3, #0
 8005674:	d09b      	beq.n	80055ae <_printf_float+0xa2>
 8005676:	232d      	movs	r3, #45	; 0x2d
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567c:	e797      	b.n	80055ae <_printf_float+0xa2>
 800567e:	2947      	cmp	r1, #71	; 0x47
 8005680:	d1bc      	bne.n	80055fc <_printf_float+0xf0>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ba      	bne.n	80055fc <_printf_float+0xf0>
 8005686:	2301      	movs	r3, #1
 8005688:	e7b7      	b.n	80055fa <_printf_float+0xee>
 800568a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800568e:	d118      	bne.n	80056c2 <_printf_float+0x1b6>
 8005690:	2900      	cmp	r1, #0
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	dd0b      	ble.n	80056ae <_printf_float+0x1a2>
 8005696:	6121      	str	r1, [r4, #16]
 8005698:	b913      	cbnz	r3, 80056a0 <_printf_float+0x194>
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	07d0      	lsls	r0, r2, #31
 800569e:	d502      	bpl.n	80056a6 <_printf_float+0x19a>
 80056a0:	3301      	adds	r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	6123      	str	r3, [r4, #16]
 80056a6:	f04f 0a00 	mov.w	sl, #0
 80056aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80056ac:	e7df      	b.n	800566e <_printf_float+0x162>
 80056ae:	b913      	cbnz	r3, 80056b6 <_printf_float+0x1aa>
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	07d2      	lsls	r2, r2, #31
 80056b4:	d501      	bpl.n	80056ba <_printf_float+0x1ae>
 80056b6:	3302      	adds	r3, #2
 80056b8:	e7f4      	b.n	80056a4 <_printf_float+0x198>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e7f2      	b.n	80056a4 <_printf_float+0x198>
 80056be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80056c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c4:	4299      	cmp	r1, r3
 80056c6:	db05      	blt.n	80056d4 <_printf_float+0x1c8>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	6121      	str	r1, [r4, #16]
 80056cc:	07d8      	lsls	r0, r3, #31
 80056ce:	d5ea      	bpl.n	80056a6 <_printf_float+0x19a>
 80056d0:	1c4b      	adds	r3, r1, #1
 80056d2:	e7e7      	b.n	80056a4 <_printf_float+0x198>
 80056d4:	2900      	cmp	r1, #0
 80056d6:	bfcc      	ite	gt
 80056d8:	2201      	movgt	r2, #1
 80056da:	f1c1 0202 	rsble	r2, r1, #2
 80056de:	4413      	add	r3, r2
 80056e0:	e7e0      	b.n	80056a4 <_printf_float+0x198>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	055a      	lsls	r2, r3, #21
 80056e6:	d407      	bmi.n	80056f8 <_printf_float+0x1ec>
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	4642      	mov	r2, r8
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	d12b      	bne.n	800574e <_printf_float+0x242>
 80056f6:	e764      	b.n	80055c2 <_printf_float+0xb6>
 80056f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056fc:	f240 80dd 	bls.w	80058ba <_printf_float+0x3ae>
 8005700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005704:	2200      	movs	r2, #0
 8005706:	2300      	movs	r3, #0
 8005708:	f7fb f94e 	bl	80009a8 <__aeabi_dcmpeq>
 800570c:	2800      	cmp	r0, #0
 800570e:	d033      	beq.n	8005778 <_printf_float+0x26c>
 8005710:	2301      	movs	r3, #1
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	4a35      	ldr	r2, [pc, #212]	; (80057ec <_printf_float+0x2e0>)
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	f43f af51 	beq.w	80055c2 <_printf_float+0xb6>
 8005720:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005724:	429a      	cmp	r2, r3
 8005726:	db02      	blt.n	800572e <_printf_float+0x222>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	07d8      	lsls	r0, r3, #31
 800572c:	d50f      	bpl.n	800574e <_printf_float+0x242>
 800572e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	f43f af42 	beq.w	80055c2 <_printf_float+0xb6>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	f104 091a 	add.w	r9, r4, #26
 8005746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005748:	3b01      	subs	r3, #1
 800574a:	4543      	cmp	r3, r8
 800574c:	dc09      	bgt.n	8005762 <_printf_float+0x256>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	079b      	lsls	r3, r3, #30
 8005752:	f100 8102 	bmi.w	800595a <_printf_float+0x44e>
 8005756:	68e0      	ldr	r0, [r4, #12]
 8005758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800575a:	4298      	cmp	r0, r3
 800575c:	bfb8      	it	lt
 800575e:	4618      	movlt	r0, r3
 8005760:	e731      	b.n	80055c6 <_printf_float+0xba>
 8005762:	2301      	movs	r3, #1
 8005764:	464a      	mov	r2, r9
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f af28 	beq.w	80055c2 <_printf_float+0xb6>
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	e7e6      	b.n	8005746 <_printf_float+0x23a>
 8005778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800577a:	2b00      	cmp	r3, #0
 800577c:	dc38      	bgt.n	80057f0 <_printf_float+0x2e4>
 800577e:	2301      	movs	r3, #1
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <_printf_float+0x2e0>)
 8005786:	47b8      	blx	r7
 8005788:	3001      	adds	r0, #1
 800578a:	f43f af1a 	beq.w	80055c2 <_printf_float+0xb6>
 800578e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005792:	4313      	orrs	r3, r2
 8005794:	d102      	bne.n	800579c <_printf_float+0x290>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	07d9      	lsls	r1, r3, #31
 800579a:	d5d8      	bpl.n	800574e <_printf_float+0x242>
 800579c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f43f af0b 	beq.w	80055c2 <_printf_float+0xb6>
 80057ac:	f04f 0900 	mov.w	r9, #0
 80057b0:	f104 0a1a 	add.w	sl, r4, #26
 80057b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057b6:	425b      	negs	r3, r3
 80057b8:	454b      	cmp	r3, r9
 80057ba:	dc01      	bgt.n	80057c0 <_printf_float+0x2b4>
 80057bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057be:	e794      	b.n	80056ea <_printf_float+0x1de>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4652      	mov	r2, sl
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f aef9 	beq.w	80055c2 <_printf_float+0xb6>
 80057d0:	f109 0901 	add.w	r9, r9, #1
 80057d4:	e7ee      	b.n	80057b4 <_printf_float+0x2a8>
 80057d6:	bf00      	nop
 80057d8:	7fefffff 	.word	0x7fefffff
 80057dc:	0800a280 	.word	0x0800a280
 80057e0:	0800a284 	.word	0x0800a284
 80057e4:	0800a28c 	.word	0x0800a28c
 80057e8:	0800a288 	.word	0x0800a288
 80057ec:	0800a290 	.word	0x0800a290
 80057f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057f4:	429a      	cmp	r2, r3
 80057f6:	bfa8      	it	ge
 80057f8:	461a      	movge	r2, r3
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	4691      	mov	r9, r2
 80057fe:	dc37      	bgt.n	8005870 <_printf_float+0x364>
 8005800:	f04f 0b00 	mov.w	fp, #0
 8005804:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005808:	f104 021a 	add.w	r2, r4, #26
 800580c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005810:	ebaa 0309 	sub.w	r3, sl, r9
 8005814:	455b      	cmp	r3, fp
 8005816:	dc33      	bgt.n	8005880 <_printf_float+0x374>
 8005818:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800581c:	429a      	cmp	r2, r3
 800581e:	db3b      	blt.n	8005898 <_printf_float+0x38c>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	07da      	lsls	r2, r3, #31
 8005824:	d438      	bmi.n	8005898 <_printf_float+0x38c>
 8005826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005828:	990d      	ldr	r1, [sp, #52]	; 0x34
 800582a:	eba3 020a 	sub.w	r2, r3, sl
 800582e:	eba3 0901 	sub.w	r9, r3, r1
 8005832:	4591      	cmp	r9, r2
 8005834:	bfa8      	it	ge
 8005836:	4691      	movge	r9, r2
 8005838:	f1b9 0f00 	cmp.w	r9, #0
 800583c:	dc34      	bgt.n	80058a8 <_printf_float+0x39c>
 800583e:	f04f 0800 	mov.w	r8, #0
 8005842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005846:	f104 0a1a 	add.w	sl, r4, #26
 800584a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	eba3 0309 	sub.w	r3, r3, r9
 8005854:	4543      	cmp	r3, r8
 8005856:	f77f af7a 	ble.w	800574e <_printf_float+0x242>
 800585a:	2301      	movs	r3, #1
 800585c:	4652      	mov	r2, sl
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	f43f aeac 	beq.w	80055c2 <_printf_float+0xb6>
 800586a:	f108 0801 	add.w	r8, r8, #1
 800586e:	e7ec      	b.n	800584a <_printf_float+0x33e>
 8005870:	4613      	mov	r3, r2
 8005872:	4631      	mov	r1, r6
 8005874:	4642      	mov	r2, r8
 8005876:	4628      	mov	r0, r5
 8005878:	47b8      	blx	r7
 800587a:	3001      	adds	r0, #1
 800587c:	d1c0      	bne.n	8005800 <_printf_float+0x2f4>
 800587e:	e6a0      	b.n	80055c2 <_printf_float+0xb6>
 8005880:	2301      	movs	r3, #1
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	920b      	str	r2, [sp, #44]	; 0x2c
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	f43f ae99 	beq.w	80055c2 <_printf_float+0xb6>
 8005890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005892:	f10b 0b01 	add.w	fp, fp, #1
 8005896:	e7b9      	b.n	800580c <_printf_float+0x300>
 8005898:	4631      	mov	r1, r6
 800589a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	d1bf      	bne.n	8005826 <_printf_float+0x31a>
 80058a6:	e68c      	b.n	80055c2 <_printf_float+0xb6>
 80058a8:	464b      	mov	r3, r9
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	eb08 020a 	add.w	r2, r8, sl
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	d1c2      	bne.n	800583e <_printf_float+0x332>
 80058b8:	e683      	b.n	80055c2 <_printf_float+0xb6>
 80058ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058bc:	2a01      	cmp	r2, #1
 80058be:	dc01      	bgt.n	80058c4 <_printf_float+0x3b8>
 80058c0:	07db      	lsls	r3, r3, #31
 80058c2:	d537      	bpl.n	8005934 <_printf_float+0x428>
 80058c4:	2301      	movs	r3, #1
 80058c6:	4642      	mov	r2, r8
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f ae77 	beq.w	80055c2 <_printf_float+0xb6>
 80058d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f ae6f 	beq.w	80055c2 <_printf_float+0xb6>
 80058e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058e8:	2200      	movs	r2, #0
 80058ea:	2300      	movs	r3, #0
 80058ec:	f7fb f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80058f0:	b9d8      	cbnz	r0, 800592a <_printf_float+0x41e>
 80058f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f4:	f108 0201 	add.w	r2, r8, #1
 80058f8:	3b01      	subs	r3, #1
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	d10e      	bne.n	8005922 <_printf_float+0x416>
 8005904:	e65d      	b.n	80055c2 <_printf_float+0xb6>
 8005906:	2301      	movs	r3, #1
 8005908:	464a      	mov	r2, r9
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f ae56 	beq.w	80055c2 <_printf_float+0xb6>
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800591c:	3b01      	subs	r3, #1
 800591e:	4543      	cmp	r3, r8
 8005920:	dcf1      	bgt.n	8005906 <_printf_float+0x3fa>
 8005922:	4653      	mov	r3, sl
 8005924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005928:	e6e0      	b.n	80056ec <_printf_float+0x1e0>
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	f104 091a 	add.w	r9, r4, #26
 8005932:	e7f2      	b.n	800591a <_printf_float+0x40e>
 8005934:	2301      	movs	r3, #1
 8005936:	4642      	mov	r2, r8
 8005938:	e7df      	b.n	80058fa <_printf_float+0x3ee>
 800593a:	2301      	movs	r3, #1
 800593c:	464a      	mov	r2, r9
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	f43f ae3c 	beq.w	80055c2 <_printf_float+0xb6>
 800594a:	f108 0801 	add.w	r8, r8, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	4543      	cmp	r3, r8
 8005956:	dcf0      	bgt.n	800593a <_printf_float+0x42e>
 8005958:	e6fd      	b.n	8005756 <_printf_float+0x24a>
 800595a:	f04f 0800 	mov.w	r8, #0
 800595e:	f104 0919 	add.w	r9, r4, #25
 8005962:	e7f4      	b.n	800594e <_printf_float+0x442>

08005964 <_printf_common>:
 8005964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	4616      	mov	r6, r2
 800596a:	4699      	mov	r9, r3
 800596c:	688a      	ldr	r2, [r1, #8]
 800596e:	690b      	ldr	r3, [r1, #16]
 8005970:	4607      	mov	r7, r0
 8005972:	4293      	cmp	r3, r2
 8005974:	bfb8      	it	lt
 8005976:	4613      	movlt	r3, r2
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800597e:	460c      	mov	r4, r1
 8005980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005984:	b10a      	cbz	r2, 800598a <_printf_common+0x26>
 8005986:	3301      	adds	r3, #1
 8005988:	6033      	str	r3, [r6, #0]
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	0699      	lsls	r1, r3, #26
 800598e:	bf42      	ittt	mi
 8005990:	6833      	ldrmi	r3, [r6, #0]
 8005992:	3302      	addmi	r3, #2
 8005994:	6033      	strmi	r3, [r6, #0]
 8005996:	6825      	ldr	r5, [r4, #0]
 8005998:	f015 0506 	ands.w	r5, r5, #6
 800599c:	d106      	bne.n	80059ac <_printf_common+0x48>
 800599e:	f104 0a19 	add.w	sl, r4, #25
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	6832      	ldr	r2, [r6, #0]
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dc28      	bgt.n	80059fe <_printf_common+0x9a>
 80059ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059b0:	1e13      	subs	r3, r2, #0
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	bf18      	it	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	0692      	lsls	r2, r2, #26
 80059ba:	d42d      	bmi.n	8005a18 <_printf_common+0xb4>
 80059bc:	4649      	mov	r1, r9
 80059be:	4638      	mov	r0, r7
 80059c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c4:	47c0      	blx	r8
 80059c6:	3001      	adds	r0, #1
 80059c8:	d020      	beq.n	8005a0c <_printf_common+0xa8>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	68e5      	ldr	r5, [r4, #12]
 80059ce:	f003 0306 	and.w	r3, r3, #6
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	bf18      	it	ne
 80059d6:	2500      	movne	r5, #0
 80059d8:	6832      	ldr	r2, [r6, #0]
 80059da:	f04f 0600 	mov.w	r6, #0
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	bf08      	it	eq
 80059e2:	1aad      	subeq	r5, r5, r2
 80059e4:	6922      	ldr	r2, [r4, #16]
 80059e6:	bf08      	it	eq
 80059e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ec:	4293      	cmp	r3, r2
 80059ee:	bfc4      	itt	gt
 80059f0:	1a9b      	subgt	r3, r3, r2
 80059f2:	18ed      	addgt	r5, r5, r3
 80059f4:	341a      	adds	r4, #26
 80059f6:	42b5      	cmp	r5, r6
 80059f8:	d11a      	bne.n	8005a30 <_printf_common+0xcc>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e008      	b.n	8005a10 <_printf_common+0xac>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4649      	mov	r1, r9
 8005a04:	4638      	mov	r0, r7
 8005a06:	47c0      	blx	r8
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_printf_common+0xb0>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	3501      	adds	r5, #1
 8005a16:	e7c4      	b.n	80059a2 <_printf_common+0x3e>
 8005a18:	2030      	movs	r0, #48	; 0x30
 8005a1a:	18e1      	adds	r1, r4, r3
 8005a1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a26:	4422      	add	r2, r4
 8005a28:	3302      	adds	r3, #2
 8005a2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a2e:	e7c5      	b.n	80059bc <_printf_common+0x58>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4622      	mov	r2, r4
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0e6      	beq.n	8005a0c <_printf_common+0xa8>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7d9      	b.n	80059f6 <_printf_common+0x92>
	...

08005a44 <_printf_i>:
 8005a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	7e0f      	ldrb	r7, [r1, #24]
 8005a4a:	4691      	mov	r9, r2
 8005a4c:	2f78      	cmp	r7, #120	; 0x78
 8005a4e:	4680      	mov	r8, r0
 8005a50:	460c      	mov	r4, r1
 8005a52:	469a      	mov	sl, r3
 8005a54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a5a:	d807      	bhi.n	8005a6c <_printf_i+0x28>
 8005a5c:	2f62      	cmp	r7, #98	; 0x62
 8005a5e:	d80a      	bhi.n	8005a76 <_printf_i+0x32>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	f000 80d9 	beq.w	8005c18 <_printf_i+0x1d4>
 8005a66:	2f58      	cmp	r7, #88	; 0x58
 8005a68:	f000 80a4 	beq.w	8005bb4 <_printf_i+0x170>
 8005a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a74:	e03a      	b.n	8005aec <_printf_i+0xa8>
 8005a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a7a:	2b15      	cmp	r3, #21
 8005a7c:	d8f6      	bhi.n	8005a6c <_printf_i+0x28>
 8005a7e:	a101      	add	r1, pc, #4	; (adr r1, 8005a84 <_printf_i+0x40>)
 8005a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005a6d 	.word	0x08005a6d
 8005a90:	08005a6d 	.word	0x08005a6d
 8005a94:	08005a6d 	.word	0x08005a6d
 8005a98:	08005a6d 	.word	0x08005a6d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a6d 	.word	0x08005a6d
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005a6d 	.word	0x08005a6d
 8005aac:	08005a6d 	.word	0x08005a6d
 8005ab0:	08005bff 	.word	0x08005bff
 8005ab4:	08005b21 	.word	0x08005b21
 8005ab8:	08005be1 	.word	0x08005be1
 8005abc:	08005a6d 	.word	0x08005a6d
 8005ac0:	08005a6d 	.word	0x08005a6d
 8005ac4:	08005c21 	.word	0x08005c21
 8005ac8:	08005a6d 	.word	0x08005a6d
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005a6d 	.word	0x08005a6d
 8005ad4:	08005a6d 	.word	0x08005a6d
 8005ad8:	08005be9 	.word	0x08005be9
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0a4      	b.n	8005c3a <_printf_i+0x1f6>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	6829      	ldr	r1, [r5, #0]
 8005af4:	0606      	lsls	r6, r0, #24
 8005af6:	f101 0304 	add.w	r3, r1, #4
 8005afa:	d50a      	bpl.n	8005b12 <_printf_i+0xce>
 8005afc:	680e      	ldr	r6, [r1, #0]
 8005afe:	602b      	str	r3, [r5, #0]
 8005b00:	2e00      	cmp	r6, #0
 8005b02:	da03      	bge.n	8005b0c <_printf_i+0xc8>
 8005b04:	232d      	movs	r3, #45	; 0x2d
 8005b06:	4276      	negs	r6, r6
 8005b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0c:	230a      	movs	r3, #10
 8005b0e:	485e      	ldr	r0, [pc, #376]	; (8005c88 <_printf_i+0x244>)
 8005b10:	e019      	b.n	8005b46 <_printf_i+0x102>
 8005b12:	680e      	ldr	r6, [r1, #0]
 8005b14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	bf18      	it	ne
 8005b1c:	b236      	sxthne	r6, r6
 8005b1e:	e7ef      	b.n	8005b00 <_printf_i+0xbc>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	1d19      	adds	r1, r3, #4
 8005b26:	6029      	str	r1, [r5, #0]
 8005b28:	0601      	lsls	r1, r0, #24
 8005b2a:	d501      	bpl.n	8005b30 <_printf_i+0xec>
 8005b2c:	681e      	ldr	r6, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <_printf_i+0xf2>
 8005b30:	0646      	lsls	r6, r0, #25
 8005b32:	d5fb      	bpl.n	8005b2c <_printf_i+0xe8>
 8005b34:	881e      	ldrh	r6, [r3, #0]
 8005b36:	2f6f      	cmp	r7, #111	; 0x6f
 8005b38:	bf0c      	ite	eq
 8005b3a:	2308      	moveq	r3, #8
 8005b3c:	230a      	movne	r3, #10
 8005b3e:	4852      	ldr	r0, [pc, #328]	; (8005c88 <_printf_i+0x244>)
 8005b40:	2100      	movs	r1, #0
 8005b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b46:	6865      	ldr	r5, [r4, #4]
 8005b48:	2d00      	cmp	r5, #0
 8005b4a:	bfa8      	it	ge
 8005b4c:	6821      	ldrge	r1, [r4, #0]
 8005b4e:	60a5      	str	r5, [r4, #8]
 8005b50:	bfa4      	itt	ge
 8005b52:	f021 0104 	bicge.w	r1, r1, #4
 8005b56:	6021      	strge	r1, [r4, #0]
 8005b58:	b90e      	cbnz	r6, 8005b5e <_printf_i+0x11a>
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	d04d      	beq.n	8005bfa <_printf_i+0x1b6>
 8005b5e:	4615      	mov	r5, r2
 8005b60:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b64:	fb03 6711 	mls	r7, r3, r1, r6
 8005b68:	5dc7      	ldrb	r7, [r0, r7]
 8005b6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b6e:	4637      	mov	r7, r6
 8005b70:	42bb      	cmp	r3, r7
 8005b72:	460e      	mov	r6, r1
 8005b74:	d9f4      	bls.n	8005b60 <_printf_i+0x11c>
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d10b      	bne.n	8005b92 <_printf_i+0x14e>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	07de      	lsls	r6, r3, #31
 8005b7e:	d508      	bpl.n	8005b92 <_printf_i+0x14e>
 8005b80:	6923      	ldr	r3, [r4, #16]
 8005b82:	6861      	ldr	r1, [r4, #4]
 8005b84:	4299      	cmp	r1, r3
 8005b86:	bfde      	ittt	le
 8005b88:	2330      	movle	r3, #48	; 0x30
 8005b8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b92:	1b52      	subs	r2, r2, r5
 8005b94:	6122      	str	r2, [r4, #16]
 8005b96:	464b      	mov	r3, r9
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f8cd a000 	str.w	sl, [sp]
 8005ba0:	aa03      	add	r2, sp, #12
 8005ba2:	f7ff fedf 	bl	8005964 <_printf_common>
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d14c      	bne.n	8005c44 <_printf_i+0x200>
 8005baa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bae:	b004      	add	sp, #16
 8005bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb4:	4834      	ldr	r0, [pc, #208]	; (8005c88 <_printf_i+0x244>)
 8005bb6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bba:	6829      	ldr	r1, [r5, #0]
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc2:	6029      	str	r1, [r5, #0]
 8005bc4:	061d      	lsls	r5, r3, #24
 8005bc6:	d514      	bpl.n	8005bf2 <_printf_i+0x1ae>
 8005bc8:	07df      	lsls	r7, r3, #31
 8005bca:	bf44      	itt	mi
 8005bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd0:	6023      	strmi	r3, [r4, #0]
 8005bd2:	b91e      	cbnz	r6, 8005bdc <_printf_i+0x198>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	f023 0320 	bic.w	r3, r3, #32
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	2310      	movs	r3, #16
 8005bde:	e7af      	b.n	8005b40 <_printf_i+0xfc>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	f043 0320 	orr.w	r3, r3, #32
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	2378      	movs	r3, #120	; 0x78
 8005bea:	4828      	ldr	r0, [pc, #160]	; (8005c8c <_printf_i+0x248>)
 8005bec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bf0:	e7e3      	b.n	8005bba <_printf_i+0x176>
 8005bf2:	0659      	lsls	r1, r3, #25
 8005bf4:	bf48      	it	mi
 8005bf6:	b2b6      	uxthmi	r6, r6
 8005bf8:	e7e6      	b.n	8005bc8 <_printf_i+0x184>
 8005bfa:	4615      	mov	r5, r2
 8005bfc:	e7bb      	b.n	8005b76 <_printf_i+0x132>
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	6826      	ldr	r6, [r4, #0]
 8005c02:	1d18      	adds	r0, r3, #4
 8005c04:	6961      	ldr	r1, [r4, #20]
 8005c06:	6028      	str	r0, [r5, #0]
 8005c08:	0635      	lsls	r5, r6, #24
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	d501      	bpl.n	8005c12 <_printf_i+0x1ce>
 8005c0e:	6019      	str	r1, [r3, #0]
 8005c10:	e002      	b.n	8005c18 <_printf_i+0x1d4>
 8005c12:	0670      	lsls	r0, r6, #25
 8005c14:	d5fb      	bpl.n	8005c0e <_printf_i+0x1ca>
 8005c16:	8019      	strh	r1, [r3, #0]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4615      	mov	r5, r2
 8005c1c:	6123      	str	r3, [r4, #16]
 8005c1e:	e7ba      	b.n	8005b96 <_printf_i+0x152>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	2100      	movs	r1, #0
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	602a      	str	r2, [r5, #0]
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 fed5 	bl	80069dc <memchr>
 8005c32:	b108      	cbz	r0, 8005c38 <_printf_i+0x1f4>
 8005c34:	1b40      	subs	r0, r0, r5
 8005c36:	6060      	str	r0, [r4, #4]
 8005c38:	6863      	ldr	r3, [r4, #4]
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c42:	e7a8      	b.n	8005b96 <_printf_i+0x152>
 8005c44:	462a      	mov	r2, r5
 8005c46:	4649      	mov	r1, r9
 8005c48:	4640      	mov	r0, r8
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	47d0      	blx	sl
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0ab      	beq.n	8005baa <_printf_i+0x166>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	079b      	lsls	r3, r3, #30
 8005c56:	d413      	bmi.n	8005c80 <_printf_i+0x23c>
 8005c58:	68e0      	ldr	r0, [r4, #12]
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	4298      	cmp	r0, r3
 8005c5e:	bfb8      	it	lt
 8005c60:	4618      	movlt	r0, r3
 8005c62:	e7a4      	b.n	8005bae <_printf_i+0x16a>
 8005c64:	2301      	movs	r3, #1
 8005c66:	4632      	mov	r2, r6
 8005c68:	4649      	mov	r1, r9
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	47d0      	blx	sl
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d09b      	beq.n	8005baa <_printf_i+0x166>
 8005c72:	3501      	adds	r5, #1
 8005c74:	68e3      	ldr	r3, [r4, #12]
 8005c76:	9903      	ldr	r1, [sp, #12]
 8005c78:	1a5b      	subs	r3, r3, r1
 8005c7a:	42ab      	cmp	r3, r5
 8005c7c:	dcf2      	bgt.n	8005c64 <_printf_i+0x220>
 8005c7e:	e7eb      	b.n	8005c58 <_printf_i+0x214>
 8005c80:	2500      	movs	r5, #0
 8005c82:	f104 0619 	add.w	r6, r4, #25
 8005c86:	e7f5      	b.n	8005c74 <_printf_i+0x230>
 8005c88:	0800a292 	.word	0x0800a292
 8005c8c:	0800a2a3 	.word	0x0800a2a3

08005c90 <siprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c96:	b500      	push	{lr}
 8005c98:	b09c      	sub	sp, #112	; 0x70
 8005c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c9c:	9002      	str	r0, [sp, #8]
 8005c9e:	9006      	str	r0, [sp, #24]
 8005ca0:	9107      	str	r1, [sp, #28]
 8005ca2:	9104      	str	r1, [sp, #16]
 8005ca4:	4808      	ldr	r0, [pc, #32]	; (8005cc8 <siprintf+0x38>)
 8005ca6:	4909      	ldr	r1, [pc, #36]	; (8005ccc <siprintf+0x3c>)
 8005ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cac:	9105      	str	r1, [sp, #20]
 8005cae:	6800      	ldr	r0, [r0, #0]
 8005cb0:	a902      	add	r1, sp, #8
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	f001 fb7c 	bl	80073b0 <_svfiprintf_r>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	9b02      	ldr	r3, [sp, #8]
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	b01c      	add	sp, #112	; 0x70
 8005cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc4:	b003      	add	sp, #12
 8005cc6:	4770      	bx	lr
 8005cc8:	20000020 	.word	0x20000020
 8005ccc:	ffff0208 	.word	0xffff0208

08005cd0 <quorem>:
 8005cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	6903      	ldr	r3, [r0, #16]
 8005cd6:	690c      	ldr	r4, [r1, #16]
 8005cd8:	4607      	mov	r7, r0
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	f2c0 8082 	blt.w	8005de4 <quorem+0x114>
 8005ce0:	3c01      	subs	r4, #1
 8005ce2:	f100 0514 	add.w	r5, r0, #20
 8005ce6:	f101 0814 	add.w	r8, r1, #20
 8005cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d08:	d331      	bcc.n	8005d6e <quorem+0x9e>
 8005d0a:	f04f 0e00 	mov.w	lr, #0
 8005d0e:	4640      	mov	r0, r8
 8005d10:	46ac      	mov	ip, r5
 8005d12:	46f2      	mov	sl, lr
 8005d14:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d18:	b293      	uxth	r3, r2
 8005d1a:	fb06 e303 	mla	r3, r6, r3, lr
 8005d1e:	0c12      	lsrs	r2, r2, #16
 8005d20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	fb06 e202 	mla	r2, r6, r2, lr
 8005d2a:	ebaa 0303 	sub.w	r3, sl, r3
 8005d2e:	f8dc a000 	ldr.w	sl, [ip]
 8005d32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d36:	fa1f fa8a 	uxth.w	sl, sl
 8005d3a:	4453      	add	r3, sl
 8005d3c:	f8dc a000 	ldr.w	sl, [ip]
 8005d40:	b292      	uxth	r2, r2
 8005d42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d50:	4581      	cmp	r9, r0
 8005d52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d56:	f84c 3b04 	str.w	r3, [ip], #4
 8005d5a:	d2db      	bcs.n	8005d14 <quorem+0x44>
 8005d5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d60:	b92b      	cbnz	r3, 8005d6e <quorem+0x9e>
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	429d      	cmp	r5, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	d32f      	bcc.n	8005dcc <quorem+0xfc>
 8005d6c:	613c      	str	r4, [r7, #16]
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f001 f8ce 	bl	8006f10 <__mcmp>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	db25      	blt.n	8005dc4 <quorem+0xf4>
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f04f 0c00 	mov.w	ip, #0
 8005d7e:	3601      	adds	r6, #1
 8005d80:	f858 1b04 	ldr.w	r1, [r8], #4
 8005d84:	f8d0 e000 	ldr.w	lr, [r0]
 8005d88:	b28b      	uxth	r3, r1
 8005d8a:	ebac 0303 	sub.w	r3, ip, r3
 8005d8e:	fa1f f28e 	uxth.w	r2, lr
 8005d92:	4413      	add	r3, r2
 8005d94:	0c0a      	lsrs	r2, r1, #16
 8005d96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005da4:	45c1      	cmp	r9, r8
 8005da6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005daa:	f840 3b04 	str.w	r3, [r0], #4
 8005dae:	d2e7      	bcs.n	8005d80 <quorem+0xb0>
 8005db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005db8:	b922      	cbnz	r2, 8005dc4 <quorem+0xf4>
 8005dba:	3b04      	subs	r3, #4
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	d30a      	bcc.n	8005dd8 <quorem+0x108>
 8005dc2:	613c      	str	r4, [r7, #16]
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	b003      	add	sp, #12
 8005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	d1cb      	bne.n	8005d6c <quorem+0x9c>
 8005dd4:	3c01      	subs	r4, #1
 8005dd6:	e7c6      	b.n	8005d66 <quorem+0x96>
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d1f0      	bne.n	8005dc2 <quorem+0xf2>
 8005de0:	3c01      	subs	r4, #1
 8005de2:	e7eb      	b.n	8005dbc <quorem+0xec>
 8005de4:	2000      	movs	r0, #0
 8005de6:	e7ee      	b.n	8005dc6 <quorem+0xf6>

08005de8 <_dtoa_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	4616      	mov	r6, r2
 8005dee:	461f      	mov	r7, r3
 8005df0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005df2:	b099      	sub	sp, #100	; 0x64
 8005df4:	4605      	mov	r5, r0
 8005df6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005dfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005dfe:	b974      	cbnz	r4, 8005e1e <_dtoa_r+0x36>
 8005e00:	2010      	movs	r0, #16
 8005e02:	f000 fde3 	bl	80069cc <malloc>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6268      	str	r0, [r5, #36]	; 0x24
 8005e0a:	b920      	cbnz	r0, 8005e16 <_dtoa_r+0x2e>
 8005e0c:	21ea      	movs	r1, #234	; 0xea
 8005e0e:	4ba8      	ldr	r3, [pc, #672]	; (80060b0 <_dtoa_r+0x2c8>)
 8005e10:	48a8      	ldr	r0, [pc, #672]	; (80060b4 <_dtoa_r+0x2cc>)
 8005e12:	f001 fbdd 	bl	80075d0 <__assert_func>
 8005e16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e1a:	6004      	str	r4, [r0, #0]
 8005e1c:	60c4      	str	r4, [r0, #12]
 8005e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e20:	6819      	ldr	r1, [r3, #0]
 8005e22:	b151      	cbz	r1, 8005e3a <_dtoa_r+0x52>
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	2301      	movs	r3, #1
 8005e28:	4093      	lsls	r3, r2
 8005e2a:	604a      	str	r2, [r1, #4]
 8005e2c:	608b      	str	r3, [r1, #8]
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 fe30 	bl	8006a94 <_Bfree>
 8005e34:	2200      	movs	r2, #0
 8005e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	1e3b      	subs	r3, r7, #0
 8005e3c:	bfaf      	iteee	ge
 8005e3e:	2300      	movge	r3, #0
 8005e40:	2201      	movlt	r2, #1
 8005e42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e46:	9305      	strlt	r3, [sp, #20]
 8005e48:	bfa8      	it	ge
 8005e4a:	f8c8 3000 	strge.w	r3, [r8]
 8005e4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005e52:	4b99      	ldr	r3, [pc, #612]	; (80060b8 <_dtoa_r+0x2d0>)
 8005e54:	bfb8      	it	lt
 8005e56:	f8c8 2000 	strlt.w	r2, [r8]
 8005e5a:	ea33 0309 	bics.w	r3, r3, r9
 8005e5e:	d119      	bne.n	8005e94 <_dtoa_r+0xac>
 8005e60:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e6c:	4333      	orrs	r3, r6
 8005e6e:	f000 857f 	beq.w	8006970 <_dtoa_r+0xb88>
 8005e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e74:	b953      	cbnz	r3, 8005e8c <_dtoa_r+0xa4>
 8005e76:	4b91      	ldr	r3, [pc, #580]	; (80060bc <_dtoa_r+0x2d4>)
 8005e78:	e022      	b.n	8005ec0 <_dtoa_r+0xd8>
 8005e7a:	4b91      	ldr	r3, [pc, #580]	; (80060c0 <_dtoa_r+0x2d8>)
 8005e7c:	9303      	str	r3, [sp, #12]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	9803      	ldr	r0, [sp, #12]
 8005e86:	b019      	add	sp, #100	; 0x64
 8005e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8c:	4b8b      	ldr	r3, [pc, #556]	; (80060bc <_dtoa_r+0x2d4>)
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	3303      	adds	r3, #3
 8005e92:	e7f5      	b.n	8005e80 <_dtoa_r+0x98>
 8005e94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f7fa fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	b158      	cbz	r0, 8005ec4 <_dtoa_r+0xdc>
 8005eac:	2301      	movs	r3, #1
 8005eae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8558 	beq.w	800696a <_dtoa_r+0xb82>
 8005eba:	4882      	ldr	r0, [pc, #520]	; (80060c4 <_dtoa_r+0x2dc>)
 8005ebc:	6018      	str	r0, [r3, #0]
 8005ebe:	1e43      	subs	r3, r0, #1
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	e7df      	b.n	8005e84 <_dtoa_r+0x9c>
 8005ec4:	ab16      	add	r3, sp, #88	; 0x58
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	ab17      	add	r3, sp, #92	; 0x5c
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4628      	mov	r0, r5
 8005ece:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ed2:	f001 f8c5 	bl	8007060 <__d2b>
 8005ed6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005eda:	4683      	mov	fp, r0
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d07f      	beq.n	8005fe0 <_dtoa_r+0x1f8>
 8005ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005ef2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ef6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005efa:	2200      	movs	r2, #0
 8005efc:	4b72      	ldr	r3, [pc, #456]	; (80060c8 <_dtoa_r+0x2e0>)
 8005efe:	f7fa f933 	bl	8000168 <__aeabi_dsub>
 8005f02:	a365      	add	r3, pc, #404	; (adr r3, 8006098 <_dtoa_r+0x2b0>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa fae6 	bl	80004d8 <__aeabi_dmul>
 8005f0c:	a364      	add	r3, pc, #400	; (adr r3, 80060a0 <_dtoa_r+0x2b8>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f92b 	bl	800016c <__adddf3>
 8005f16:	4606      	mov	r6, r0
 8005f18:	4620      	mov	r0, r4
 8005f1a:	460f      	mov	r7, r1
 8005f1c:	f7fa fa72 	bl	8000404 <__aeabi_i2d>
 8005f20:	a361      	add	r3, pc, #388	; (adr r3, 80060a8 <_dtoa_r+0x2c0>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa fad7 	bl	80004d8 <__aeabi_dmul>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa f91b 	bl	800016c <__adddf3>
 8005f36:	4606      	mov	r6, r0
 8005f38:	460f      	mov	r7, r1
 8005f3a:	f7fa fd7d 	bl	8000a38 <__aeabi_d2iz>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4682      	mov	sl, r0
 8005f42:	2300      	movs	r3, #0
 8005f44:	4630      	mov	r0, r6
 8005f46:	4639      	mov	r1, r7
 8005f48:	f7fa fd38 	bl	80009bc <__aeabi_dcmplt>
 8005f4c:	b148      	cbz	r0, 8005f62 <_dtoa_r+0x17a>
 8005f4e:	4650      	mov	r0, sl
 8005f50:	f7fa fa58 	bl	8000404 <__aeabi_i2d>
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	f7fa fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8005f5c:	b908      	cbnz	r0, 8005f62 <_dtoa_r+0x17a>
 8005f5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f62:	f1ba 0f16 	cmp.w	sl, #22
 8005f66:	d858      	bhi.n	800601a <_dtoa_r+0x232>
 8005f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f6c:	4b57      	ldr	r3, [pc, #348]	; (80060cc <_dtoa_r+0x2e4>)
 8005f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa fd21 	bl	80009bc <__aeabi_dcmplt>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d04f      	beq.n	800601e <_dtoa_r+0x236>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f88:	1b1c      	subs	r4, r3, r4
 8005f8a:	1e63      	subs	r3, r4, #1
 8005f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8e:	bf49      	itett	mi
 8005f90:	f1c4 0301 	rsbmi	r3, r4, #1
 8005f94:	2300      	movpl	r3, #0
 8005f96:	9306      	strmi	r3, [sp, #24]
 8005f98:	2300      	movmi	r3, #0
 8005f9a:	bf54      	ite	pl
 8005f9c:	9306      	strpl	r3, [sp, #24]
 8005f9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005fa0:	f1ba 0f00 	cmp.w	sl, #0
 8005fa4:	db3d      	blt.n	8006022 <_dtoa_r+0x23a>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005fac:	4453      	add	r3, sl
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	f200 808c 	bhi.w	80060d4 <_dtoa_r+0x2ec>
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	bfc4      	itt	gt
 8005fc0:	3b04      	subgt	r3, #4
 8005fc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fc6:	bfc8      	it	gt
 8005fc8:	2400      	movgt	r4, #0
 8005fca:	f1a3 0302 	sub.w	r3, r3, #2
 8005fce:	bfd8      	it	le
 8005fd0:	2401      	movle	r4, #1
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	f200 808a 	bhi.w	80060ec <_dtoa_r+0x304>
 8005fd8:	e8df f003 	tbb	[pc, r3]
 8005fdc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005fe0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005fe4:	441c      	add	r4, r3
 8005fe6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	bfc3      	ittte	gt
 8005fee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ff2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005ff6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005ffa:	f1c3 0320 	rsble	r3, r3, #32
 8005ffe:	bfc6      	itte	gt
 8006000:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006004:	4318      	orrgt	r0, r3
 8006006:	fa06 f003 	lslle.w	r0, r6, r3
 800600a:	f7fa f9eb 	bl	80003e4 <__aeabi_ui2d>
 800600e:	2301      	movs	r3, #1
 8006010:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006014:	3c01      	subs	r4, #1
 8006016:	9313      	str	r3, [sp, #76]	; 0x4c
 8006018:	e76f      	b.n	8005efa <_dtoa_r+0x112>
 800601a:	2301      	movs	r3, #1
 800601c:	e7b2      	b.n	8005f84 <_dtoa_r+0x19c>
 800601e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006020:	e7b1      	b.n	8005f86 <_dtoa_r+0x19e>
 8006022:	9b06      	ldr	r3, [sp, #24]
 8006024:	eba3 030a 	sub.w	r3, r3, sl
 8006028:	9306      	str	r3, [sp, #24]
 800602a:	f1ca 0300 	rsb	r3, sl, #0
 800602e:	930a      	str	r3, [sp, #40]	; 0x28
 8006030:	2300      	movs	r3, #0
 8006032:	930e      	str	r3, [sp, #56]	; 0x38
 8006034:	e7be      	b.n	8005fb4 <_dtoa_r+0x1cc>
 8006036:	2300      	movs	r3, #0
 8006038:	930b      	str	r3, [sp, #44]	; 0x2c
 800603a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800603c:	2b00      	cmp	r3, #0
 800603e:	dc58      	bgt.n	80060f2 <_dtoa_r+0x30a>
 8006040:	f04f 0901 	mov.w	r9, #1
 8006044:	464b      	mov	r3, r9
 8006046:	f8cd 9020 	str.w	r9, [sp, #32]
 800604a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800604e:	2200      	movs	r2, #0
 8006050:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006052:	6042      	str	r2, [r0, #4]
 8006054:	2204      	movs	r2, #4
 8006056:	f102 0614 	add.w	r6, r2, #20
 800605a:	429e      	cmp	r6, r3
 800605c:	6841      	ldr	r1, [r0, #4]
 800605e:	d94e      	bls.n	80060fe <_dtoa_r+0x316>
 8006060:	4628      	mov	r0, r5
 8006062:	f000 fcd7 	bl	8006a14 <_Balloc>
 8006066:	9003      	str	r0, [sp, #12]
 8006068:	2800      	cmp	r0, #0
 800606a:	d14c      	bne.n	8006106 <_dtoa_r+0x31e>
 800606c:	4602      	mov	r2, r0
 800606e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <_dtoa_r+0x2e8>)
 8006074:	e6cc      	b.n	8005e10 <_dtoa_r+0x28>
 8006076:	2301      	movs	r3, #1
 8006078:	e7de      	b.n	8006038 <_dtoa_r+0x250>
 800607a:	2300      	movs	r3, #0
 800607c:	930b      	str	r3, [sp, #44]	; 0x2c
 800607e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006080:	eb0a 0903 	add.w	r9, sl, r3
 8006084:	f109 0301 	add.w	r3, r9, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	9308      	str	r3, [sp, #32]
 800608c:	bfb8      	it	lt
 800608e:	2301      	movlt	r3, #1
 8006090:	e7dd      	b.n	800604e <_dtoa_r+0x266>
 8006092:	2301      	movs	r3, #1
 8006094:	e7f2      	b.n	800607c <_dtoa_r+0x294>
 8006096:	bf00      	nop
 8006098:	636f4361 	.word	0x636f4361
 800609c:	3fd287a7 	.word	0x3fd287a7
 80060a0:	8b60c8b3 	.word	0x8b60c8b3
 80060a4:	3fc68a28 	.word	0x3fc68a28
 80060a8:	509f79fb 	.word	0x509f79fb
 80060ac:	3fd34413 	.word	0x3fd34413
 80060b0:	0800a2c1 	.word	0x0800a2c1
 80060b4:	0800a2d8 	.word	0x0800a2d8
 80060b8:	7ff00000 	.word	0x7ff00000
 80060bc:	0800a2bd 	.word	0x0800a2bd
 80060c0:	0800a2b4 	.word	0x0800a2b4
 80060c4:	0800a291 	.word	0x0800a291
 80060c8:	3ff80000 	.word	0x3ff80000
 80060cc:	0800a3c8 	.word	0x0800a3c8
 80060d0:	0800a333 	.word	0x0800a333
 80060d4:	2401      	movs	r4, #1
 80060d6:	2300      	movs	r3, #0
 80060d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80060da:	9322      	str	r3, [sp, #136]	; 0x88
 80060dc:	f04f 39ff 	mov.w	r9, #4294967295
 80060e0:	2200      	movs	r2, #0
 80060e2:	2312      	movs	r3, #18
 80060e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80060e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80060ea:	e7b0      	b.n	800604e <_dtoa_r+0x266>
 80060ec:	2301      	movs	r3, #1
 80060ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80060f0:	e7f4      	b.n	80060dc <_dtoa_r+0x2f4>
 80060f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80060f6:	464b      	mov	r3, r9
 80060f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80060fc:	e7a7      	b.n	800604e <_dtoa_r+0x266>
 80060fe:	3101      	adds	r1, #1
 8006100:	6041      	str	r1, [r0, #4]
 8006102:	0052      	lsls	r2, r2, #1
 8006104:	e7a7      	b.n	8006056 <_dtoa_r+0x26e>
 8006106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006108:	9a03      	ldr	r2, [sp, #12]
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	9b08      	ldr	r3, [sp, #32]
 800610e:	2b0e      	cmp	r3, #14
 8006110:	f200 80a8 	bhi.w	8006264 <_dtoa_r+0x47c>
 8006114:	2c00      	cmp	r4, #0
 8006116:	f000 80a5 	beq.w	8006264 <_dtoa_r+0x47c>
 800611a:	f1ba 0f00 	cmp.w	sl, #0
 800611e:	dd34      	ble.n	800618a <_dtoa_r+0x3a2>
 8006120:	4a9a      	ldr	r2, [pc, #616]	; (800638c <_dtoa_r+0x5a4>)
 8006122:	f00a 030f 	and.w	r3, sl, #15
 8006126:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800612a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800612e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006136:	ea4f 142a 	mov.w	r4, sl, asr #4
 800613a:	d016      	beq.n	800616a <_dtoa_r+0x382>
 800613c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006140:	4b93      	ldr	r3, [pc, #588]	; (8006390 <_dtoa_r+0x5a8>)
 8006142:	2703      	movs	r7, #3
 8006144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006148:	f7fa faf0 	bl	800072c <__aeabi_ddiv>
 800614c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006150:	f004 040f 	and.w	r4, r4, #15
 8006154:	4e8e      	ldr	r6, [pc, #568]	; (8006390 <_dtoa_r+0x5a8>)
 8006156:	b954      	cbnz	r4, 800616e <_dtoa_r+0x386>
 8006158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800615c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006160:	f7fa fae4 	bl	800072c <__aeabi_ddiv>
 8006164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006168:	e029      	b.n	80061be <_dtoa_r+0x3d6>
 800616a:	2702      	movs	r7, #2
 800616c:	e7f2      	b.n	8006154 <_dtoa_r+0x36c>
 800616e:	07e1      	lsls	r1, r4, #31
 8006170:	d508      	bpl.n	8006184 <_dtoa_r+0x39c>
 8006172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006176:	e9d6 2300 	ldrd	r2, r3, [r6]
 800617a:	f7fa f9ad 	bl	80004d8 <__aeabi_dmul>
 800617e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006182:	3701      	adds	r7, #1
 8006184:	1064      	asrs	r4, r4, #1
 8006186:	3608      	adds	r6, #8
 8006188:	e7e5      	b.n	8006156 <_dtoa_r+0x36e>
 800618a:	f000 80a5 	beq.w	80062d8 <_dtoa_r+0x4f0>
 800618e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006192:	f1ca 0400 	rsb	r4, sl, #0
 8006196:	4b7d      	ldr	r3, [pc, #500]	; (800638c <_dtoa_r+0x5a4>)
 8006198:	f004 020f 	and.w	r2, r4, #15
 800619c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	2702      	movs	r7, #2
 80061aa:	2300      	movs	r3, #0
 80061ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061b0:	4e77      	ldr	r6, [pc, #476]	; (8006390 <_dtoa_r+0x5a8>)
 80061b2:	1124      	asrs	r4, r4, #4
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	f040 8084 	bne.w	80062c2 <_dtoa_r+0x4da>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1d2      	bne.n	8006164 <_dtoa_r+0x37c>
 80061be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 808b 	beq.w	80062dc <_dtoa_r+0x4f4>
 80061c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80061ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061d2:	2200      	movs	r2, #0
 80061d4:	4b6f      	ldr	r3, [pc, #444]	; (8006394 <_dtoa_r+0x5ac>)
 80061d6:	f7fa fbf1 	bl	80009bc <__aeabi_dcmplt>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d07e      	beq.n	80062dc <_dtoa_r+0x4f4>
 80061de:	9b08      	ldr	r3, [sp, #32]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d07b      	beq.n	80062dc <_dtoa_r+0x4f4>
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	dd38      	ble.n	800625c <_dtoa_r+0x474>
 80061ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ee:	2200      	movs	r2, #0
 80061f0:	4b69      	ldr	r3, [pc, #420]	; (8006398 <_dtoa_r+0x5b0>)
 80061f2:	f7fa f971 	bl	80004d8 <__aeabi_dmul>
 80061f6:	464c      	mov	r4, r9
 80061f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006200:	3701      	adds	r7, #1
 8006202:	4638      	mov	r0, r7
 8006204:	f7fa f8fe 	bl	8000404 <__aeabi_i2d>
 8006208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800620c:	f7fa f964 	bl	80004d8 <__aeabi_dmul>
 8006210:	2200      	movs	r2, #0
 8006212:	4b62      	ldr	r3, [pc, #392]	; (800639c <_dtoa_r+0x5b4>)
 8006214:	f7f9 ffaa 	bl	800016c <__adddf3>
 8006218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800621c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006220:	9611      	str	r6, [sp, #68]	; 0x44
 8006222:	2c00      	cmp	r4, #0
 8006224:	d15d      	bne.n	80062e2 <_dtoa_r+0x4fa>
 8006226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800622a:	2200      	movs	r2, #0
 800622c:	4b5c      	ldr	r3, [pc, #368]	; (80063a0 <_dtoa_r+0x5b8>)
 800622e:	f7f9 ff9b 	bl	8000168 <__aeabi_dsub>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800623a:	4633      	mov	r3, r6
 800623c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800623e:	f7fa fbdb 	bl	80009f8 <__aeabi_dcmpgt>
 8006242:	2800      	cmp	r0, #0
 8006244:	f040 829c 	bne.w	8006780 <_dtoa_r+0x998>
 8006248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800624e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006252:	f7fa fbb3 	bl	80009bc <__aeabi_dcmplt>
 8006256:	2800      	cmp	r0, #0
 8006258:	f040 8290 	bne.w	800677c <_dtoa_r+0x994>
 800625c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006260:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006266:	2b00      	cmp	r3, #0
 8006268:	f2c0 8152 	blt.w	8006510 <_dtoa_r+0x728>
 800626c:	f1ba 0f0e 	cmp.w	sl, #14
 8006270:	f300 814e 	bgt.w	8006510 <_dtoa_r+0x728>
 8006274:	4b45      	ldr	r3, [pc, #276]	; (800638c <_dtoa_r+0x5a4>)
 8006276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800627a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800627e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006284:	2b00      	cmp	r3, #0
 8006286:	f280 80db 	bge.w	8006440 <_dtoa_r+0x658>
 800628a:	9b08      	ldr	r3, [sp, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f300 80d7 	bgt.w	8006440 <_dtoa_r+0x658>
 8006292:	f040 8272 	bne.w	800677a <_dtoa_r+0x992>
 8006296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800629a:	2200      	movs	r2, #0
 800629c:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <_dtoa_r+0x5b8>)
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a6:	f7fa fb9d 	bl	80009e4 <__aeabi_dcmpge>
 80062aa:	9c08      	ldr	r4, [sp, #32]
 80062ac:	4626      	mov	r6, r4
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f040 8248 	bne.w	8006744 <_dtoa_r+0x95c>
 80062b4:	2331      	movs	r3, #49	; 0x31
 80062b6:	9f03      	ldr	r7, [sp, #12]
 80062b8:	f10a 0a01 	add.w	sl, sl, #1
 80062bc:	f807 3b01 	strb.w	r3, [r7], #1
 80062c0:	e244      	b.n	800674c <_dtoa_r+0x964>
 80062c2:	07e2      	lsls	r2, r4, #31
 80062c4:	d505      	bpl.n	80062d2 <_dtoa_r+0x4ea>
 80062c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062ca:	f7fa f905 	bl	80004d8 <__aeabi_dmul>
 80062ce:	2301      	movs	r3, #1
 80062d0:	3701      	adds	r7, #1
 80062d2:	1064      	asrs	r4, r4, #1
 80062d4:	3608      	adds	r6, #8
 80062d6:	e76d      	b.n	80061b4 <_dtoa_r+0x3cc>
 80062d8:	2702      	movs	r7, #2
 80062da:	e770      	b.n	80061be <_dtoa_r+0x3d6>
 80062dc:	46d0      	mov	r8, sl
 80062de:	9c08      	ldr	r4, [sp, #32]
 80062e0:	e78f      	b.n	8006202 <_dtoa_r+0x41a>
 80062e2:	9903      	ldr	r1, [sp, #12]
 80062e4:	4b29      	ldr	r3, [pc, #164]	; (800638c <_dtoa_r+0x5a4>)
 80062e6:	4421      	add	r1, r4
 80062e8:	9112      	str	r1, [sp, #72]	; 0x48
 80062ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062f8:	2900      	cmp	r1, #0
 80062fa:	d055      	beq.n	80063a8 <_dtoa_r+0x5c0>
 80062fc:	2000      	movs	r0, #0
 80062fe:	4929      	ldr	r1, [pc, #164]	; (80063a4 <_dtoa_r+0x5bc>)
 8006300:	f7fa fa14 	bl	800072c <__aeabi_ddiv>
 8006304:	463b      	mov	r3, r7
 8006306:	4632      	mov	r2, r6
 8006308:	f7f9 ff2e 	bl	8000168 <__aeabi_dsub>
 800630c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006310:	9f03      	ldr	r7, [sp, #12]
 8006312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006316:	f7fa fb8f 	bl	8000a38 <__aeabi_d2iz>
 800631a:	4604      	mov	r4, r0
 800631c:	f7fa f872 	bl	8000404 <__aeabi_i2d>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006328:	f7f9 ff1e 	bl	8000168 <__aeabi_dsub>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	3430      	adds	r4, #48	; 0x30
 8006332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800633a:	f807 4b01 	strb.w	r4, [r7], #1
 800633e:	f7fa fb3d 	bl	80009bc <__aeabi_dcmplt>
 8006342:	2800      	cmp	r0, #0
 8006344:	d174      	bne.n	8006430 <_dtoa_r+0x648>
 8006346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800634a:	2000      	movs	r0, #0
 800634c:	4911      	ldr	r1, [pc, #68]	; (8006394 <_dtoa_r+0x5ac>)
 800634e:	f7f9 ff0b 	bl	8000168 <__aeabi_dsub>
 8006352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006356:	f7fa fb31 	bl	80009bc <__aeabi_dcmplt>
 800635a:	2800      	cmp	r0, #0
 800635c:	f040 80b7 	bne.w	80064ce <_dtoa_r+0x6e6>
 8006360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006362:	429f      	cmp	r7, r3
 8006364:	f43f af7a 	beq.w	800625c <_dtoa_r+0x474>
 8006368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800636c:	2200      	movs	r2, #0
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <_dtoa_r+0x5b0>)
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	2200      	movs	r2, #0
 8006376:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800637a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800637e:	4b06      	ldr	r3, [pc, #24]	; (8006398 <_dtoa_r+0x5b0>)
 8006380:	f7fa f8aa 	bl	80004d8 <__aeabi_dmul>
 8006384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006388:	e7c3      	b.n	8006312 <_dtoa_r+0x52a>
 800638a:	bf00      	nop
 800638c:	0800a3c8 	.word	0x0800a3c8
 8006390:	0800a3a0 	.word	0x0800a3a0
 8006394:	3ff00000 	.word	0x3ff00000
 8006398:	40240000 	.word	0x40240000
 800639c:	401c0000 	.word	0x401c0000
 80063a0:	40140000 	.word	0x40140000
 80063a4:	3fe00000 	.word	0x3fe00000
 80063a8:	4630      	mov	r0, r6
 80063aa:	4639      	mov	r1, r7
 80063ac:	f7fa f894 	bl	80004d8 <__aeabi_dmul>
 80063b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063b6:	9c03      	ldr	r4, [sp, #12]
 80063b8:	9314      	str	r3, [sp, #80]	; 0x50
 80063ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063be:	f7fa fb3b 	bl	8000a38 <__aeabi_d2iz>
 80063c2:	9015      	str	r0, [sp, #84]	; 0x54
 80063c4:	f7fa f81e 	bl	8000404 <__aeabi_i2d>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d0:	f7f9 feca 	bl	8000168 <__aeabi_dsub>
 80063d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063d6:	4606      	mov	r6, r0
 80063d8:	3330      	adds	r3, #48	; 0x30
 80063da:	f804 3b01 	strb.w	r3, [r4], #1
 80063de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063e0:	460f      	mov	r7, r1
 80063e2:	429c      	cmp	r4, r3
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	d124      	bne.n	8006434 <_dtoa_r+0x64c>
 80063ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063ee:	4bb0      	ldr	r3, [pc, #704]	; (80066b0 <_dtoa_r+0x8c8>)
 80063f0:	f7f9 febc 	bl	800016c <__adddf3>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7fa fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8006400:	2800      	cmp	r0, #0
 8006402:	d163      	bne.n	80064cc <_dtoa_r+0x6e4>
 8006404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006408:	2000      	movs	r0, #0
 800640a:	49a9      	ldr	r1, [pc, #676]	; (80066b0 <_dtoa_r+0x8c8>)
 800640c:	f7f9 feac 	bl	8000168 <__aeabi_dsub>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7fa fad0 	bl	80009bc <__aeabi_dcmplt>
 800641c:	2800      	cmp	r0, #0
 800641e:	f43f af1d 	beq.w	800625c <_dtoa_r+0x474>
 8006422:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006424:	1e7b      	subs	r3, r7, #1
 8006426:	9314      	str	r3, [sp, #80]	; 0x50
 8006428:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800642c:	2b30      	cmp	r3, #48	; 0x30
 800642e:	d0f8      	beq.n	8006422 <_dtoa_r+0x63a>
 8006430:	46c2      	mov	sl, r8
 8006432:	e03b      	b.n	80064ac <_dtoa_r+0x6c4>
 8006434:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <_dtoa_r+0x8cc>)
 8006436:	f7fa f84f 	bl	80004d8 <__aeabi_dmul>
 800643a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800643e:	e7bc      	b.n	80063ba <_dtoa_r+0x5d2>
 8006440:	9f03      	ldr	r7, [sp, #12]
 8006442:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800644a:	4640      	mov	r0, r8
 800644c:	4649      	mov	r1, r9
 800644e:	f7fa f96d 	bl	800072c <__aeabi_ddiv>
 8006452:	f7fa faf1 	bl	8000a38 <__aeabi_d2iz>
 8006456:	4604      	mov	r4, r0
 8006458:	f7f9 ffd4 	bl	8000404 <__aeabi_i2d>
 800645c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006460:	f7fa f83a 	bl	80004d8 <__aeabi_dmul>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	f7f9 fe7c 	bl	8000168 <__aeabi_dsub>
 8006470:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006474:	f807 6b01 	strb.w	r6, [r7], #1
 8006478:	9e03      	ldr	r6, [sp, #12]
 800647a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800647e:	1bbe      	subs	r6, r7, r6
 8006480:	45b4      	cmp	ip, r6
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	d136      	bne.n	80064f6 <_dtoa_r+0x70e>
 8006488:	f7f9 fe70 	bl	800016c <__adddf3>
 800648c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006490:	4680      	mov	r8, r0
 8006492:	4689      	mov	r9, r1
 8006494:	f7fa fab0 	bl	80009f8 <__aeabi_dcmpgt>
 8006498:	bb58      	cbnz	r0, 80064f2 <_dtoa_r+0x70a>
 800649a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	f7fa fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80064a6:	b108      	cbz	r0, 80064ac <_dtoa_r+0x6c4>
 80064a8:	07e1      	lsls	r1, r4, #31
 80064aa:	d422      	bmi.n	80064f2 <_dtoa_r+0x70a>
 80064ac:	4628      	mov	r0, r5
 80064ae:	4659      	mov	r1, fp
 80064b0:	f000 faf0 	bl	8006a94 <_Bfree>
 80064b4:	2300      	movs	r3, #0
 80064b6:	703b      	strb	r3, [r7, #0]
 80064b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80064ba:	f10a 0001 	add.w	r0, sl, #1
 80064be:	6018      	str	r0, [r3, #0]
 80064c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f43f acde 	beq.w	8005e84 <_dtoa_r+0x9c>
 80064c8:	601f      	str	r7, [r3, #0]
 80064ca:	e4db      	b.n	8005e84 <_dtoa_r+0x9c>
 80064cc:	4627      	mov	r7, r4
 80064ce:	463b      	mov	r3, r7
 80064d0:	461f      	mov	r7, r3
 80064d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064d6:	2a39      	cmp	r2, #57	; 0x39
 80064d8:	d107      	bne.n	80064ea <_dtoa_r+0x702>
 80064da:	9a03      	ldr	r2, [sp, #12]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d1f7      	bne.n	80064d0 <_dtoa_r+0x6e8>
 80064e0:	2230      	movs	r2, #48	; 0x30
 80064e2:	9903      	ldr	r1, [sp, #12]
 80064e4:	f108 0801 	add.w	r8, r8, #1
 80064e8:	700a      	strb	r2, [r1, #0]
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	3201      	adds	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e79e      	b.n	8006430 <_dtoa_r+0x648>
 80064f2:	46d0      	mov	r8, sl
 80064f4:	e7eb      	b.n	80064ce <_dtoa_r+0x6e6>
 80064f6:	2200      	movs	r2, #0
 80064f8:	4b6e      	ldr	r3, [pc, #440]	; (80066b4 <_dtoa_r+0x8cc>)
 80064fa:	f7f9 ffed 	bl	80004d8 <__aeabi_dmul>
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	4680      	mov	r8, r0
 8006504:	4689      	mov	r9, r1
 8006506:	f7fa fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800650a:	2800      	cmp	r0, #0
 800650c:	d09b      	beq.n	8006446 <_dtoa_r+0x65e>
 800650e:	e7cd      	b.n	80064ac <_dtoa_r+0x6c4>
 8006510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006512:	2a00      	cmp	r2, #0
 8006514:	f000 80d0 	beq.w	80066b8 <_dtoa_r+0x8d0>
 8006518:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800651a:	2a01      	cmp	r2, #1
 800651c:	f300 80ae 	bgt.w	800667c <_dtoa_r+0x894>
 8006520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006522:	2a00      	cmp	r2, #0
 8006524:	f000 80a6 	beq.w	8006674 <_dtoa_r+0x88c>
 8006528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800652c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800652e:	9f06      	ldr	r7, [sp, #24]
 8006530:	9a06      	ldr	r2, [sp, #24]
 8006532:	2101      	movs	r1, #1
 8006534:	441a      	add	r2, r3
 8006536:	9206      	str	r2, [sp, #24]
 8006538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800653a:	4628      	mov	r0, r5
 800653c:	441a      	add	r2, r3
 800653e:	9209      	str	r2, [sp, #36]	; 0x24
 8006540:	f000 fb5e 	bl	8006c00 <__i2b>
 8006544:	4606      	mov	r6, r0
 8006546:	2f00      	cmp	r7, #0
 8006548:	dd0c      	ble.n	8006564 <_dtoa_r+0x77c>
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	dd09      	ble.n	8006564 <_dtoa_r+0x77c>
 8006550:	42bb      	cmp	r3, r7
 8006552:	bfa8      	it	ge
 8006554:	463b      	movge	r3, r7
 8006556:	9a06      	ldr	r2, [sp, #24]
 8006558:	1aff      	subs	r7, r7, r3
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	9206      	str	r2, [sp, #24]
 800655e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	9309      	str	r3, [sp, #36]	; 0x24
 8006564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006566:	b1f3      	cbz	r3, 80065a6 <_dtoa_r+0x7be>
 8006568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80a8 	beq.w	80066c0 <_dtoa_r+0x8d8>
 8006570:	2c00      	cmp	r4, #0
 8006572:	dd10      	ble.n	8006596 <_dtoa_r+0x7ae>
 8006574:	4631      	mov	r1, r6
 8006576:	4622      	mov	r2, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 fbff 	bl	8006d7c <__pow5mult>
 800657e:	465a      	mov	r2, fp
 8006580:	4601      	mov	r1, r0
 8006582:	4606      	mov	r6, r0
 8006584:	4628      	mov	r0, r5
 8006586:	f000 fb51 	bl	8006c2c <__multiply>
 800658a:	4680      	mov	r8, r0
 800658c:	4659      	mov	r1, fp
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fa80 	bl	8006a94 <_Bfree>
 8006594:	46c3      	mov	fp, r8
 8006596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006598:	1b1a      	subs	r2, r3, r4
 800659a:	d004      	beq.n	80065a6 <_dtoa_r+0x7be>
 800659c:	4659      	mov	r1, fp
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fbec 	bl	8006d7c <__pow5mult>
 80065a4:	4683      	mov	fp, r0
 80065a6:	2101      	movs	r1, #1
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 fb29 	bl	8006c00 <__i2b>
 80065ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b0:	4604      	mov	r4, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f340 8086 	ble.w	80066c4 <_dtoa_r+0x8dc>
 80065b8:	461a      	mov	r2, r3
 80065ba:	4601      	mov	r1, r0
 80065bc:	4628      	mov	r0, r5
 80065be:	f000 fbdd 	bl	8006d7c <__pow5mult>
 80065c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065c4:	4604      	mov	r4, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	dd7f      	ble.n	80066ca <_dtoa_r+0x8e2>
 80065ca:	f04f 0800 	mov.w	r8, #0
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d4:	6918      	ldr	r0, [r3, #16]
 80065d6:	f000 fac5 	bl	8006b64 <__hi0bits>
 80065da:	f1c0 0020 	rsb	r0, r0, #32
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	4418      	add	r0, r3
 80065e2:	f010 001f 	ands.w	r0, r0, #31
 80065e6:	f000 8092 	beq.w	800670e <_dtoa_r+0x926>
 80065ea:	f1c0 0320 	rsb	r3, r0, #32
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	f340 808a 	ble.w	8006708 <_dtoa_r+0x920>
 80065f4:	f1c0 001c 	rsb	r0, r0, #28
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	4407      	add	r7, r0
 80065fc:	4403      	add	r3, r0
 80065fe:	9306      	str	r3, [sp, #24]
 8006600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006602:	4403      	add	r3, r0
 8006604:	9309      	str	r3, [sp, #36]	; 0x24
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dd05      	ble.n	8006618 <_dtoa_r+0x830>
 800660c:	4659      	mov	r1, fp
 800660e:	461a      	mov	r2, r3
 8006610:	4628      	mov	r0, r5
 8006612:	f000 fc0d 	bl	8006e30 <__lshift>
 8006616:	4683      	mov	fp, r0
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	dd05      	ble.n	800662a <_dtoa_r+0x842>
 800661e:	4621      	mov	r1, r4
 8006620:	461a      	mov	r2, r3
 8006622:	4628      	mov	r0, r5
 8006624:	f000 fc04 	bl	8006e30 <__lshift>
 8006628:	4604      	mov	r4, r0
 800662a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d070      	beq.n	8006712 <_dtoa_r+0x92a>
 8006630:	4621      	mov	r1, r4
 8006632:	4658      	mov	r0, fp
 8006634:	f000 fc6c 	bl	8006f10 <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	da6a      	bge.n	8006712 <_dtoa_r+0x92a>
 800663c:	2300      	movs	r3, #0
 800663e:	4659      	mov	r1, fp
 8006640:	220a      	movs	r2, #10
 8006642:	4628      	mov	r0, r5
 8006644:	f000 fa48 	bl	8006ad8 <__multadd>
 8006648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800664a:	4683      	mov	fp, r0
 800664c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8194 	beq.w	800697e <_dtoa_r+0xb96>
 8006656:	4631      	mov	r1, r6
 8006658:	2300      	movs	r3, #0
 800665a:	220a      	movs	r2, #10
 800665c:	4628      	mov	r0, r5
 800665e:	f000 fa3b 	bl	8006ad8 <__multadd>
 8006662:	f1b9 0f00 	cmp.w	r9, #0
 8006666:	4606      	mov	r6, r0
 8006668:	f300 8093 	bgt.w	8006792 <_dtoa_r+0x9aa>
 800666c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800666e:	2b02      	cmp	r3, #2
 8006670:	dc57      	bgt.n	8006722 <_dtoa_r+0x93a>
 8006672:	e08e      	b.n	8006792 <_dtoa_r+0x9aa>
 8006674:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800667a:	e757      	b.n	800652c <_dtoa_r+0x744>
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	1e5c      	subs	r4, r3, #1
 8006680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006682:	42a3      	cmp	r3, r4
 8006684:	bfb7      	itett	lt
 8006686:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006688:	1b1c      	subge	r4, r3, r4
 800668a:	1ae2      	sublt	r2, r4, r3
 800668c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800668e:	bfbe      	ittt	lt
 8006690:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006692:	189b      	addlt	r3, r3, r2
 8006694:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006696:	9b08      	ldr	r3, [sp, #32]
 8006698:	bfb8      	it	lt
 800669a:	2400      	movlt	r4, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	bfbb      	ittet	lt
 80066a0:	9b06      	ldrlt	r3, [sp, #24]
 80066a2:	9a08      	ldrlt	r2, [sp, #32]
 80066a4:	9f06      	ldrge	r7, [sp, #24]
 80066a6:	1a9f      	sublt	r7, r3, r2
 80066a8:	bfac      	ite	ge
 80066aa:	9b08      	ldrge	r3, [sp, #32]
 80066ac:	2300      	movlt	r3, #0
 80066ae:	e73f      	b.n	8006530 <_dtoa_r+0x748>
 80066b0:	3fe00000 	.word	0x3fe00000
 80066b4:	40240000 	.word	0x40240000
 80066b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066ba:	9f06      	ldr	r7, [sp, #24]
 80066bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066be:	e742      	b.n	8006546 <_dtoa_r+0x75e>
 80066c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c2:	e76b      	b.n	800659c <_dtoa_r+0x7b4>
 80066c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	dc19      	bgt.n	80066fe <_dtoa_r+0x916>
 80066ca:	9b04      	ldr	r3, [sp, #16]
 80066cc:	b9bb      	cbnz	r3, 80066fe <_dtoa_r+0x916>
 80066ce:	9b05      	ldr	r3, [sp, #20]
 80066d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d4:	b99b      	cbnz	r3, 80066fe <_dtoa_r+0x916>
 80066d6:	9b05      	ldr	r3, [sp, #20]
 80066d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	0d1b      	lsrs	r3, r3, #20
 80066de:	051b      	lsls	r3, r3, #20
 80066e0:	b183      	cbz	r3, 8006704 <_dtoa_r+0x91c>
 80066e2:	f04f 0801 	mov.w	r8, #1
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	3301      	adds	r3, #1
 80066ea:	9306      	str	r3, [sp, #24]
 80066ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ee:	3301      	adds	r3, #1
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f47f af6a 	bne.w	80065ce <_dtoa_r+0x7e6>
 80066fa:	2001      	movs	r0, #1
 80066fc:	e76f      	b.n	80065de <_dtoa_r+0x7f6>
 80066fe:	f04f 0800 	mov.w	r8, #0
 8006702:	e7f6      	b.n	80066f2 <_dtoa_r+0x90a>
 8006704:	4698      	mov	r8, r3
 8006706:	e7f4      	b.n	80066f2 <_dtoa_r+0x90a>
 8006708:	f43f af7d 	beq.w	8006606 <_dtoa_r+0x81e>
 800670c:	4618      	mov	r0, r3
 800670e:	301c      	adds	r0, #28
 8006710:	e772      	b.n	80065f8 <_dtoa_r+0x810>
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dc36      	bgt.n	8006786 <_dtoa_r+0x99e>
 8006718:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800671a:	2b02      	cmp	r3, #2
 800671c:	dd33      	ble.n	8006786 <_dtoa_r+0x99e>
 800671e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	d10d      	bne.n	8006744 <_dtoa_r+0x95c>
 8006728:	4621      	mov	r1, r4
 800672a:	464b      	mov	r3, r9
 800672c:	2205      	movs	r2, #5
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f9d2 	bl	8006ad8 <__multadd>
 8006734:	4601      	mov	r1, r0
 8006736:	4604      	mov	r4, r0
 8006738:	4658      	mov	r0, fp
 800673a:	f000 fbe9 	bl	8006f10 <__mcmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	f73f adb8 	bgt.w	80062b4 <_dtoa_r+0x4cc>
 8006744:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006746:	9f03      	ldr	r7, [sp, #12]
 8006748:	ea6f 0a03 	mvn.w	sl, r3
 800674c:	f04f 0800 	mov.w	r8, #0
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f99e 	bl	8006a94 <_Bfree>
 8006758:	2e00      	cmp	r6, #0
 800675a:	f43f aea7 	beq.w	80064ac <_dtoa_r+0x6c4>
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	d005      	beq.n	8006770 <_dtoa_r+0x988>
 8006764:	45b0      	cmp	r8, r6
 8006766:	d003      	beq.n	8006770 <_dtoa_r+0x988>
 8006768:	4641      	mov	r1, r8
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f992 	bl	8006a94 <_Bfree>
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	f000 f98e 	bl	8006a94 <_Bfree>
 8006778:	e698      	b.n	80064ac <_dtoa_r+0x6c4>
 800677a:	2400      	movs	r4, #0
 800677c:	4626      	mov	r6, r4
 800677e:	e7e1      	b.n	8006744 <_dtoa_r+0x95c>
 8006780:	46c2      	mov	sl, r8
 8006782:	4626      	mov	r6, r4
 8006784:	e596      	b.n	80062b4 <_dtoa_r+0x4cc>
 8006786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80fd 	beq.w	800698c <_dtoa_r+0xba4>
 8006792:	2f00      	cmp	r7, #0
 8006794:	dd05      	ble.n	80067a2 <_dtoa_r+0x9ba>
 8006796:	4631      	mov	r1, r6
 8006798:	463a      	mov	r2, r7
 800679a:	4628      	mov	r0, r5
 800679c:	f000 fb48 	bl	8006e30 <__lshift>
 80067a0:	4606      	mov	r6, r0
 80067a2:	f1b8 0f00 	cmp.w	r8, #0
 80067a6:	d05c      	beq.n	8006862 <_dtoa_r+0xa7a>
 80067a8:	4628      	mov	r0, r5
 80067aa:	6871      	ldr	r1, [r6, #4]
 80067ac:	f000 f932 	bl	8006a14 <_Balloc>
 80067b0:	4607      	mov	r7, r0
 80067b2:	b928      	cbnz	r0, 80067c0 <_dtoa_r+0x9d8>
 80067b4:	4602      	mov	r2, r0
 80067b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80067ba:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <_dtoa_r+0xbd0>)
 80067bc:	f7ff bb28 	b.w	8005e10 <_dtoa_r+0x28>
 80067c0:	6932      	ldr	r2, [r6, #16]
 80067c2:	f106 010c 	add.w	r1, r6, #12
 80067c6:	3202      	adds	r2, #2
 80067c8:	0092      	lsls	r2, r2, #2
 80067ca:	300c      	adds	r0, #12
 80067cc:	f000 f914 	bl	80069f8 <memcpy>
 80067d0:	2201      	movs	r2, #1
 80067d2:	4639      	mov	r1, r7
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 fb2b 	bl	8006e30 <__lshift>
 80067da:	46b0      	mov	r8, r6
 80067dc:	4606      	mov	r6, r0
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	9308      	str	r3, [sp, #32]
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	444b      	add	r3, r9
 80067e8:	930a      	str	r3, [sp, #40]	; 0x28
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	9309      	str	r3, [sp, #36]	; 0x24
 80067f2:	9b08      	ldr	r3, [sp, #32]
 80067f4:	4621      	mov	r1, r4
 80067f6:	3b01      	subs	r3, #1
 80067f8:	4658      	mov	r0, fp
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	f7ff fa68 	bl	8005cd0 <quorem>
 8006800:	4603      	mov	r3, r0
 8006802:	4641      	mov	r1, r8
 8006804:	3330      	adds	r3, #48	; 0x30
 8006806:	9006      	str	r0, [sp, #24]
 8006808:	4658      	mov	r0, fp
 800680a:	930b      	str	r3, [sp, #44]	; 0x2c
 800680c:	f000 fb80 	bl	8006f10 <__mcmp>
 8006810:	4632      	mov	r2, r6
 8006812:	4681      	mov	r9, r0
 8006814:	4621      	mov	r1, r4
 8006816:	4628      	mov	r0, r5
 8006818:	f000 fb96 	bl	8006f48 <__mdiff>
 800681c:	68c2      	ldr	r2, [r0, #12]
 800681e:	4607      	mov	r7, r0
 8006820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006822:	bb02      	cbnz	r2, 8006866 <_dtoa_r+0xa7e>
 8006824:	4601      	mov	r1, r0
 8006826:	4658      	mov	r0, fp
 8006828:	f000 fb72 	bl	8006f10 <__mcmp>
 800682c:	4602      	mov	r2, r0
 800682e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006830:	4639      	mov	r1, r7
 8006832:	4628      	mov	r0, r5
 8006834:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006838:	f000 f92c 	bl	8006a94 <_Bfree>
 800683c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800683e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006840:	9f08      	ldr	r7, [sp, #32]
 8006842:	ea43 0102 	orr.w	r1, r3, r2
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	430b      	orrs	r3, r1
 800684a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684c:	d10d      	bne.n	800686a <_dtoa_r+0xa82>
 800684e:	2b39      	cmp	r3, #57	; 0x39
 8006850:	d029      	beq.n	80068a6 <_dtoa_r+0xabe>
 8006852:	f1b9 0f00 	cmp.w	r9, #0
 8006856:	dd01      	ble.n	800685c <_dtoa_r+0xa74>
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	3331      	adds	r3, #49	; 0x31
 800685c:	9a04      	ldr	r2, [sp, #16]
 800685e:	7013      	strb	r3, [r2, #0]
 8006860:	e776      	b.n	8006750 <_dtoa_r+0x968>
 8006862:	4630      	mov	r0, r6
 8006864:	e7b9      	b.n	80067da <_dtoa_r+0x9f2>
 8006866:	2201      	movs	r2, #1
 8006868:	e7e2      	b.n	8006830 <_dtoa_r+0xa48>
 800686a:	f1b9 0f00 	cmp.w	r9, #0
 800686e:	db06      	blt.n	800687e <_dtoa_r+0xa96>
 8006870:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006872:	ea41 0909 	orr.w	r9, r1, r9
 8006876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006878:	ea59 0101 	orrs.w	r1, r9, r1
 800687c:	d120      	bne.n	80068c0 <_dtoa_r+0xad8>
 800687e:	2a00      	cmp	r2, #0
 8006880:	ddec      	ble.n	800685c <_dtoa_r+0xa74>
 8006882:	4659      	mov	r1, fp
 8006884:	2201      	movs	r2, #1
 8006886:	4628      	mov	r0, r5
 8006888:	9308      	str	r3, [sp, #32]
 800688a:	f000 fad1 	bl	8006e30 <__lshift>
 800688e:	4621      	mov	r1, r4
 8006890:	4683      	mov	fp, r0
 8006892:	f000 fb3d 	bl	8006f10 <__mcmp>
 8006896:	2800      	cmp	r0, #0
 8006898:	9b08      	ldr	r3, [sp, #32]
 800689a:	dc02      	bgt.n	80068a2 <_dtoa_r+0xaba>
 800689c:	d1de      	bne.n	800685c <_dtoa_r+0xa74>
 800689e:	07da      	lsls	r2, r3, #31
 80068a0:	d5dc      	bpl.n	800685c <_dtoa_r+0xa74>
 80068a2:	2b39      	cmp	r3, #57	; 0x39
 80068a4:	d1d8      	bne.n	8006858 <_dtoa_r+0xa70>
 80068a6:	2339      	movs	r3, #57	; 0x39
 80068a8:	9a04      	ldr	r2, [sp, #16]
 80068aa:	7013      	strb	r3, [r2, #0]
 80068ac:	463b      	mov	r3, r7
 80068ae:	461f      	mov	r7, r3
 80068b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	2a39      	cmp	r2, #57	; 0x39
 80068b8:	d050      	beq.n	800695c <_dtoa_r+0xb74>
 80068ba:	3201      	adds	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e747      	b.n	8006750 <_dtoa_r+0x968>
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	dd03      	ble.n	80068cc <_dtoa_r+0xae4>
 80068c4:	2b39      	cmp	r3, #57	; 0x39
 80068c6:	d0ee      	beq.n	80068a6 <_dtoa_r+0xabe>
 80068c8:	3301      	adds	r3, #1
 80068ca:	e7c7      	b.n	800685c <_dtoa_r+0xa74>
 80068cc:	9a08      	ldr	r2, [sp, #32]
 80068ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068d4:	428a      	cmp	r2, r1
 80068d6:	d02a      	beq.n	800692e <_dtoa_r+0xb46>
 80068d8:	4659      	mov	r1, fp
 80068da:	2300      	movs	r3, #0
 80068dc:	220a      	movs	r2, #10
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f8fa 	bl	8006ad8 <__multadd>
 80068e4:	45b0      	cmp	r8, r6
 80068e6:	4683      	mov	fp, r0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	f04f 020a 	mov.w	r2, #10
 80068f0:	4641      	mov	r1, r8
 80068f2:	4628      	mov	r0, r5
 80068f4:	d107      	bne.n	8006906 <_dtoa_r+0xb1e>
 80068f6:	f000 f8ef 	bl	8006ad8 <__multadd>
 80068fa:	4680      	mov	r8, r0
 80068fc:	4606      	mov	r6, r0
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	3301      	adds	r3, #1
 8006902:	9308      	str	r3, [sp, #32]
 8006904:	e775      	b.n	80067f2 <_dtoa_r+0xa0a>
 8006906:	f000 f8e7 	bl	8006ad8 <__multadd>
 800690a:	4631      	mov	r1, r6
 800690c:	4680      	mov	r8, r0
 800690e:	2300      	movs	r3, #0
 8006910:	220a      	movs	r2, #10
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f8e0 	bl	8006ad8 <__multadd>
 8006918:	4606      	mov	r6, r0
 800691a:	e7f0      	b.n	80068fe <_dtoa_r+0xb16>
 800691c:	f1b9 0f00 	cmp.w	r9, #0
 8006920:	bfcc      	ite	gt
 8006922:	464f      	movgt	r7, r9
 8006924:	2701      	movle	r7, #1
 8006926:	f04f 0800 	mov.w	r8, #0
 800692a:	9a03      	ldr	r2, [sp, #12]
 800692c:	4417      	add	r7, r2
 800692e:	4659      	mov	r1, fp
 8006930:	2201      	movs	r2, #1
 8006932:	4628      	mov	r0, r5
 8006934:	9308      	str	r3, [sp, #32]
 8006936:	f000 fa7b 	bl	8006e30 <__lshift>
 800693a:	4621      	mov	r1, r4
 800693c:	4683      	mov	fp, r0
 800693e:	f000 fae7 	bl	8006f10 <__mcmp>
 8006942:	2800      	cmp	r0, #0
 8006944:	dcb2      	bgt.n	80068ac <_dtoa_r+0xac4>
 8006946:	d102      	bne.n	800694e <_dtoa_r+0xb66>
 8006948:	9b08      	ldr	r3, [sp, #32]
 800694a:	07db      	lsls	r3, r3, #31
 800694c:	d4ae      	bmi.n	80068ac <_dtoa_r+0xac4>
 800694e:	463b      	mov	r3, r7
 8006950:	461f      	mov	r7, r3
 8006952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006956:	2a30      	cmp	r2, #48	; 0x30
 8006958:	d0fa      	beq.n	8006950 <_dtoa_r+0xb68>
 800695a:	e6f9      	b.n	8006750 <_dtoa_r+0x968>
 800695c:	9a03      	ldr	r2, [sp, #12]
 800695e:	429a      	cmp	r2, r3
 8006960:	d1a5      	bne.n	80068ae <_dtoa_r+0xac6>
 8006962:	2331      	movs	r3, #49	; 0x31
 8006964:	f10a 0a01 	add.w	sl, sl, #1
 8006968:	e779      	b.n	800685e <_dtoa_r+0xa76>
 800696a:	4b14      	ldr	r3, [pc, #80]	; (80069bc <_dtoa_r+0xbd4>)
 800696c:	f7ff baa8 	b.w	8005ec0 <_dtoa_r+0xd8>
 8006970:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006972:	2b00      	cmp	r3, #0
 8006974:	f47f aa81 	bne.w	8005e7a <_dtoa_r+0x92>
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <_dtoa_r+0xbd8>)
 800697a:	f7ff baa1 	b.w	8005ec0 <_dtoa_r+0xd8>
 800697e:	f1b9 0f00 	cmp.w	r9, #0
 8006982:	dc03      	bgt.n	800698c <_dtoa_r+0xba4>
 8006984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006986:	2b02      	cmp	r3, #2
 8006988:	f73f aecb 	bgt.w	8006722 <_dtoa_r+0x93a>
 800698c:	9f03      	ldr	r7, [sp, #12]
 800698e:	4621      	mov	r1, r4
 8006990:	4658      	mov	r0, fp
 8006992:	f7ff f99d 	bl	8005cd0 <quorem>
 8006996:	9a03      	ldr	r2, [sp, #12]
 8006998:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800699c:	f807 3b01 	strb.w	r3, [r7], #1
 80069a0:	1aba      	subs	r2, r7, r2
 80069a2:	4591      	cmp	r9, r2
 80069a4:	ddba      	ble.n	800691c <_dtoa_r+0xb34>
 80069a6:	4659      	mov	r1, fp
 80069a8:	2300      	movs	r3, #0
 80069aa:	220a      	movs	r2, #10
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 f893 	bl	8006ad8 <__multadd>
 80069b2:	4683      	mov	fp, r0
 80069b4:	e7eb      	b.n	800698e <_dtoa_r+0xba6>
 80069b6:	bf00      	nop
 80069b8:	0800a333 	.word	0x0800a333
 80069bc:	0800a290 	.word	0x0800a290
 80069c0:	0800a2b4 	.word	0x0800a2b4

080069c4 <_localeconv_r>:
 80069c4:	4800      	ldr	r0, [pc, #0]	; (80069c8 <_localeconv_r+0x4>)
 80069c6:	4770      	bx	lr
 80069c8:	20000174 	.word	0x20000174

080069cc <malloc>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <malloc+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f000 bc1d 	b.w	8007210 <_malloc_r>
 80069d6:	bf00      	nop
 80069d8:	20000020 	.word	0x20000020

080069dc <memchr>:
 80069dc:	4603      	mov	r3, r0
 80069de:	b510      	push	{r4, lr}
 80069e0:	b2c9      	uxtb	r1, r1
 80069e2:	4402      	add	r2, r0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	d101      	bne.n	80069ee <memchr+0x12>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e003      	b.n	80069f6 <memchr+0x1a>
 80069ee:	7804      	ldrb	r4, [r0, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	428c      	cmp	r4, r1
 80069f4:	d1f6      	bne.n	80069e4 <memchr+0x8>
 80069f6:	bd10      	pop	{r4, pc}

080069f8 <memcpy>:
 80069f8:	440a      	add	r2, r1
 80069fa:	4291      	cmp	r1, r2
 80069fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a00:	d100      	bne.n	8006a04 <memcpy+0xc>
 8006a02:	4770      	bx	lr
 8006a04:	b510      	push	{r4, lr}
 8006a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a10:	d1f9      	bne.n	8006a06 <memcpy+0xe>
 8006a12:	bd10      	pop	{r4, pc}

08006a14 <_Balloc>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	b976      	cbnz	r6, 8006a3c <_Balloc+0x28>
 8006a1e:	2010      	movs	r0, #16
 8006a20:	f7ff ffd4 	bl	80069cc <malloc>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6260      	str	r0, [r4, #36]	; 0x24
 8006a28:	b920      	cbnz	r0, 8006a34 <_Balloc+0x20>
 8006a2a:	2166      	movs	r1, #102	; 0x66
 8006a2c:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <_Balloc+0x78>)
 8006a2e:	4818      	ldr	r0, [pc, #96]	; (8006a90 <_Balloc+0x7c>)
 8006a30:	f000 fdce 	bl	80075d0 <__assert_func>
 8006a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a38:	6006      	str	r6, [r0, #0]
 8006a3a:	60c6      	str	r6, [r0, #12]
 8006a3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a3e:	68f3      	ldr	r3, [r6, #12]
 8006a40:	b183      	cbz	r3, 8006a64 <_Balloc+0x50>
 8006a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a4a:	b9b8      	cbnz	r0, 8006a7c <_Balloc+0x68>
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a52:	1d72      	adds	r2, r6, #5
 8006a54:	4620      	mov	r0, r4
 8006a56:	0092      	lsls	r2, r2, #2
 8006a58:	f000 fb5e 	bl	8007118 <_calloc_r>
 8006a5c:	b160      	cbz	r0, 8006a78 <_Balloc+0x64>
 8006a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a62:	e00e      	b.n	8006a82 <_Balloc+0x6e>
 8006a64:	2221      	movs	r2, #33	; 0x21
 8006a66:	2104      	movs	r1, #4
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fb55 	bl	8007118 <_calloc_r>
 8006a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a70:	60f0      	str	r0, [r6, #12]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e4      	bne.n	8006a42 <_Balloc+0x2e>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	6802      	ldr	r2, [r0, #0]
 8006a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a82:	2300      	movs	r3, #0
 8006a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a88:	e7f7      	b.n	8006a7a <_Balloc+0x66>
 8006a8a:	bf00      	nop
 8006a8c:	0800a2c1 	.word	0x0800a2c1
 8006a90:	0800a344 	.word	0x0800a344

08006a94 <_Bfree>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a98:	4605      	mov	r5, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	b976      	cbnz	r6, 8006abc <_Bfree+0x28>
 8006a9e:	2010      	movs	r0, #16
 8006aa0:	f7ff ff94 	bl	80069cc <malloc>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6268      	str	r0, [r5, #36]	; 0x24
 8006aa8:	b920      	cbnz	r0, 8006ab4 <_Bfree+0x20>
 8006aaa:	218a      	movs	r1, #138	; 0x8a
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <_Bfree+0x3c>)
 8006aae:	4809      	ldr	r0, [pc, #36]	; (8006ad4 <_Bfree+0x40>)
 8006ab0:	f000 fd8e 	bl	80075d0 <__assert_func>
 8006ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab8:	6006      	str	r6, [r0, #0]
 8006aba:	60c6      	str	r6, [r0, #12]
 8006abc:	b13c      	cbz	r4, 8006ace <_Bfree+0x3a>
 8006abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ac0:	6862      	ldr	r2, [r4, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ac8:	6021      	str	r1, [r4, #0]
 8006aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	0800a2c1 	.word	0x0800a2c1
 8006ad4:	0800a344 	.word	0x0800a344

08006ad8 <__multadd>:
 8006ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006adc:	4607      	mov	r7, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	461e      	mov	r6, r3
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	690d      	ldr	r5, [r1, #16]
 8006ae6:	f101 0c14 	add.w	ip, r1, #20
 8006aea:	f8dc 3000 	ldr.w	r3, [ip]
 8006aee:	3001      	adds	r0, #1
 8006af0:	b299      	uxth	r1, r3
 8006af2:	fb02 6101 	mla	r1, r2, r1, r6
 8006af6:	0c1e      	lsrs	r6, r3, #16
 8006af8:	0c0b      	lsrs	r3, r1, #16
 8006afa:	fb02 3306 	mla	r3, r2, r6, r3
 8006afe:	b289      	uxth	r1, r1
 8006b00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b04:	4285      	cmp	r5, r0
 8006b06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b0e:	dcec      	bgt.n	8006aea <__multadd+0x12>
 8006b10:	b30e      	cbz	r6, 8006b56 <__multadd+0x7e>
 8006b12:	68a3      	ldr	r3, [r4, #8]
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	dc19      	bgt.n	8006b4c <__multadd+0x74>
 8006b18:	6861      	ldr	r1, [r4, #4]
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	3101      	adds	r1, #1
 8006b1e:	f7ff ff79 	bl	8006a14 <_Balloc>
 8006b22:	4680      	mov	r8, r0
 8006b24:	b928      	cbnz	r0, 8006b32 <__multadd+0x5a>
 8006b26:	4602      	mov	r2, r0
 8006b28:	21b5      	movs	r1, #181	; 0xb5
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <__multadd+0x84>)
 8006b2c:	480c      	ldr	r0, [pc, #48]	; (8006b60 <__multadd+0x88>)
 8006b2e:	f000 fd4f 	bl	80075d0 <__assert_func>
 8006b32:	6922      	ldr	r2, [r4, #16]
 8006b34:	f104 010c 	add.w	r1, r4, #12
 8006b38:	3202      	adds	r2, #2
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	300c      	adds	r0, #12
 8006b3e:	f7ff ff5b 	bl	80069f8 <memcpy>
 8006b42:	4621      	mov	r1, r4
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ffa5 	bl	8006a94 <_Bfree>
 8006b4a:	4644      	mov	r4, r8
 8006b4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b50:	3501      	adds	r5, #1
 8006b52:	615e      	str	r6, [r3, #20]
 8006b54:	6125      	str	r5, [r4, #16]
 8006b56:	4620      	mov	r0, r4
 8006b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b5c:	0800a333 	.word	0x0800a333
 8006b60:	0800a344 	.word	0x0800a344

08006b64 <__hi0bits>:
 8006b64:	0c02      	lsrs	r2, r0, #16
 8006b66:	0412      	lsls	r2, r2, #16
 8006b68:	4603      	mov	r3, r0
 8006b6a:	b9ca      	cbnz	r2, 8006ba0 <__hi0bits+0x3c>
 8006b6c:	0403      	lsls	r3, r0, #16
 8006b6e:	2010      	movs	r0, #16
 8006b70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b74:	bf04      	itt	eq
 8006b76:	021b      	lsleq	r3, r3, #8
 8006b78:	3008      	addeq	r0, #8
 8006b7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b7e:	bf04      	itt	eq
 8006b80:	011b      	lsleq	r3, r3, #4
 8006b82:	3004      	addeq	r0, #4
 8006b84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b88:	bf04      	itt	eq
 8006b8a:	009b      	lsleq	r3, r3, #2
 8006b8c:	3002      	addeq	r0, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	db05      	blt.n	8006b9e <__hi0bits+0x3a>
 8006b92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006b96:	f100 0001 	add.w	r0, r0, #1
 8006b9a:	bf08      	it	eq
 8006b9c:	2020      	moveq	r0, #32
 8006b9e:	4770      	bx	lr
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e7e5      	b.n	8006b70 <__hi0bits+0xc>

08006ba4 <__lo0bits>:
 8006ba4:	6803      	ldr	r3, [r0, #0]
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f013 0007 	ands.w	r0, r3, #7
 8006bac:	d00b      	beq.n	8006bc6 <__lo0bits+0x22>
 8006bae:	07d9      	lsls	r1, r3, #31
 8006bb0:	d421      	bmi.n	8006bf6 <__lo0bits+0x52>
 8006bb2:	0798      	lsls	r0, r3, #30
 8006bb4:	bf49      	itett	mi
 8006bb6:	085b      	lsrmi	r3, r3, #1
 8006bb8:	089b      	lsrpl	r3, r3, #2
 8006bba:	2001      	movmi	r0, #1
 8006bbc:	6013      	strmi	r3, [r2, #0]
 8006bbe:	bf5c      	itt	pl
 8006bc0:	2002      	movpl	r0, #2
 8006bc2:	6013      	strpl	r3, [r2, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	b299      	uxth	r1, r3
 8006bc8:	b909      	cbnz	r1, 8006bce <__lo0bits+0x2a>
 8006bca:	2010      	movs	r0, #16
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	b2d9      	uxtb	r1, r3
 8006bd0:	b909      	cbnz	r1, 8006bd6 <__lo0bits+0x32>
 8006bd2:	3008      	adds	r0, #8
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	0719      	lsls	r1, r3, #28
 8006bd8:	bf04      	itt	eq
 8006bda:	091b      	lsreq	r3, r3, #4
 8006bdc:	3004      	addeq	r0, #4
 8006bde:	0799      	lsls	r1, r3, #30
 8006be0:	bf04      	itt	eq
 8006be2:	089b      	lsreq	r3, r3, #2
 8006be4:	3002      	addeq	r0, #2
 8006be6:	07d9      	lsls	r1, r3, #31
 8006be8:	d403      	bmi.n	8006bf2 <__lo0bits+0x4e>
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	f100 0001 	add.w	r0, r0, #1
 8006bf0:	d003      	beq.n	8006bfa <__lo0bits+0x56>
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4770      	bx	lr
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	4770      	bx	lr
 8006bfa:	2020      	movs	r0, #32
 8006bfc:	4770      	bx	lr
	...

08006c00 <__i2b>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	460c      	mov	r4, r1
 8006c04:	2101      	movs	r1, #1
 8006c06:	f7ff ff05 	bl	8006a14 <_Balloc>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	b928      	cbnz	r0, 8006c1a <__i2b+0x1a>
 8006c0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c12:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <__i2b+0x24>)
 8006c14:	4804      	ldr	r0, [pc, #16]	; (8006c28 <__i2b+0x28>)
 8006c16:	f000 fcdb 	bl	80075d0 <__assert_func>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	6144      	str	r4, [r0, #20]
 8006c1e:	6103      	str	r3, [r0, #16]
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	bf00      	nop
 8006c24:	0800a333 	.word	0x0800a333
 8006c28:	0800a344 	.word	0x0800a344

08006c2c <__multiply>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	4691      	mov	r9, r2
 8006c32:	690a      	ldr	r2, [r1, #16]
 8006c34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c38:	460c      	mov	r4, r1
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bfbe      	ittt	lt
 8006c3e:	460b      	movlt	r3, r1
 8006c40:	464c      	movlt	r4, r9
 8006c42:	4699      	movlt	r9, r3
 8006c44:	6927      	ldr	r7, [r4, #16]
 8006c46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c4a:	68a3      	ldr	r3, [r4, #8]
 8006c4c:	6861      	ldr	r1, [r4, #4]
 8006c4e:	eb07 060a 	add.w	r6, r7, sl
 8006c52:	42b3      	cmp	r3, r6
 8006c54:	b085      	sub	sp, #20
 8006c56:	bfb8      	it	lt
 8006c58:	3101      	addlt	r1, #1
 8006c5a:	f7ff fedb 	bl	8006a14 <_Balloc>
 8006c5e:	b930      	cbnz	r0, 8006c6e <__multiply+0x42>
 8006c60:	4602      	mov	r2, r0
 8006c62:	f240 115d 	movw	r1, #349	; 0x15d
 8006c66:	4b43      	ldr	r3, [pc, #268]	; (8006d74 <__multiply+0x148>)
 8006c68:	4843      	ldr	r0, [pc, #268]	; (8006d78 <__multiply+0x14c>)
 8006c6a:	f000 fcb1 	bl	80075d0 <__assert_func>
 8006c6e:	f100 0514 	add.w	r5, r0, #20
 8006c72:	462b      	mov	r3, r5
 8006c74:	2200      	movs	r2, #0
 8006c76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c7a:	4543      	cmp	r3, r8
 8006c7c:	d321      	bcc.n	8006cc2 <__multiply+0x96>
 8006c7e:	f104 0314 	add.w	r3, r4, #20
 8006c82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c86:	f109 0314 	add.w	r3, r9, #20
 8006c8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c8e:	9202      	str	r2, [sp, #8]
 8006c90:	1b3a      	subs	r2, r7, r4
 8006c92:	3a15      	subs	r2, #21
 8006c94:	f022 0203 	bic.w	r2, r2, #3
 8006c98:	3204      	adds	r2, #4
 8006c9a:	f104 0115 	add.w	r1, r4, #21
 8006c9e:	428f      	cmp	r7, r1
 8006ca0:	bf38      	it	cc
 8006ca2:	2204      	movcc	r2, #4
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	9a02      	ldr	r2, [sp, #8]
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d80c      	bhi.n	8006cc8 <__multiply+0x9c>
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	dd03      	ble.n	8006cba <__multiply+0x8e>
 8006cb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d059      	beq.n	8006d6e <__multiply+0x142>
 8006cba:	6106      	str	r6, [r0, #16]
 8006cbc:	b005      	add	sp, #20
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	f843 2b04 	str.w	r2, [r3], #4
 8006cc6:	e7d8      	b.n	8006c7a <__multiply+0x4e>
 8006cc8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ccc:	f1ba 0f00 	cmp.w	sl, #0
 8006cd0:	d023      	beq.n	8006d1a <__multiply+0xee>
 8006cd2:	46a9      	mov	r9, r5
 8006cd4:	f04f 0c00 	mov.w	ip, #0
 8006cd8:	f104 0e14 	add.w	lr, r4, #20
 8006cdc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ce0:	f8d9 1000 	ldr.w	r1, [r9]
 8006ce4:	fa1f fb82 	uxth.w	fp, r2
 8006ce8:	b289      	uxth	r1, r1
 8006cea:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cee:	4461      	add	r1, ip
 8006cf0:	f8d9 c000 	ldr.w	ip, [r9]
 8006cf4:	0c12      	lsrs	r2, r2, #16
 8006cf6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cfa:	fb0a c202 	mla	r2, sl, r2, ip
 8006cfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d02:	b289      	uxth	r1, r1
 8006d04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d08:	4577      	cmp	r7, lr
 8006d0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d0e:	f849 1b04 	str.w	r1, [r9], #4
 8006d12:	d8e3      	bhi.n	8006cdc <__multiply+0xb0>
 8006d14:	9a01      	ldr	r2, [sp, #4]
 8006d16:	f845 c002 	str.w	ip, [r5, r2]
 8006d1a:	9a03      	ldr	r2, [sp, #12]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d22:	f1b9 0f00 	cmp.w	r9, #0
 8006d26:	d020      	beq.n	8006d6a <__multiply+0x13e>
 8006d28:	46ae      	mov	lr, r5
 8006d2a:	f04f 0a00 	mov.w	sl, #0
 8006d2e:	6829      	ldr	r1, [r5, #0]
 8006d30:	f104 0c14 	add.w	ip, r4, #20
 8006d34:	f8bc b000 	ldrh.w	fp, [ip]
 8006d38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d3c:	b289      	uxth	r1, r1
 8006d3e:	fb09 220b 	mla	r2, r9, fp, r2
 8006d42:	4492      	add	sl, r2
 8006d44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d48:	f84e 1b04 	str.w	r1, [lr], #4
 8006d4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d50:	f8be 1000 	ldrh.w	r1, [lr]
 8006d54:	0c12      	lsrs	r2, r2, #16
 8006d56:	fb09 1102 	mla	r1, r9, r2, r1
 8006d5a:	4567      	cmp	r7, ip
 8006d5c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d64:	d8e6      	bhi.n	8006d34 <__multiply+0x108>
 8006d66:	9a01      	ldr	r2, [sp, #4]
 8006d68:	50a9      	str	r1, [r5, r2]
 8006d6a:	3504      	adds	r5, #4
 8006d6c:	e79b      	b.n	8006ca6 <__multiply+0x7a>
 8006d6e:	3e01      	subs	r6, #1
 8006d70:	e79d      	b.n	8006cae <__multiply+0x82>
 8006d72:	bf00      	nop
 8006d74:	0800a333 	.word	0x0800a333
 8006d78:	0800a344 	.word	0x0800a344

08006d7c <__pow5mult>:
 8006d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d80:	4615      	mov	r5, r2
 8006d82:	f012 0203 	ands.w	r2, r2, #3
 8006d86:	4606      	mov	r6, r0
 8006d88:	460f      	mov	r7, r1
 8006d8a:	d007      	beq.n	8006d9c <__pow5mult+0x20>
 8006d8c:	4c25      	ldr	r4, [pc, #148]	; (8006e24 <__pow5mult+0xa8>)
 8006d8e:	3a01      	subs	r2, #1
 8006d90:	2300      	movs	r3, #0
 8006d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d96:	f7ff fe9f 	bl	8006ad8 <__multadd>
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	10ad      	asrs	r5, r5, #2
 8006d9e:	d03d      	beq.n	8006e1c <__pow5mult+0xa0>
 8006da0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006da2:	b97c      	cbnz	r4, 8006dc4 <__pow5mult+0x48>
 8006da4:	2010      	movs	r0, #16
 8006da6:	f7ff fe11 	bl	80069cc <malloc>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6270      	str	r0, [r6, #36]	; 0x24
 8006dae:	b928      	cbnz	r0, 8006dbc <__pow5mult+0x40>
 8006db0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <__pow5mult+0xac>)
 8006db6:	481d      	ldr	r0, [pc, #116]	; (8006e2c <__pow5mult+0xb0>)
 8006db8:	f000 fc0a 	bl	80075d0 <__assert_func>
 8006dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc0:	6004      	str	r4, [r0, #0]
 8006dc2:	60c4      	str	r4, [r0, #12]
 8006dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dcc:	b94c      	cbnz	r4, 8006de2 <__pow5mult+0x66>
 8006dce:	f240 2171 	movw	r1, #625	; 0x271
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ff14 	bl	8006c00 <__i2b>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	f04f 0900 	mov.w	r9, #0
 8006de6:	07eb      	lsls	r3, r5, #31
 8006de8:	d50a      	bpl.n	8006e00 <__pow5mult+0x84>
 8006dea:	4639      	mov	r1, r7
 8006dec:	4622      	mov	r2, r4
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7ff ff1c 	bl	8006c2c <__multiply>
 8006df4:	4680      	mov	r8, r0
 8006df6:	4639      	mov	r1, r7
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7ff fe4b 	bl	8006a94 <_Bfree>
 8006dfe:	4647      	mov	r7, r8
 8006e00:	106d      	asrs	r5, r5, #1
 8006e02:	d00b      	beq.n	8006e1c <__pow5mult+0xa0>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	b938      	cbnz	r0, 8006e18 <__pow5mult+0x9c>
 8006e08:	4622      	mov	r2, r4
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7ff ff0d 	bl	8006c2c <__multiply>
 8006e12:	6020      	str	r0, [r4, #0]
 8006e14:	f8c0 9000 	str.w	r9, [r0]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	e7e4      	b.n	8006de6 <__pow5mult+0x6a>
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e22:	bf00      	nop
 8006e24:	0800a490 	.word	0x0800a490
 8006e28:	0800a2c1 	.word	0x0800a2c1
 8006e2c:	0800a344 	.word	0x0800a344

08006e30 <__lshift>:
 8006e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	460c      	mov	r4, r1
 8006e36:	4607      	mov	r7, r0
 8006e38:	4691      	mov	r9, r2
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	6849      	ldr	r1, [r1, #4]
 8006e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e48:	f108 0601 	add.w	r6, r8, #1
 8006e4c:	42b3      	cmp	r3, r6
 8006e4e:	db0b      	blt.n	8006e68 <__lshift+0x38>
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff fddf 	bl	8006a14 <_Balloc>
 8006e56:	4605      	mov	r5, r0
 8006e58:	b948      	cbnz	r0, 8006e6e <__lshift+0x3e>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <__lshift+0xd8>)
 8006e62:	482a      	ldr	r0, [pc, #168]	; (8006f0c <__lshift+0xdc>)
 8006e64:	f000 fbb4 	bl	80075d0 <__assert_func>
 8006e68:	3101      	adds	r1, #1
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	e7ee      	b.n	8006e4c <__lshift+0x1c>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f100 0114 	add.w	r1, r0, #20
 8006e74:	f100 0210 	add.w	r2, r0, #16
 8006e78:	4618      	mov	r0, r3
 8006e7a:	4553      	cmp	r3, sl
 8006e7c:	db37      	blt.n	8006eee <__lshift+0xbe>
 8006e7e:	6920      	ldr	r0, [r4, #16]
 8006e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e84:	f104 0314 	add.w	r3, r4, #20
 8006e88:	f019 091f 	ands.w	r9, r9, #31
 8006e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e94:	d02f      	beq.n	8006ef6 <__lshift+0xc6>
 8006e96:	468a      	mov	sl, r1
 8006e98:	f04f 0c00 	mov.w	ip, #0
 8006e9c:	f1c9 0e20 	rsb	lr, r9, #32
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	fa02 f209 	lsl.w	r2, r2, r9
 8006ea6:	ea42 020c 	orr.w	r2, r2, ip
 8006eaa:	f84a 2b04 	str.w	r2, [sl], #4
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	4298      	cmp	r0, r3
 8006eb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006eb8:	d8f2      	bhi.n	8006ea0 <__lshift+0x70>
 8006eba:	1b03      	subs	r3, r0, r4
 8006ebc:	3b15      	subs	r3, #21
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	f104 0215 	add.w	r2, r4, #21
 8006ec8:	4290      	cmp	r0, r2
 8006eca:	bf38      	it	cc
 8006ecc:	2304      	movcc	r3, #4
 8006ece:	f841 c003 	str.w	ip, [r1, r3]
 8006ed2:	f1bc 0f00 	cmp.w	ip, #0
 8006ed6:	d001      	beq.n	8006edc <__lshift+0xac>
 8006ed8:	f108 0602 	add.w	r6, r8, #2
 8006edc:	3e01      	subs	r6, #1
 8006ede:	4638      	mov	r0, r7
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	612e      	str	r6, [r5, #16]
 8006ee4:	f7ff fdd6 	bl	8006a94 <_Bfree>
 8006ee8:	4628      	mov	r0, r5
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	e7c1      	b.n	8006e7a <__lshift+0x4a>
 8006ef6:	3904      	subs	r1, #4
 8006ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006efc:	4298      	cmp	r0, r3
 8006efe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f02:	d8f9      	bhi.n	8006ef8 <__lshift+0xc8>
 8006f04:	e7ea      	b.n	8006edc <__lshift+0xac>
 8006f06:	bf00      	nop
 8006f08:	0800a333 	.word	0x0800a333
 8006f0c:	0800a344 	.word	0x0800a344

08006f10 <__mcmp>:
 8006f10:	4603      	mov	r3, r0
 8006f12:	690a      	ldr	r2, [r1, #16]
 8006f14:	6900      	ldr	r0, [r0, #16]
 8006f16:	b530      	push	{r4, r5, lr}
 8006f18:	1a80      	subs	r0, r0, r2
 8006f1a:	d10d      	bne.n	8006f38 <__mcmp+0x28>
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	3114      	adds	r1, #20
 8006f20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f30:	4295      	cmp	r5, r2
 8006f32:	d002      	beq.n	8006f3a <__mcmp+0x2a>
 8006f34:	d304      	bcc.n	8006f40 <__mcmp+0x30>
 8006f36:	2001      	movs	r0, #1
 8006f38:	bd30      	pop	{r4, r5, pc}
 8006f3a:	42a3      	cmp	r3, r4
 8006f3c:	d3f4      	bcc.n	8006f28 <__mcmp+0x18>
 8006f3e:	e7fb      	b.n	8006f38 <__mcmp+0x28>
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	e7f8      	b.n	8006f38 <__mcmp+0x28>
	...

08006f48 <__mdiff>:
 8006f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	4607      	mov	r7, r0
 8006f50:	4611      	mov	r1, r2
 8006f52:	4628      	mov	r0, r5
 8006f54:	4614      	mov	r4, r2
 8006f56:	f7ff ffdb 	bl	8006f10 <__mcmp>
 8006f5a:	1e06      	subs	r6, r0, #0
 8006f5c:	d111      	bne.n	8006f82 <__mdiff+0x3a>
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4638      	mov	r0, r7
 8006f62:	f7ff fd57 	bl	8006a14 <_Balloc>
 8006f66:	4602      	mov	r2, r0
 8006f68:	b928      	cbnz	r0, 8006f76 <__mdiff+0x2e>
 8006f6a:	f240 2132 	movw	r1, #562	; 0x232
 8006f6e:	4b3a      	ldr	r3, [pc, #232]	; (8007058 <__mdiff+0x110>)
 8006f70:	483a      	ldr	r0, [pc, #232]	; (800705c <__mdiff+0x114>)
 8006f72:	f000 fb2d 	bl	80075d0 <__assert_func>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	bfa4      	itt	ge
 8006f84:	4623      	movge	r3, r4
 8006f86:	462c      	movge	r4, r5
 8006f88:	4638      	mov	r0, r7
 8006f8a:	6861      	ldr	r1, [r4, #4]
 8006f8c:	bfa6      	itte	ge
 8006f8e:	461d      	movge	r5, r3
 8006f90:	2600      	movge	r6, #0
 8006f92:	2601      	movlt	r6, #1
 8006f94:	f7ff fd3e 	bl	8006a14 <_Balloc>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	b918      	cbnz	r0, 8006fa4 <__mdiff+0x5c>
 8006f9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <__mdiff+0x110>)
 8006fa2:	e7e5      	b.n	8006f70 <__mdiff+0x28>
 8006fa4:	f102 0814 	add.w	r8, r2, #20
 8006fa8:	46c2      	mov	sl, r8
 8006faa:	f04f 0c00 	mov.w	ip, #0
 8006fae:	6927      	ldr	r7, [r4, #16]
 8006fb0:	60c6      	str	r6, [r0, #12]
 8006fb2:	692e      	ldr	r6, [r5, #16]
 8006fb4:	f104 0014 	add.w	r0, r4, #20
 8006fb8:	f105 0914 	add.w	r9, r5, #20
 8006fbc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006fc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fc4:	3410      	adds	r4, #16
 8006fc6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006fca:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fce:	fa1f f18b 	uxth.w	r1, fp
 8006fd2:	448c      	add	ip, r1
 8006fd4:	b299      	uxth	r1, r3
 8006fd6:	0c1b      	lsrs	r3, r3, #16
 8006fd8:	ebac 0101 	sub.w	r1, ip, r1
 8006fdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fe0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006fe4:	b289      	uxth	r1, r1
 8006fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006fea:	454e      	cmp	r6, r9
 8006fec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ff0:	f84a 3b04 	str.w	r3, [sl], #4
 8006ff4:	d8e7      	bhi.n	8006fc6 <__mdiff+0x7e>
 8006ff6:	1b73      	subs	r3, r6, r5
 8006ff8:	3b15      	subs	r3, #21
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	3515      	adds	r5, #21
 8007000:	3304      	adds	r3, #4
 8007002:	42ae      	cmp	r6, r5
 8007004:	bf38      	it	cc
 8007006:	2304      	movcc	r3, #4
 8007008:	4418      	add	r0, r3
 800700a:	4443      	add	r3, r8
 800700c:	461e      	mov	r6, r3
 800700e:	4605      	mov	r5, r0
 8007010:	4575      	cmp	r5, lr
 8007012:	d30e      	bcc.n	8007032 <__mdiff+0xea>
 8007014:	f10e 0103 	add.w	r1, lr, #3
 8007018:	1a09      	subs	r1, r1, r0
 800701a:	f021 0103 	bic.w	r1, r1, #3
 800701e:	3803      	subs	r0, #3
 8007020:	4586      	cmp	lr, r0
 8007022:	bf38      	it	cc
 8007024:	2100      	movcc	r1, #0
 8007026:	4419      	add	r1, r3
 8007028:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800702c:	b18b      	cbz	r3, 8007052 <__mdiff+0x10a>
 800702e:	6117      	str	r7, [r2, #16]
 8007030:	e7a4      	b.n	8006f7c <__mdiff+0x34>
 8007032:	f855 8b04 	ldr.w	r8, [r5], #4
 8007036:	fa1f f188 	uxth.w	r1, r8
 800703a:	4461      	add	r1, ip
 800703c:	140c      	asrs	r4, r1, #16
 800703e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007042:	b289      	uxth	r1, r1
 8007044:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007048:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800704c:	f846 1b04 	str.w	r1, [r6], #4
 8007050:	e7de      	b.n	8007010 <__mdiff+0xc8>
 8007052:	3f01      	subs	r7, #1
 8007054:	e7e8      	b.n	8007028 <__mdiff+0xe0>
 8007056:	bf00      	nop
 8007058:	0800a333 	.word	0x0800a333
 800705c:	0800a344 	.word	0x0800a344

08007060 <__d2b>:
 8007060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007064:	2101      	movs	r1, #1
 8007066:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800706a:	4690      	mov	r8, r2
 800706c:	461d      	mov	r5, r3
 800706e:	f7ff fcd1 	bl	8006a14 <_Balloc>
 8007072:	4604      	mov	r4, r0
 8007074:	b930      	cbnz	r0, 8007084 <__d2b+0x24>
 8007076:	4602      	mov	r2, r0
 8007078:	f240 310a 	movw	r1, #778	; 0x30a
 800707c:	4b24      	ldr	r3, [pc, #144]	; (8007110 <__d2b+0xb0>)
 800707e:	4825      	ldr	r0, [pc, #148]	; (8007114 <__d2b+0xb4>)
 8007080:	f000 faa6 	bl	80075d0 <__assert_func>
 8007084:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007088:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800708c:	bb2d      	cbnz	r5, 80070da <__d2b+0x7a>
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	f1b8 0300 	subs.w	r3, r8, #0
 8007094:	d026      	beq.n	80070e4 <__d2b+0x84>
 8007096:	4668      	mov	r0, sp
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	f7ff fd83 	bl	8006ba4 <__lo0bits>
 800709e:	9900      	ldr	r1, [sp, #0]
 80070a0:	b1f0      	cbz	r0, 80070e0 <__d2b+0x80>
 80070a2:	9a01      	ldr	r2, [sp, #4]
 80070a4:	f1c0 0320 	rsb	r3, r0, #32
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	430b      	orrs	r3, r1
 80070ae:	40c2      	lsrs	r2, r0
 80070b0:	6163      	str	r3, [r4, #20]
 80070b2:	9201      	str	r2, [sp, #4]
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bf14      	ite	ne
 80070ba:	2102      	movne	r1, #2
 80070bc:	2101      	moveq	r1, #1
 80070be:	61a3      	str	r3, [r4, #24]
 80070c0:	6121      	str	r1, [r4, #16]
 80070c2:	b1c5      	cbz	r5, 80070f6 <__d2b+0x96>
 80070c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070c8:	4405      	add	r5, r0
 80070ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070ce:	603d      	str	r5, [r7, #0]
 80070d0:	6030      	str	r0, [r6, #0]
 80070d2:	4620      	mov	r0, r4
 80070d4:	b002      	add	sp, #8
 80070d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070de:	e7d6      	b.n	800708e <__d2b+0x2e>
 80070e0:	6161      	str	r1, [r4, #20]
 80070e2:	e7e7      	b.n	80070b4 <__d2b+0x54>
 80070e4:	a801      	add	r0, sp, #4
 80070e6:	f7ff fd5d 	bl	8006ba4 <__lo0bits>
 80070ea:	2101      	movs	r1, #1
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	6121      	str	r1, [r4, #16]
 80070f0:	6163      	str	r3, [r4, #20]
 80070f2:	3020      	adds	r0, #32
 80070f4:	e7e5      	b.n	80070c2 <__d2b+0x62>
 80070f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80070fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070fe:	6038      	str	r0, [r7, #0]
 8007100:	6918      	ldr	r0, [r3, #16]
 8007102:	f7ff fd2f 	bl	8006b64 <__hi0bits>
 8007106:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800710a:	6031      	str	r1, [r6, #0]
 800710c:	e7e1      	b.n	80070d2 <__d2b+0x72>
 800710e:	bf00      	nop
 8007110:	0800a333 	.word	0x0800a333
 8007114:	0800a344 	.word	0x0800a344

08007118 <_calloc_r>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	fba1 5402 	umull	r5, r4, r1, r2
 800711e:	b934      	cbnz	r4, 800712e <_calloc_r+0x16>
 8007120:	4629      	mov	r1, r5
 8007122:	f000 f875 	bl	8007210 <_malloc_r>
 8007126:	4606      	mov	r6, r0
 8007128:	b928      	cbnz	r0, 8007136 <_calloc_r+0x1e>
 800712a:	4630      	mov	r0, r6
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	220c      	movs	r2, #12
 8007130:	2600      	movs	r6, #0
 8007132:	6002      	str	r2, [r0, #0]
 8007134:	e7f9      	b.n	800712a <_calloc_r+0x12>
 8007136:	462a      	mov	r2, r5
 8007138:	4621      	mov	r1, r4
 800713a:	f7fe f941 	bl	80053c0 <memset>
 800713e:	e7f4      	b.n	800712a <_calloc_r+0x12>

08007140 <_free_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4605      	mov	r5, r0
 8007144:	2900      	cmp	r1, #0
 8007146:	d040      	beq.n	80071ca <_free_r+0x8a>
 8007148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714c:	1f0c      	subs	r4, r1, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfb8      	it	lt
 8007152:	18e4      	addlt	r4, r4, r3
 8007154:	f000 fa98 	bl	8007688 <__malloc_lock>
 8007158:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <_free_r+0x8c>)
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	b933      	cbnz	r3, 800716c <_free_r+0x2c>
 800715e:	6063      	str	r3, [r4, #4]
 8007160:	6014      	str	r4, [r2, #0]
 8007162:	4628      	mov	r0, r5
 8007164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007168:	f000 ba94 	b.w	8007694 <__malloc_unlock>
 800716c:	42a3      	cmp	r3, r4
 800716e:	d908      	bls.n	8007182 <_free_r+0x42>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	1821      	adds	r1, r4, r0
 8007174:	428b      	cmp	r3, r1
 8007176:	bf01      	itttt	eq
 8007178:	6819      	ldreq	r1, [r3, #0]
 800717a:	685b      	ldreq	r3, [r3, #4]
 800717c:	1809      	addeq	r1, r1, r0
 800717e:	6021      	streq	r1, [r4, #0]
 8007180:	e7ed      	b.n	800715e <_free_r+0x1e>
 8007182:	461a      	mov	r2, r3
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	b10b      	cbz	r3, 800718c <_free_r+0x4c>
 8007188:	42a3      	cmp	r3, r4
 800718a:	d9fa      	bls.n	8007182 <_free_r+0x42>
 800718c:	6811      	ldr	r1, [r2, #0]
 800718e:	1850      	adds	r0, r2, r1
 8007190:	42a0      	cmp	r0, r4
 8007192:	d10b      	bne.n	80071ac <_free_r+0x6c>
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	4401      	add	r1, r0
 8007198:	1850      	adds	r0, r2, r1
 800719a:	4283      	cmp	r3, r0
 800719c:	6011      	str	r1, [r2, #0]
 800719e:	d1e0      	bne.n	8007162 <_free_r+0x22>
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4401      	add	r1, r0
 80071a6:	6011      	str	r1, [r2, #0]
 80071a8:	6053      	str	r3, [r2, #4]
 80071aa:	e7da      	b.n	8007162 <_free_r+0x22>
 80071ac:	d902      	bls.n	80071b4 <_free_r+0x74>
 80071ae:	230c      	movs	r3, #12
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	e7d6      	b.n	8007162 <_free_r+0x22>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	1821      	adds	r1, r4, r0
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1809      	addeq	r1, r1, r0
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	6063      	str	r3, [r4, #4]
 80071c6:	6054      	str	r4, [r2, #4]
 80071c8:	e7cb      	b.n	8007162 <_free_r+0x22>
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000b44 	.word	0x20000b44

080071d0 <sbrk_aligned>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4e0e      	ldr	r6, [pc, #56]	; (800720c <sbrk_aligned+0x3c>)
 80071d4:	460c      	mov	r4, r1
 80071d6:	6831      	ldr	r1, [r6, #0]
 80071d8:	4605      	mov	r5, r0
 80071da:	b911      	cbnz	r1, 80071e2 <sbrk_aligned+0x12>
 80071dc:	f000 f9e8 	bl	80075b0 <_sbrk_r>
 80071e0:	6030      	str	r0, [r6, #0]
 80071e2:	4621      	mov	r1, r4
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 f9e3 	bl	80075b0 <_sbrk_r>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	d00a      	beq.n	8007204 <sbrk_aligned+0x34>
 80071ee:	1cc4      	adds	r4, r0, #3
 80071f0:	f024 0403 	bic.w	r4, r4, #3
 80071f4:	42a0      	cmp	r0, r4
 80071f6:	d007      	beq.n	8007208 <sbrk_aligned+0x38>
 80071f8:	1a21      	subs	r1, r4, r0
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 f9d8 	bl	80075b0 <_sbrk_r>
 8007200:	3001      	adds	r0, #1
 8007202:	d101      	bne.n	8007208 <sbrk_aligned+0x38>
 8007204:	f04f 34ff 	mov.w	r4, #4294967295
 8007208:	4620      	mov	r0, r4
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	20000b48 	.word	0x20000b48

08007210 <_malloc_r>:
 8007210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007214:	1ccd      	adds	r5, r1, #3
 8007216:	f025 0503 	bic.w	r5, r5, #3
 800721a:	3508      	adds	r5, #8
 800721c:	2d0c      	cmp	r5, #12
 800721e:	bf38      	it	cc
 8007220:	250c      	movcc	r5, #12
 8007222:	2d00      	cmp	r5, #0
 8007224:	4607      	mov	r7, r0
 8007226:	db01      	blt.n	800722c <_malloc_r+0x1c>
 8007228:	42a9      	cmp	r1, r5
 800722a:	d905      	bls.n	8007238 <_malloc_r+0x28>
 800722c:	230c      	movs	r3, #12
 800722e:	2600      	movs	r6, #0
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4630      	mov	r0, r6
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007238:	4e2e      	ldr	r6, [pc, #184]	; (80072f4 <_malloc_r+0xe4>)
 800723a:	f000 fa25 	bl	8007688 <__malloc_lock>
 800723e:	6833      	ldr	r3, [r6, #0]
 8007240:	461c      	mov	r4, r3
 8007242:	bb34      	cbnz	r4, 8007292 <_malloc_r+0x82>
 8007244:	4629      	mov	r1, r5
 8007246:	4638      	mov	r0, r7
 8007248:	f7ff ffc2 	bl	80071d0 <sbrk_aligned>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	4604      	mov	r4, r0
 8007250:	d14d      	bne.n	80072ee <_malloc_r+0xde>
 8007252:	6834      	ldr	r4, [r6, #0]
 8007254:	4626      	mov	r6, r4
 8007256:	2e00      	cmp	r6, #0
 8007258:	d140      	bne.n	80072dc <_malloc_r+0xcc>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	4631      	mov	r1, r6
 800725e:	4638      	mov	r0, r7
 8007260:	eb04 0803 	add.w	r8, r4, r3
 8007264:	f000 f9a4 	bl	80075b0 <_sbrk_r>
 8007268:	4580      	cmp	r8, r0
 800726a:	d13a      	bne.n	80072e2 <_malloc_r+0xd2>
 800726c:	6821      	ldr	r1, [r4, #0]
 800726e:	3503      	adds	r5, #3
 8007270:	1a6d      	subs	r5, r5, r1
 8007272:	f025 0503 	bic.w	r5, r5, #3
 8007276:	3508      	adds	r5, #8
 8007278:	2d0c      	cmp	r5, #12
 800727a:	bf38      	it	cc
 800727c:	250c      	movcc	r5, #12
 800727e:	4638      	mov	r0, r7
 8007280:	4629      	mov	r1, r5
 8007282:	f7ff ffa5 	bl	80071d0 <sbrk_aligned>
 8007286:	3001      	adds	r0, #1
 8007288:	d02b      	beq.n	80072e2 <_malloc_r+0xd2>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	442b      	add	r3, r5
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	e00e      	b.n	80072b0 <_malloc_r+0xa0>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	1b52      	subs	r2, r2, r5
 8007296:	d41e      	bmi.n	80072d6 <_malloc_r+0xc6>
 8007298:	2a0b      	cmp	r2, #11
 800729a:	d916      	bls.n	80072ca <_malloc_r+0xba>
 800729c:	1961      	adds	r1, r4, r5
 800729e:	42a3      	cmp	r3, r4
 80072a0:	6025      	str	r5, [r4, #0]
 80072a2:	bf18      	it	ne
 80072a4:	6059      	strne	r1, [r3, #4]
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	bf08      	it	eq
 80072aa:	6031      	streq	r1, [r6, #0]
 80072ac:	5162      	str	r2, [r4, r5]
 80072ae:	604b      	str	r3, [r1, #4]
 80072b0:	4638      	mov	r0, r7
 80072b2:	f104 060b 	add.w	r6, r4, #11
 80072b6:	f000 f9ed 	bl	8007694 <__malloc_unlock>
 80072ba:	f026 0607 	bic.w	r6, r6, #7
 80072be:	1d23      	adds	r3, r4, #4
 80072c0:	1af2      	subs	r2, r6, r3
 80072c2:	d0b6      	beq.n	8007232 <_malloc_r+0x22>
 80072c4:	1b9b      	subs	r3, r3, r6
 80072c6:	50a3      	str	r3, [r4, r2]
 80072c8:	e7b3      	b.n	8007232 <_malloc_r+0x22>
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	bf0c      	ite	eq
 80072d0:	6032      	streq	r2, [r6, #0]
 80072d2:	605a      	strne	r2, [r3, #4]
 80072d4:	e7ec      	b.n	80072b0 <_malloc_r+0xa0>
 80072d6:	4623      	mov	r3, r4
 80072d8:	6864      	ldr	r4, [r4, #4]
 80072da:	e7b2      	b.n	8007242 <_malloc_r+0x32>
 80072dc:	4634      	mov	r4, r6
 80072de:	6876      	ldr	r6, [r6, #4]
 80072e0:	e7b9      	b.n	8007256 <_malloc_r+0x46>
 80072e2:	230c      	movs	r3, #12
 80072e4:	4638      	mov	r0, r7
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	f000 f9d4 	bl	8007694 <__malloc_unlock>
 80072ec:	e7a1      	b.n	8007232 <_malloc_r+0x22>
 80072ee:	6025      	str	r5, [r4, #0]
 80072f0:	e7de      	b.n	80072b0 <_malloc_r+0xa0>
 80072f2:	bf00      	nop
 80072f4:	20000b44 	.word	0x20000b44

080072f8 <__ssputs_r>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	688e      	ldr	r6, [r1, #8]
 80072fe:	4682      	mov	sl, r0
 8007300:	429e      	cmp	r6, r3
 8007302:	460c      	mov	r4, r1
 8007304:	4690      	mov	r8, r2
 8007306:	461f      	mov	r7, r3
 8007308:	d838      	bhi.n	800737c <__ssputs_r+0x84>
 800730a:	898a      	ldrh	r2, [r1, #12]
 800730c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007310:	d032      	beq.n	8007378 <__ssputs_r+0x80>
 8007312:	6825      	ldr	r5, [r4, #0]
 8007314:	6909      	ldr	r1, [r1, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	eba5 0901 	sub.w	r9, r5, r1
 800731c:	6965      	ldr	r5, [r4, #20]
 800731e:	444b      	add	r3, r9
 8007320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007328:	106d      	asrs	r5, r5, #1
 800732a:	429d      	cmp	r5, r3
 800732c:	bf38      	it	cc
 800732e:	461d      	movcc	r5, r3
 8007330:	0553      	lsls	r3, r2, #21
 8007332:	d531      	bpl.n	8007398 <__ssputs_r+0xa0>
 8007334:	4629      	mov	r1, r5
 8007336:	f7ff ff6b 	bl	8007210 <_malloc_r>
 800733a:	4606      	mov	r6, r0
 800733c:	b950      	cbnz	r0, 8007354 <__ssputs_r+0x5c>
 800733e:	230c      	movs	r3, #12
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	f8ca 3000 	str.w	r3, [sl]
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007354:	464a      	mov	r2, r9
 8007356:	6921      	ldr	r1, [r4, #16]
 8007358:	f7ff fb4e 	bl	80069f8 <memcpy>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	6126      	str	r6, [r4, #16]
 800736a:	444e      	add	r6, r9
 800736c:	6026      	str	r6, [r4, #0]
 800736e:	463e      	mov	r6, r7
 8007370:	6165      	str	r5, [r4, #20]
 8007372:	eba5 0509 	sub.w	r5, r5, r9
 8007376:	60a5      	str	r5, [r4, #8]
 8007378:	42be      	cmp	r6, r7
 800737a:	d900      	bls.n	800737e <__ssputs_r+0x86>
 800737c:	463e      	mov	r6, r7
 800737e:	4632      	mov	r2, r6
 8007380:	4641      	mov	r1, r8
 8007382:	6820      	ldr	r0, [r4, #0]
 8007384:	f000 f966 	bl	8007654 <memmove>
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	2000      	movs	r0, #0
 800738c:	1b9b      	subs	r3, r3, r6
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	4433      	add	r3, r6
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	e7db      	b.n	8007350 <__ssputs_r+0x58>
 8007398:	462a      	mov	r2, r5
 800739a:	f000 f981 	bl	80076a0 <_realloc_r>
 800739e:	4606      	mov	r6, r0
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d1e1      	bne.n	8007368 <__ssputs_r+0x70>
 80073a4:	4650      	mov	r0, sl
 80073a6:	6921      	ldr	r1, [r4, #16]
 80073a8:	f7ff feca 	bl	8007140 <_free_r>
 80073ac:	e7c7      	b.n	800733e <__ssputs_r+0x46>
	...

080073b0 <_svfiprintf_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	4698      	mov	r8, r3
 80073b6:	898b      	ldrh	r3, [r1, #12]
 80073b8:	4607      	mov	r7, r0
 80073ba:	061b      	lsls	r3, r3, #24
 80073bc:	460d      	mov	r5, r1
 80073be:	4614      	mov	r4, r2
 80073c0:	b09d      	sub	sp, #116	; 0x74
 80073c2:	d50e      	bpl.n	80073e2 <_svfiprintf_r+0x32>
 80073c4:	690b      	ldr	r3, [r1, #16]
 80073c6:	b963      	cbnz	r3, 80073e2 <_svfiprintf_r+0x32>
 80073c8:	2140      	movs	r1, #64	; 0x40
 80073ca:	f7ff ff21 	bl	8007210 <_malloc_r>
 80073ce:	6028      	str	r0, [r5, #0]
 80073d0:	6128      	str	r0, [r5, #16]
 80073d2:	b920      	cbnz	r0, 80073de <_svfiprintf_r+0x2e>
 80073d4:	230c      	movs	r3, #12
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	e0d1      	b.n	8007582 <_svfiprintf_r+0x1d2>
 80073de:	2340      	movs	r3, #64	; 0x40
 80073e0:	616b      	str	r3, [r5, #20]
 80073e2:	2300      	movs	r3, #0
 80073e4:	9309      	str	r3, [sp, #36]	; 0x24
 80073e6:	2320      	movs	r3, #32
 80073e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ec:	2330      	movs	r3, #48	; 0x30
 80073ee:	f04f 0901 	mov.w	r9, #1
 80073f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800759c <_svfiprintf_r+0x1ec>
 80073fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073fe:	4623      	mov	r3, r4
 8007400:	469a      	mov	sl, r3
 8007402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007406:	b10a      	cbz	r2, 800740c <_svfiprintf_r+0x5c>
 8007408:	2a25      	cmp	r2, #37	; 0x25
 800740a:	d1f9      	bne.n	8007400 <_svfiprintf_r+0x50>
 800740c:	ebba 0b04 	subs.w	fp, sl, r4
 8007410:	d00b      	beq.n	800742a <_svfiprintf_r+0x7a>
 8007412:	465b      	mov	r3, fp
 8007414:	4622      	mov	r2, r4
 8007416:	4629      	mov	r1, r5
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ff6d 	bl	80072f8 <__ssputs_r>
 800741e:	3001      	adds	r0, #1
 8007420:	f000 80aa 	beq.w	8007578 <_svfiprintf_r+0x1c8>
 8007424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007426:	445a      	add	r2, fp
 8007428:	9209      	str	r2, [sp, #36]	; 0x24
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80a2 	beq.w	8007578 <_svfiprintf_r+0x1c8>
 8007434:	2300      	movs	r3, #0
 8007436:	f04f 32ff 	mov.w	r2, #4294967295
 800743a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743e:	f10a 0a01 	add.w	sl, sl, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800744a:	931a      	str	r3, [sp, #104]	; 0x68
 800744c:	4654      	mov	r4, sl
 800744e:	2205      	movs	r2, #5
 8007450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007454:	4851      	ldr	r0, [pc, #324]	; (800759c <_svfiprintf_r+0x1ec>)
 8007456:	f7ff fac1 	bl	80069dc <memchr>
 800745a:	9a04      	ldr	r2, [sp, #16]
 800745c:	b9d8      	cbnz	r0, 8007496 <_svfiprintf_r+0xe6>
 800745e:	06d0      	lsls	r0, r2, #27
 8007460:	bf44      	itt	mi
 8007462:	2320      	movmi	r3, #32
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007468:	0711      	lsls	r1, r2, #28
 800746a:	bf44      	itt	mi
 800746c:	232b      	movmi	r3, #43	; 0x2b
 800746e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007472:	f89a 3000 	ldrb.w	r3, [sl]
 8007476:	2b2a      	cmp	r3, #42	; 0x2a
 8007478:	d015      	beq.n	80074a6 <_svfiprintf_r+0xf6>
 800747a:	4654      	mov	r4, sl
 800747c:	2000      	movs	r0, #0
 800747e:	f04f 0c0a 	mov.w	ip, #10
 8007482:	9a07      	ldr	r2, [sp, #28]
 8007484:	4621      	mov	r1, r4
 8007486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800748a:	3b30      	subs	r3, #48	; 0x30
 800748c:	2b09      	cmp	r3, #9
 800748e:	d94e      	bls.n	800752e <_svfiprintf_r+0x17e>
 8007490:	b1b0      	cbz	r0, 80074c0 <_svfiprintf_r+0x110>
 8007492:	9207      	str	r2, [sp, #28]
 8007494:	e014      	b.n	80074c0 <_svfiprintf_r+0x110>
 8007496:	eba0 0308 	sub.w	r3, r0, r8
 800749a:	fa09 f303 	lsl.w	r3, r9, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	46a2      	mov	sl, r4
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	e7d2      	b.n	800744c <_svfiprintf_r+0x9c>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	1d19      	adds	r1, r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	9103      	str	r1, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfbb      	ittet	lt
 80074b2:	425b      	neglt	r3, r3
 80074b4:	f042 0202 	orrlt.w	r2, r2, #2
 80074b8:	9307      	strge	r3, [sp, #28]
 80074ba:	9307      	strlt	r3, [sp, #28]
 80074bc:	bfb8      	it	lt
 80074be:	9204      	strlt	r2, [sp, #16]
 80074c0:	7823      	ldrb	r3, [r4, #0]
 80074c2:	2b2e      	cmp	r3, #46	; 0x2e
 80074c4:	d10c      	bne.n	80074e0 <_svfiprintf_r+0x130>
 80074c6:	7863      	ldrb	r3, [r4, #1]
 80074c8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ca:	d135      	bne.n	8007538 <_svfiprintf_r+0x188>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	3402      	adds	r4, #2
 80074d0:	1d1a      	adds	r2, r3, #4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	9203      	str	r2, [sp, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bfb8      	it	lt
 80074da:	f04f 33ff 	movlt.w	r3, #4294967295
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80075a0 <_svfiprintf_r+0x1f0>
 80074e4:	2203      	movs	r2, #3
 80074e6:	4650      	mov	r0, sl
 80074e8:	7821      	ldrb	r1, [r4, #0]
 80074ea:	f7ff fa77 	bl	80069dc <memchr>
 80074ee:	b140      	cbz	r0, 8007502 <_svfiprintf_r+0x152>
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	eba0 000a 	sub.w	r0, r0, sl
 80074f6:	fa03 f000 	lsl.w	r0, r3, r0
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	3401      	adds	r4, #1
 80074fe:	4303      	orrs	r3, r0
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007506:	2206      	movs	r2, #6
 8007508:	4826      	ldr	r0, [pc, #152]	; (80075a4 <_svfiprintf_r+0x1f4>)
 800750a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800750e:	f7ff fa65 	bl	80069dc <memchr>
 8007512:	2800      	cmp	r0, #0
 8007514:	d038      	beq.n	8007588 <_svfiprintf_r+0x1d8>
 8007516:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <_svfiprintf_r+0x1f8>)
 8007518:	bb1b      	cbnz	r3, 8007562 <_svfiprintf_r+0x1b2>
 800751a:	9b03      	ldr	r3, [sp, #12]
 800751c:	3307      	adds	r3, #7
 800751e:	f023 0307 	bic.w	r3, r3, #7
 8007522:	3308      	adds	r3, #8
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007528:	4433      	add	r3, r6
 800752a:	9309      	str	r3, [sp, #36]	; 0x24
 800752c:	e767      	b.n	80073fe <_svfiprintf_r+0x4e>
 800752e:	460c      	mov	r4, r1
 8007530:	2001      	movs	r0, #1
 8007532:	fb0c 3202 	mla	r2, ip, r2, r3
 8007536:	e7a5      	b.n	8007484 <_svfiprintf_r+0xd4>
 8007538:	2300      	movs	r3, #0
 800753a:	f04f 0c0a 	mov.w	ip, #10
 800753e:	4619      	mov	r1, r3
 8007540:	3401      	adds	r4, #1
 8007542:	9305      	str	r3, [sp, #20]
 8007544:	4620      	mov	r0, r4
 8007546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800754a:	3a30      	subs	r2, #48	; 0x30
 800754c:	2a09      	cmp	r2, #9
 800754e:	d903      	bls.n	8007558 <_svfiprintf_r+0x1a8>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0c5      	beq.n	80074e0 <_svfiprintf_r+0x130>
 8007554:	9105      	str	r1, [sp, #20]
 8007556:	e7c3      	b.n	80074e0 <_svfiprintf_r+0x130>
 8007558:	4604      	mov	r4, r0
 800755a:	2301      	movs	r3, #1
 800755c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007560:	e7f0      	b.n	8007544 <_svfiprintf_r+0x194>
 8007562:	ab03      	add	r3, sp, #12
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	462a      	mov	r2, r5
 8007568:	4638      	mov	r0, r7
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <_svfiprintf_r+0x1fc>)
 800756c:	a904      	add	r1, sp, #16
 800756e:	f7fd ffcd 	bl	800550c <_printf_float>
 8007572:	1c42      	adds	r2, r0, #1
 8007574:	4606      	mov	r6, r0
 8007576:	d1d6      	bne.n	8007526 <_svfiprintf_r+0x176>
 8007578:	89ab      	ldrh	r3, [r5, #12]
 800757a:	065b      	lsls	r3, r3, #25
 800757c:	f53f af2c 	bmi.w	80073d8 <_svfiprintf_r+0x28>
 8007580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007582:	b01d      	add	sp, #116	; 0x74
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	ab03      	add	r3, sp, #12
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	462a      	mov	r2, r5
 800758e:	4638      	mov	r0, r7
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <_svfiprintf_r+0x1fc>)
 8007592:	a904      	add	r1, sp, #16
 8007594:	f7fe fa56 	bl	8005a44 <_printf_i>
 8007598:	e7eb      	b.n	8007572 <_svfiprintf_r+0x1c2>
 800759a:	bf00      	nop
 800759c:	0800a49c 	.word	0x0800a49c
 80075a0:	0800a4a2 	.word	0x0800a4a2
 80075a4:	0800a4a6 	.word	0x0800a4a6
 80075a8:	0800550d 	.word	0x0800550d
 80075ac:	080072f9 	.word	0x080072f9

080075b0 <_sbrk_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	2300      	movs	r3, #0
 80075b4:	4d05      	ldr	r5, [pc, #20]	; (80075cc <_sbrk_r+0x1c>)
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	f7fa fcce 	bl	8001f5c <_sbrk>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_sbrk_r+0x1a>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_sbrk_r+0x1a>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000b4c 	.word	0x20000b4c

080075d0 <__assert_func>:
 80075d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075d2:	4614      	mov	r4, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <__assert_func+0x2c>)
 80075d8:	4605      	mov	r5, r0
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68d8      	ldr	r0, [r3, #12]
 80075de:	b14c      	cbz	r4, 80075f4 <__assert_func+0x24>
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <__assert_func+0x30>)
 80075e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075e6:	9100      	str	r1, [sp, #0]
 80075e8:	462b      	mov	r3, r5
 80075ea:	4906      	ldr	r1, [pc, #24]	; (8007604 <__assert_func+0x34>)
 80075ec:	f000 f80e 	bl	800760c <fiprintf>
 80075f0:	f000 faaa 	bl	8007b48 <abort>
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <__assert_func+0x38>)
 80075f6:	461c      	mov	r4, r3
 80075f8:	e7f3      	b.n	80075e2 <__assert_func+0x12>
 80075fa:	bf00      	nop
 80075fc:	20000020 	.word	0x20000020
 8007600:	0800a4ad 	.word	0x0800a4ad
 8007604:	0800a4ba 	.word	0x0800a4ba
 8007608:	0800a4e8 	.word	0x0800a4e8

0800760c <fiprintf>:
 800760c:	b40e      	push	{r1, r2, r3}
 800760e:	b503      	push	{r0, r1, lr}
 8007610:	4601      	mov	r1, r0
 8007612:	ab03      	add	r3, sp, #12
 8007614:	4805      	ldr	r0, [pc, #20]	; (800762c <fiprintf+0x20>)
 8007616:	f853 2b04 	ldr.w	r2, [r3], #4
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f000 f895 	bl	800774c <_vfiprintf_r>
 8007622:	b002      	add	sp, #8
 8007624:	f85d eb04 	ldr.w	lr, [sp], #4
 8007628:	b003      	add	sp, #12
 800762a:	4770      	bx	lr
 800762c:	20000020 	.word	0x20000020

08007630 <__ascii_mbtowc>:
 8007630:	b082      	sub	sp, #8
 8007632:	b901      	cbnz	r1, 8007636 <__ascii_mbtowc+0x6>
 8007634:	a901      	add	r1, sp, #4
 8007636:	b142      	cbz	r2, 800764a <__ascii_mbtowc+0x1a>
 8007638:	b14b      	cbz	r3, 800764e <__ascii_mbtowc+0x1e>
 800763a:	7813      	ldrb	r3, [r2, #0]
 800763c:	600b      	str	r3, [r1, #0]
 800763e:	7812      	ldrb	r2, [r2, #0]
 8007640:	1e10      	subs	r0, r2, #0
 8007642:	bf18      	it	ne
 8007644:	2001      	movne	r0, #1
 8007646:	b002      	add	sp, #8
 8007648:	4770      	bx	lr
 800764a:	4610      	mov	r0, r2
 800764c:	e7fb      	b.n	8007646 <__ascii_mbtowc+0x16>
 800764e:	f06f 0001 	mvn.w	r0, #1
 8007652:	e7f8      	b.n	8007646 <__ascii_mbtowc+0x16>

08007654 <memmove>:
 8007654:	4288      	cmp	r0, r1
 8007656:	b510      	push	{r4, lr}
 8007658:	eb01 0402 	add.w	r4, r1, r2
 800765c:	d902      	bls.n	8007664 <memmove+0x10>
 800765e:	4284      	cmp	r4, r0
 8007660:	4623      	mov	r3, r4
 8007662:	d807      	bhi.n	8007674 <memmove+0x20>
 8007664:	1e43      	subs	r3, r0, #1
 8007666:	42a1      	cmp	r1, r4
 8007668:	d008      	beq.n	800767c <memmove+0x28>
 800766a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800766e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007672:	e7f8      	b.n	8007666 <memmove+0x12>
 8007674:	4601      	mov	r1, r0
 8007676:	4402      	add	r2, r0
 8007678:	428a      	cmp	r2, r1
 800767a:	d100      	bne.n	800767e <memmove+0x2a>
 800767c:	bd10      	pop	{r4, pc}
 800767e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007686:	e7f7      	b.n	8007678 <memmove+0x24>

08007688 <__malloc_lock>:
 8007688:	4801      	ldr	r0, [pc, #4]	; (8007690 <__malloc_lock+0x8>)
 800768a:	f000 bc19 	b.w	8007ec0 <__retarget_lock_acquire_recursive>
 800768e:	bf00      	nop
 8007690:	20000b50 	.word	0x20000b50

08007694 <__malloc_unlock>:
 8007694:	4801      	ldr	r0, [pc, #4]	; (800769c <__malloc_unlock+0x8>)
 8007696:	f000 bc14 	b.w	8007ec2 <__retarget_lock_release_recursive>
 800769a:	bf00      	nop
 800769c:	20000b50 	.word	0x20000b50

080076a0 <_realloc_r>:
 80076a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a4:	4680      	mov	r8, r0
 80076a6:	4614      	mov	r4, r2
 80076a8:	460e      	mov	r6, r1
 80076aa:	b921      	cbnz	r1, 80076b6 <_realloc_r+0x16>
 80076ac:	4611      	mov	r1, r2
 80076ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	f7ff bdad 	b.w	8007210 <_malloc_r>
 80076b6:	b92a      	cbnz	r2, 80076c4 <_realloc_r+0x24>
 80076b8:	f7ff fd42 	bl	8007140 <_free_r>
 80076bc:	4625      	mov	r5, r4
 80076be:	4628      	mov	r0, r5
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	f000 fc64 	bl	8007f90 <_malloc_usable_size_r>
 80076c8:	4284      	cmp	r4, r0
 80076ca:	4607      	mov	r7, r0
 80076cc:	d802      	bhi.n	80076d4 <_realloc_r+0x34>
 80076ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076d2:	d812      	bhi.n	80076fa <_realloc_r+0x5a>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4640      	mov	r0, r8
 80076d8:	f7ff fd9a 	bl	8007210 <_malloc_r>
 80076dc:	4605      	mov	r5, r0
 80076de:	2800      	cmp	r0, #0
 80076e0:	d0ed      	beq.n	80076be <_realloc_r+0x1e>
 80076e2:	42bc      	cmp	r4, r7
 80076e4:	4622      	mov	r2, r4
 80076e6:	4631      	mov	r1, r6
 80076e8:	bf28      	it	cs
 80076ea:	463a      	movcs	r2, r7
 80076ec:	f7ff f984 	bl	80069f8 <memcpy>
 80076f0:	4631      	mov	r1, r6
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7ff fd24 	bl	8007140 <_free_r>
 80076f8:	e7e1      	b.n	80076be <_realloc_r+0x1e>
 80076fa:	4635      	mov	r5, r6
 80076fc:	e7df      	b.n	80076be <_realloc_r+0x1e>

080076fe <__sfputc_r>:
 80076fe:	6893      	ldr	r3, [r2, #8]
 8007700:	b410      	push	{r4}
 8007702:	3b01      	subs	r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	6093      	str	r3, [r2, #8]
 8007708:	da07      	bge.n	800771a <__sfputc_r+0x1c>
 800770a:	6994      	ldr	r4, [r2, #24]
 800770c:	42a3      	cmp	r3, r4
 800770e:	db01      	blt.n	8007714 <__sfputc_r+0x16>
 8007710:	290a      	cmp	r1, #10
 8007712:	d102      	bne.n	800771a <__sfputc_r+0x1c>
 8007714:	bc10      	pop	{r4}
 8007716:	f000 b949 	b.w	80079ac <__swbuf_r>
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	1c58      	adds	r0, r3, #1
 800771e:	6010      	str	r0, [r2, #0]
 8007720:	7019      	strb	r1, [r3, #0]
 8007722:	4608      	mov	r0, r1
 8007724:	bc10      	pop	{r4}
 8007726:	4770      	bx	lr

08007728 <__sfputs_r>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	4606      	mov	r6, r0
 800772c:	460f      	mov	r7, r1
 800772e:	4614      	mov	r4, r2
 8007730:	18d5      	adds	r5, r2, r3
 8007732:	42ac      	cmp	r4, r5
 8007734:	d101      	bne.n	800773a <__sfputs_r+0x12>
 8007736:	2000      	movs	r0, #0
 8007738:	e007      	b.n	800774a <__sfputs_r+0x22>
 800773a:	463a      	mov	r2, r7
 800773c:	4630      	mov	r0, r6
 800773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007742:	f7ff ffdc 	bl	80076fe <__sfputc_r>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d1f3      	bne.n	8007732 <__sfputs_r+0xa>
 800774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800774c <_vfiprintf_r>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	460d      	mov	r5, r1
 8007752:	4614      	mov	r4, r2
 8007754:	4698      	mov	r8, r3
 8007756:	4606      	mov	r6, r0
 8007758:	b09d      	sub	sp, #116	; 0x74
 800775a:	b118      	cbz	r0, 8007764 <_vfiprintf_r+0x18>
 800775c:	6983      	ldr	r3, [r0, #24]
 800775e:	b90b      	cbnz	r3, 8007764 <_vfiprintf_r+0x18>
 8007760:	f000 fb10 	bl	8007d84 <__sinit>
 8007764:	4b89      	ldr	r3, [pc, #548]	; (800798c <_vfiprintf_r+0x240>)
 8007766:	429d      	cmp	r5, r3
 8007768:	d11b      	bne.n	80077a2 <_vfiprintf_r+0x56>
 800776a:	6875      	ldr	r5, [r6, #4]
 800776c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800776e:	07d9      	lsls	r1, r3, #31
 8007770:	d405      	bmi.n	800777e <_vfiprintf_r+0x32>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d402      	bmi.n	800777e <_vfiprintf_r+0x32>
 8007778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777a:	f000 fba1 	bl	8007ec0 <__retarget_lock_acquire_recursive>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	071b      	lsls	r3, r3, #28
 8007782:	d501      	bpl.n	8007788 <_vfiprintf_r+0x3c>
 8007784:	692b      	ldr	r3, [r5, #16]
 8007786:	b9eb      	cbnz	r3, 80077c4 <_vfiprintf_r+0x78>
 8007788:	4629      	mov	r1, r5
 800778a:	4630      	mov	r0, r6
 800778c:	f000 f96e 	bl	8007a6c <__swsetup_r>
 8007790:	b1c0      	cbz	r0, 80077c4 <_vfiprintf_r+0x78>
 8007792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007794:	07dc      	lsls	r4, r3, #31
 8007796:	d50e      	bpl.n	80077b6 <_vfiprintf_r+0x6a>
 8007798:	f04f 30ff 	mov.w	r0, #4294967295
 800779c:	b01d      	add	sp, #116	; 0x74
 800779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a2:	4b7b      	ldr	r3, [pc, #492]	; (8007990 <_vfiprintf_r+0x244>)
 80077a4:	429d      	cmp	r5, r3
 80077a6:	d101      	bne.n	80077ac <_vfiprintf_r+0x60>
 80077a8:	68b5      	ldr	r5, [r6, #8]
 80077aa:	e7df      	b.n	800776c <_vfiprintf_r+0x20>
 80077ac:	4b79      	ldr	r3, [pc, #484]	; (8007994 <_vfiprintf_r+0x248>)
 80077ae:	429d      	cmp	r5, r3
 80077b0:	bf08      	it	eq
 80077b2:	68f5      	ldreq	r5, [r6, #12]
 80077b4:	e7da      	b.n	800776c <_vfiprintf_r+0x20>
 80077b6:	89ab      	ldrh	r3, [r5, #12]
 80077b8:	0598      	lsls	r0, r3, #22
 80077ba:	d4ed      	bmi.n	8007798 <_vfiprintf_r+0x4c>
 80077bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077be:	f000 fb80 	bl	8007ec2 <__retarget_lock_release_recursive>
 80077c2:	e7e9      	b.n	8007798 <_vfiprintf_r+0x4c>
 80077c4:	2300      	movs	r3, #0
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24
 80077c8:	2320      	movs	r3, #32
 80077ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ce:	2330      	movs	r3, #48	; 0x30
 80077d0:	f04f 0901 	mov.w	r9, #1
 80077d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007998 <_vfiprintf_r+0x24c>
 80077dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e0:	4623      	mov	r3, r4
 80077e2:	469a      	mov	sl, r3
 80077e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077e8:	b10a      	cbz	r2, 80077ee <_vfiprintf_r+0xa2>
 80077ea:	2a25      	cmp	r2, #37	; 0x25
 80077ec:	d1f9      	bne.n	80077e2 <_vfiprintf_r+0x96>
 80077ee:	ebba 0b04 	subs.w	fp, sl, r4
 80077f2:	d00b      	beq.n	800780c <_vfiprintf_r+0xc0>
 80077f4:	465b      	mov	r3, fp
 80077f6:	4622      	mov	r2, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	4630      	mov	r0, r6
 80077fc:	f7ff ff94 	bl	8007728 <__sfputs_r>
 8007800:	3001      	adds	r0, #1
 8007802:	f000 80aa 	beq.w	800795a <_vfiprintf_r+0x20e>
 8007806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007808:	445a      	add	r2, fp
 800780a:	9209      	str	r2, [sp, #36]	; 0x24
 800780c:	f89a 3000 	ldrb.w	r3, [sl]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 80a2 	beq.w	800795a <_vfiprintf_r+0x20e>
 8007816:	2300      	movs	r3, #0
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007820:	f10a 0a01 	add.w	sl, sl, #1
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800782c:	931a      	str	r3, [sp, #104]	; 0x68
 800782e:	4654      	mov	r4, sl
 8007830:	2205      	movs	r2, #5
 8007832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007836:	4858      	ldr	r0, [pc, #352]	; (8007998 <_vfiprintf_r+0x24c>)
 8007838:	f7ff f8d0 	bl	80069dc <memchr>
 800783c:	9a04      	ldr	r2, [sp, #16]
 800783e:	b9d8      	cbnz	r0, 8007878 <_vfiprintf_r+0x12c>
 8007840:	06d1      	lsls	r1, r2, #27
 8007842:	bf44      	itt	mi
 8007844:	2320      	movmi	r3, #32
 8007846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784a:	0713      	lsls	r3, r2, #28
 800784c:	bf44      	itt	mi
 800784e:	232b      	movmi	r3, #43	; 0x2b
 8007850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007854:	f89a 3000 	ldrb.w	r3, [sl]
 8007858:	2b2a      	cmp	r3, #42	; 0x2a
 800785a:	d015      	beq.n	8007888 <_vfiprintf_r+0x13c>
 800785c:	4654      	mov	r4, sl
 800785e:	2000      	movs	r0, #0
 8007860:	f04f 0c0a 	mov.w	ip, #10
 8007864:	9a07      	ldr	r2, [sp, #28]
 8007866:	4621      	mov	r1, r4
 8007868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800786c:	3b30      	subs	r3, #48	; 0x30
 800786e:	2b09      	cmp	r3, #9
 8007870:	d94e      	bls.n	8007910 <_vfiprintf_r+0x1c4>
 8007872:	b1b0      	cbz	r0, 80078a2 <_vfiprintf_r+0x156>
 8007874:	9207      	str	r2, [sp, #28]
 8007876:	e014      	b.n	80078a2 <_vfiprintf_r+0x156>
 8007878:	eba0 0308 	sub.w	r3, r0, r8
 800787c:	fa09 f303 	lsl.w	r3, r9, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	46a2      	mov	sl, r4
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	e7d2      	b.n	800782e <_vfiprintf_r+0xe2>
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	1d19      	adds	r1, r3, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	9103      	str	r1, [sp, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfbb      	ittet	lt
 8007894:	425b      	neglt	r3, r3
 8007896:	f042 0202 	orrlt.w	r2, r2, #2
 800789a:	9307      	strge	r3, [sp, #28]
 800789c:	9307      	strlt	r3, [sp, #28]
 800789e:	bfb8      	it	lt
 80078a0:	9204      	strlt	r2, [sp, #16]
 80078a2:	7823      	ldrb	r3, [r4, #0]
 80078a4:	2b2e      	cmp	r3, #46	; 0x2e
 80078a6:	d10c      	bne.n	80078c2 <_vfiprintf_r+0x176>
 80078a8:	7863      	ldrb	r3, [r4, #1]
 80078aa:	2b2a      	cmp	r3, #42	; 0x2a
 80078ac:	d135      	bne.n	800791a <_vfiprintf_r+0x1ce>
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	3402      	adds	r4, #2
 80078b2:	1d1a      	adds	r2, r3, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	9203      	str	r2, [sp, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfb8      	it	lt
 80078bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c0:	9305      	str	r3, [sp, #20]
 80078c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800799c <_vfiprintf_r+0x250>
 80078c6:	2203      	movs	r2, #3
 80078c8:	4650      	mov	r0, sl
 80078ca:	7821      	ldrb	r1, [r4, #0]
 80078cc:	f7ff f886 	bl	80069dc <memchr>
 80078d0:	b140      	cbz	r0, 80078e4 <_vfiprintf_r+0x198>
 80078d2:	2340      	movs	r3, #64	; 0x40
 80078d4:	eba0 000a 	sub.w	r0, r0, sl
 80078d8:	fa03 f000 	lsl.w	r0, r3, r0
 80078dc:	9b04      	ldr	r3, [sp, #16]
 80078de:	3401      	adds	r4, #1
 80078e0:	4303      	orrs	r3, r0
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	2206      	movs	r2, #6
 80078ea:	482d      	ldr	r0, [pc, #180]	; (80079a0 <_vfiprintf_r+0x254>)
 80078ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f0:	f7ff f874 	bl	80069dc <memchr>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d03f      	beq.n	8007978 <_vfiprintf_r+0x22c>
 80078f8:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <_vfiprintf_r+0x258>)
 80078fa:	bb1b      	cbnz	r3, 8007944 <_vfiprintf_r+0x1f8>
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	3307      	adds	r3, #7
 8007900:	f023 0307 	bic.w	r3, r3, #7
 8007904:	3308      	adds	r3, #8
 8007906:	9303      	str	r3, [sp, #12]
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	443b      	add	r3, r7
 800790c:	9309      	str	r3, [sp, #36]	; 0x24
 800790e:	e767      	b.n	80077e0 <_vfiprintf_r+0x94>
 8007910:	460c      	mov	r4, r1
 8007912:	2001      	movs	r0, #1
 8007914:	fb0c 3202 	mla	r2, ip, r2, r3
 8007918:	e7a5      	b.n	8007866 <_vfiprintf_r+0x11a>
 800791a:	2300      	movs	r3, #0
 800791c:	f04f 0c0a 	mov.w	ip, #10
 8007920:	4619      	mov	r1, r3
 8007922:	3401      	adds	r4, #1
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	4620      	mov	r0, r4
 8007928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800792c:	3a30      	subs	r2, #48	; 0x30
 800792e:	2a09      	cmp	r2, #9
 8007930:	d903      	bls.n	800793a <_vfiprintf_r+0x1ee>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0c5      	beq.n	80078c2 <_vfiprintf_r+0x176>
 8007936:	9105      	str	r1, [sp, #20]
 8007938:	e7c3      	b.n	80078c2 <_vfiprintf_r+0x176>
 800793a:	4604      	mov	r4, r0
 800793c:	2301      	movs	r3, #1
 800793e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007942:	e7f0      	b.n	8007926 <_vfiprintf_r+0x1da>
 8007944:	ab03      	add	r3, sp, #12
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	462a      	mov	r2, r5
 800794a:	4630      	mov	r0, r6
 800794c:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <_vfiprintf_r+0x25c>)
 800794e:	a904      	add	r1, sp, #16
 8007950:	f7fd fddc 	bl	800550c <_printf_float>
 8007954:	4607      	mov	r7, r0
 8007956:	1c78      	adds	r0, r7, #1
 8007958:	d1d6      	bne.n	8007908 <_vfiprintf_r+0x1bc>
 800795a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800795c:	07d9      	lsls	r1, r3, #31
 800795e:	d405      	bmi.n	800796c <_vfiprintf_r+0x220>
 8007960:	89ab      	ldrh	r3, [r5, #12]
 8007962:	059a      	lsls	r2, r3, #22
 8007964:	d402      	bmi.n	800796c <_vfiprintf_r+0x220>
 8007966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007968:	f000 faab 	bl	8007ec2 <__retarget_lock_release_recursive>
 800796c:	89ab      	ldrh	r3, [r5, #12]
 800796e:	065b      	lsls	r3, r3, #25
 8007970:	f53f af12 	bmi.w	8007798 <_vfiprintf_r+0x4c>
 8007974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007976:	e711      	b.n	800779c <_vfiprintf_r+0x50>
 8007978:	ab03      	add	r3, sp, #12
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	462a      	mov	r2, r5
 800797e:	4630      	mov	r0, r6
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <_vfiprintf_r+0x25c>)
 8007982:	a904      	add	r1, sp, #16
 8007984:	f7fe f85e 	bl	8005a44 <_printf_i>
 8007988:	e7e4      	b.n	8007954 <_vfiprintf_r+0x208>
 800798a:	bf00      	nop
 800798c:	0800a614 	.word	0x0800a614
 8007990:	0800a634 	.word	0x0800a634
 8007994:	0800a5f4 	.word	0x0800a5f4
 8007998:	0800a49c 	.word	0x0800a49c
 800799c:	0800a4a2 	.word	0x0800a4a2
 80079a0:	0800a4a6 	.word	0x0800a4a6
 80079a4:	0800550d 	.word	0x0800550d
 80079a8:	08007729 	.word	0x08007729

080079ac <__swbuf_r>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	460e      	mov	r6, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	4605      	mov	r5, r0
 80079b4:	b118      	cbz	r0, 80079be <__swbuf_r+0x12>
 80079b6:	6983      	ldr	r3, [r0, #24]
 80079b8:	b90b      	cbnz	r3, 80079be <__swbuf_r+0x12>
 80079ba:	f000 f9e3 	bl	8007d84 <__sinit>
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <__swbuf_r+0x98>)
 80079c0:	429c      	cmp	r4, r3
 80079c2:	d12b      	bne.n	8007a1c <__swbuf_r+0x70>
 80079c4:	686c      	ldr	r4, [r5, #4]
 80079c6:	69a3      	ldr	r3, [r4, #24]
 80079c8:	60a3      	str	r3, [r4, #8]
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	071a      	lsls	r2, r3, #28
 80079ce:	d52f      	bpl.n	8007a30 <__swbuf_r+0x84>
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	b36b      	cbz	r3, 8007a30 <__swbuf_r+0x84>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	b2f6      	uxtb	r6, r6
 80079da:	1ac0      	subs	r0, r0, r3
 80079dc:	6963      	ldr	r3, [r4, #20]
 80079de:	4637      	mov	r7, r6
 80079e0:	4283      	cmp	r3, r0
 80079e2:	dc04      	bgt.n	80079ee <__swbuf_r+0x42>
 80079e4:	4621      	mov	r1, r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 f938 	bl	8007c5c <_fflush_r>
 80079ec:	bb30      	cbnz	r0, 8007a3c <__swbuf_r+0x90>
 80079ee:	68a3      	ldr	r3, [r4, #8]
 80079f0:	3001      	adds	r0, #1
 80079f2:	3b01      	subs	r3, #1
 80079f4:	60a3      	str	r3, [r4, #8]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	701e      	strb	r6, [r3, #0]
 80079fe:	6963      	ldr	r3, [r4, #20]
 8007a00:	4283      	cmp	r3, r0
 8007a02:	d004      	beq.n	8007a0e <__swbuf_r+0x62>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	07db      	lsls	r3, r3, #31
 8007a08:	d506      	bpl.n	8007a18 <__swbuf_r+0x6c>
 8007a0a:	2e0a      	cmp	r6, #10
 8007a0c:	d104      	bne.n	8007a18 <__swbuf_r+0x6c>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 f923 	bl	8007c5c <_fflush_r>
 8007a16:	b988      	cbnz	r0, 8007a3c <__swbuf_r+0x90>
 8007a18:	4638      	mov	r0, r7
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <__swbuf_r+0x9c>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	d101      	bne.n	8007a26 <__swbuf_r+0x7a>
 8007a22:	68ac      	ldr	r4, [r5, #8]
 8007a24:	e7cf      	b.n	80079c6 <__swbuf_r+0x1a>
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <__swbuf_r+0xa0>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	bf08      	it	eq
 8007a2c:	68ec      	ldreq	r4, [r5, #12]
 8007a2e:	e7ca      	b.n	80079c6 <__swbuf_r+0x1a>
 8007a30:	4621      	mov	r1, r4
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 f81a 	bl	8007a6c <__swsetup_r>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d0cb      	beq.n	80079d4 <__swbuf_r+0x28>
 8007a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a40:	e7ea      	b.n	8007a18 <__swbuf_r+0x6c>
 8007a42:	bf00      	nop
 8007a44:	0800a614 	.word	0x0800a614
 8007a48:	0800a634 	.word	0x0800a634
 8007a4c:	0800a5f4 	.word	0x0800a5f4

08007a50 <__ascii_wctomb>:
 8007a50:	4603      	mov	r3, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	b141      	cbz	r1, 8007a68 <__ascii_wctomb+0x18>
 8007a56:	2aff      	cmp	r2, #255	; 0xff
 8007a58:	d904      	bls.n	8007a64 <__ascii_wctomb+0x14>
 8007a5a:	228a      	movs	r2, #138	; 0x8a
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	4770      	bx	lr
 8007a64:	2001      	movs	r0, #1
 8007a66:	700a      	strb	r2, [r1, #0]
 8007a68:	4770      	bx	lr
	...

08007a6c <__swsetup_r>:
 8007a6c:	4b32      	ldr	r3, [pc, #200]	; (8007b38 <__swsetup_r+0xcc>)
 8007a6e:	b570      	push	{r4, r5, r6, lr}
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	4606      	mov	r6, r0
 8007a74:	460c      	mov	r4, r1
 8007a76:	b125      	cbz	r5, 8007a82 <__swsetup_r+0x16>
 8007a78:	69ab      	ldr	r3, [r5, #24]
 8007a7a:	b913      	cbnz	r3, 8007a82 <__swsetup_r+0x16>
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f000 f981 	bl	8007d84 <__sinit>
 8007a82:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <__swsetup_r+0xd0>)
 8007a84:	429c      	cmp	r4, r3
 8007a86:	d10f      	bne.n	8007aa8 <__swsetup_r+0x3c>
 8007a88:	686c      	ldr	r4, [r5, #4]
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a90:	0719      	lsls	r1, r3, #28
 8007a92:	d42c      	bmi.n	8007aee <__swsetup_r+0x82>
 8007a94:	06dd      	lsls	r5, r3, #27
 8007a96:	d411      	bmi.n	8007abc <__swsetup_r+0x50>
 8007a98:	2309      	movs	r3, #9
 8007a9a:	6033      	str	r3, [r6, #0]
 8007a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	e03e      	b.n	8007b26 <__swsetup_r+0xba>
 8007aa8:	4b25      	ldr	r3, [pc, #148]	; (8007b40 <__swsetup_r+0xd4>)
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	d101      	bne.n	8007ab2 <__swsetup_r+0x46>
 8007aae:	68ac      	ldr	r4, [r5, #8]
 8007ab0:	e7eb      	b.n	8007a8a <__swsetup_r+0x1e>
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <__swsetup_r+0xd8>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	bf08      	it	eq
 8007ab8:	68ec      	ldreq	r4, [r5, #12]
 8007aba:	e7e6      	b.n	8007a8a <__swsetup_r+0x1e>
 8007abc:	0758      	lsls	r0, r3, #29
 8007abe:	d512      	bpl.n	8007ae6 <__swsetup_r+0x7a>
 8007ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ac2:	b141      	cbz	r1, 8007ad6 <__swsetup_r+0x6a>
 8007ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ac8:	4299      	cmp	r1, r3
 8007aca:	d002      	beq.n	8007ad2 <__swsetup_r+0x66>
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff fb37 	bl	8007140 <_free_r>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f043 0308 	orr.w	r3, r3, #8
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	b94b      	cbnz	r3, 8007b06 <__swsetup_r+0x9a>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afc:	d003      	beq.n	8007b06 <__swsetup_r+0x9a>
 8007afe:	4621      	mov	r1, r4
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 fa05 	bl	8007f10 <__smakebuf_r>
 8007b06:	89a0      	ldrh	r0, [r4, #12]
 8007b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b0c:	f010 0301 	ands.w	r3, r0, #1
 8007b10:	d00a      	beq.n	8007b28 <__swsetup_r+0xbc>
 8007b12:	2300      	movs	r3, #0
 8007b14:	60a3      	str	r3, [r4, #8]
 8007b16:	6963      	ldr	r3, [r4, #20]
 8007b18:	425b      	negs	r3, r3
 8007b1a:	61a3      	str	r3, [r4, #24]
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	b943      	cbnz	r3, 8007b32 <__swsetup_r+0xc6>
 8007b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b24:	d1ba      	bne.n	8007a9c <__swsetup_r+0x30>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	0781      	lsls	r1, r0, #30
 8007b2a:	bf58      	it	pl
 8007b2c:	6963      	ldrpl	r3, [r4, #20]
 8007b2e:	60a3      	str	r3, [r4, #8]
 8007b30:	e7f4      	b.n	8007b1c <__swsetup_r+0xb0>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e7f7      	b.n	8007b26 <__swsetup_r+0xba>
 8007b36:	bf00      	nop
 8007b38:	20000020 	.word	0x20000020
 8007b3c:	0800a614 	.word	0x0800a614
 8007b40:	0800a634 	.word	0x0800a634
 8007b44:	0800a5f4 	.word	0x0800a5f4

08007b48 <abort>:
 8007b48:	2006      	movs	r0, #6
 8007b4a:	b508      	push	{r3, lr}
 8007b4c:	f000 fa50 	bl	8007ff0 <raise>
 8007b50:	2001      	movs	r0, #1
 8007b52:	f7fa f990 	bl	8001e76 <_exit>
	...

08007b58 <__sflush_r>:
 8007b58:	898a      	ldrh	r2, [r1, #12]
 8007b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	0710      	lsls	r0, r2, #28
 8007b60:	460c      	mov	r4, r1
 8007b62:	d457      	bmi.n	8007c14 <__sflush_r+0xbc>
 8007b64:	684b      	ldr	r3, [r1, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dc04      	bgt.n	8007b74 <__sflush_r+0x1c>
 8007b6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc01      	bgt.n	8007b74 <__sflush_r+0x1c>
 8007b70:	2000      	movs	r0, #0
 8007b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	d0fa      	beq.n	8007b70 <__sflush_r+0x18>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b80:	682f      	ldr	r7, [r5, #0]
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	d032      	beq.n	8007bec <__sflush_r+0x94>
 8007b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	075a      	lsls	r2, r3, #29
 8007b8c:	d505      	bpl.n	8007b9a <__sflush_r+0x42>
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	1ac0      	subs	r0, r0, r3
 8007b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b94:	b10b      	cbz	r3, 8007b9a <__sflush_r+0x42>
 8007b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b98:	1ac0      	subs	r0, r0, r3
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	6a21      	ldr	r1, [r4, #32]
 8007ba4:	47b0      	blx	r6
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	d106      	bne.n	8007bba <__sflush_r+0x62>
 8007bac:	6829      	ldr	r1, [r5, #0]
 8007bae:	291d      	cmp	r1, #29
 8007bb0:	d82c      	bhi.n	8007c0c <__sflush_r+0xb4>
 8007bb2:	4a29      	ldr	r2, [pc, #164]	; (8007c58 <__sflush_r+0x100>)
 8007bb4:	40ca      	lsrs	r2, r1
 8007bb6:	07d6      	lsls	r6, r2, #31
 8007bb8:	d528      	bpl.n	8007c0c <__sflush_r+0xb4>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6062      	str	r2, [r4, #4]
 8007bbe:	6922      	ldr	r2, [r4, #16]
 8007bc0:	04d9      	lsls	r1, r3, #19
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	d504      	bpl.n	8007bd0 <__sflush_r+0x78>
 8007bc6:	1c42      	adds	r2, r0, #1
 8007bc8:	d101      	bne.n	8007bce <__sflush_r+0x76>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	b903      	cbnz	r3, 8007bd0 <__sflush_r+0x78>
 8007bce:	6560      	str	r0, [r4, #84]	; 0x54
 8007bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd2:	602f      	str	r7, [r5, #0]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d0cb      	beq.n	8007b70 <__sflush_r+0x18>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__sflush_r+0x8e>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7ff faad 	bl	8007140 <_free_r>
 8007be6:	2000      	movs	r0, #0
 8007be8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bea:	e7c2      	b.n	8007b72 <__sflush_r+0x1a>
 8007bec:	6a21      	ldr	r1, [r4, #32]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b0      	blx	r6
 8007bf4:	1c41      	adds	r1, r0, #1
 8007bf6:	d1c7      	bne.n	8007b88 <__sflush_r+0x30>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c4      	beq.n	8007b88 <__sflush_r+0x30>
 8007bfe:	2b1d      	cmp	r3, #29
 8007c00:	d001      	beq.n	8007c06 <__sflush_r+0xae>
 8007c02:	2b16      	cmp	r3, #22
 8007c04:	d101      	bne.n	8007c0a <__sflush_r+0xb2>
 8007c06:	602f      	str	r7, [r5, #0]
 8007c08:	e7b2      	b.n	8007b70 <__sflush_r+0x18>
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	e7ae      	b.n	8007b72 <__sflush_r+0x1a>
 8007c14:	690f      	ldr	r7, [r1, #16]
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	d0aa      	beq.n	8007b70 <__sflush_r+0x18>
 8007c1a:	0793      	lsls	r3, r2, #30
 8007c1c:	bf18      	it	ne
 8007c1e:	2300      	movne	r3, #0
 8007c20:	680e      	ldr	r6, [r1, #0]
 8007c22:	bf08      	it	eq
 8007c24:	694b      	ldreq	r3, [r1, #20]
 8007c26:	1bf6      	subs	r6, r6, r7
 8007c28:	600f      	str	r7, [r1, #0]
 8007c2a:	608b      	str	r3, [r1, #8]
 8007c2c:	2e00      	cmp	r6, #0
 8007c2e:	dd9f      	ble.n	8007b70 <__sflush_r+0x18>
 8007c30:	4633      	mov	r3, r6
 8007c32:	463a      	mov	r2, r7
 8007c34:	4628      	mov	r0, r5
 8007c36:	6a21      	ldr	r1, [r4, #32]
 8007c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007c3c:	47e0      	blx	ip
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	dc06      	bgt.n	8007c50 <__sflush_r+0xf8>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	e790      	b.n	8007b72 <__sflush_r+0x1a>
 8007c50:	4407      	add	r7, r0
 8007c52:	1a36      	subs	r6, r6, r0
 8007c54:	e7ea      	b.n	8007c2c <__sflush_r+0xd4>
 8007c56:	bf00      	nop
 8007c58:	20400001 	.word	0x20400001

08007c5c <_fflush_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	4605      	mov	r5, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	b913      	cbnz	r3, 8007c6c <_fflush_r+0x10>
 8007c66:	2500      	movs	r5, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	b118      	cbz	r0, 8007c76 <_fflush_r+0x1a>
 8007c6e:	6983      	ldr	r3, [r0, #24]
 8007c70:	b90b      	cbnz	r3, 8007c76 <_fflush_r+0x1a>
 8007c72:	f000 f887 	bl	8007d84 <__sinit>
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <_fflush_r+0x6c>)
 8007c78:	429c      	cmp	r4, r3
 8007c7a:	d11b      	bne.n	8007cb4 <_fflush_r+0x58>
 8007c7c:	686c      	ldr	r4, [r5, #4]
 8007c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0ef      	beq.n	8007c66 <_fflush_r+0xa>
 8007c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c88:	07d0      	lsls	r0, r2, #31
 8007c8a:	d404      	bmi.n	8007c96 <_fflush_r+0x3a>
 8007c8c:	0599      	lsls	r1, r3, #22
 8007c8e:	d402      	bmi.n	8007c96 <_fflush_r+0x3a>
 8007c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c92:	f000 f915 	bl	8007ec0 <__retarget_lock_acquire_recursive>
 8007c96:	4628      	mov	r0, r5
 8007c98:	4621      	mov	r1, r4
 8007c9a:	f7ff ff5d 	bl	8007b58 <__sflush_r>
 8007c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	07da      	lsls	r2, r3, #31
 8007ca4:	d4e0      	bmi.n	8007c68 <_fflush_r+0xc>
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	059b      	lsls	r3, r3, #22
 8007caa:	d4dd      	bmi.n	8007c68 <_fflush_r+0xc>
 8007cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cae:	f000 f908 	bl	8007ec2 <__retarget_lock_release_recursive>
 8007cb2:	e7d9      	b.n	8007c68 <_fflush_r+0xc>
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <_fflush_r+0x70>)
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d101      	bne.n	8007cbe <_fflush_r+0x62>
 8007cba:	68ac      	ldr	r4, [r5, #8]
 8007cbc:	e7df      	b.n	8007c7e <_fflush_r+0x22>
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <_fflush_r+0x74>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	bf08      	it	eq
 8007cc4:	68ec      	ldreq	r4, [r5, #12]
 8007cc6:	e7da      	b.n	8007c7e <_fflush_r+0x22>
 8007cc8:	0800a614 	.word	0x0800a614
 8007ccc:	0800a634 	.word	0x0800a634
 8007cd0:	0800a5f4 	.word	0x0800a5f4

08007cd4 <std>:
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	b510      	push	{r4, lr}
 8007cd8:	4604      	mov	r4, r0
 8007cda:	e9c0 3300 	strd	r3, r3, [r0]
 8007cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ce2:	6083      	str	r3, [r0, #8]
 8007ce4:	8181      	strh	r1, [r0, #12]
 8007ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ce8:	81c2      	strh	r2, [r0, #14]
 8007cea:	6183      	str	r3, [r0, #24]
 8007cec:	4619      	mov	r1, r3
 8007cee:	2208      	movs	r2, #8
 8007cf0:	305c      	adds	r0, #92	; 0x5c
 8007cf2:	f7fd fb65 	bl	80053c0 <memset>
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <std+0x38>)
 8007cf8:	6224      	str	r4, [r4, #32]
 8007cfa:	6263      	str	r3, [r4, #36]	; 0x24
 8007cfc:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <std+0x3c>)
 8007cfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <std+0x40>)
 8007d02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <std+0x44>)
 8007d06:	6323      	str	r3, [r4, #48]	; 0x30
 8007d08:	bd10      	pop	{r4, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08008029 	.word	0x08008029
 8007d10:	0800804b 	.word	0x0800804b
 8007d14:	08008083 	.word	0x08008083
 8007d18:	080080a7 	.word	0x080080a7

08007d1c <_cleanup_r>:
 8007d1c:	4901      	ldr	r1, [pc, #4]	; (8007d24 <_cleanup_r+0x8>)
 8007d1e:	f000 b8af 	b.w	8007e80 <_fwalk_reent>
 8007d22:	bf00      	nop
 8007d24:	08007c5d 	.word	0x08007c5d

08007d28 <__sfmoreglue>:
 8007d28:	2268      	movs	r2, #104	; 0x68
 8007d2a:	b570      	push	{r4, r5, r6, lr}
 8007d2c:	1e4d      	subs	r5, r1, #1
 8007d2e:	4355      	muls	r5, r2
 8007d30:	460e      	mov	r6, r1
 8007d32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d36:	f7ff fa6b 	bl	8007210 <_malloc_r>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	b140      	cbz	r0, 8007d50 <__sfmoreglue+0x28>
 8007d3e:	2100      	movs	r1, #0
 8007d40:	e9c0 1600 	strd	r1, r6, [r0]
 8007d44:	300c      	adds	r0, #12
 8007d46:	60a0      	str	r0, [r4, #8]
 8007d48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d4c:	f7fd fb38 	bl	80053c0 <memset>
 8007d50:	4620      	mov	r0, r4
 8007d52:	bd70      	pop	{r4, r5, r6, pc}

08007d54 <__sfp_lock_acquire>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__sfp_lock_acquire+0x8>)
 8007d56:	f000 b8b3 	b.w	8007ec0 <__retarget_lock_acquire_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20000b51 	.word	0x20000b51

08007d60 <__sfp_lock_release>:
 8007d60:	4801      	ldr	r0, [pc, #4]	; (8007d68 <__sfp_lock_release+0x8>)
 8007d62:	f000 b8ae 	b.w	8007ec2 <__retarget_lock_release_recursive>
 8007d66:	bf00      	nop
 8007d68:	20000b51 	.word	0x20000b51

08007d6c <__sinit_lock_acquire>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__sinit_lock_acquire+0x8>)
 8007d6e:	f000 b8a7 	b.w	8007ec0 <__retarget_lock_acquire_recursive>
 8007d72:	bf00      	nop
 8007d74:	20000b52 	.word	0x20000b52

08007d78 <__sinit_lock_release>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__sinit_lock_release+0x8>)
 8007d7a:	f000 b8a2 	b.w	8007ec2 <__retarget_lock_release_recursive>
 8007d7e:	bf00      	nop
 8007d80:	20000b52 	.word	0x20000b52

08007d84 <__sinit>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	4604      	mov	r4, r0
 8007d88:	f7ff fff0 	bl	8007d6c <__sinit_lock_acquire>
 8007d8c:	69a3      	ldr	r3, [r4, #24]
 8007d8e:	b11b      	cbz	r3, 8007d98 <__sinit+0x14>
 8007d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d94:	f7ff bff0 	b.w	8007d78 <__sinit_lock_release>
 8007d98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d9c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <__sinit+0x68>)
 8007da0:	4a13      	ldr	r2, [pc, #76]	; (8007df0 <__sinit+0x6c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	bf08      	it	eq
 8007daa:	2301      	moveq	r3, #1
 8007dac:	4620      	mov	r0, r4
 8007dae:	bf08      	it	eq
 8007db0:	61a3      	streq	r3, [r4, #24]
 8007db2:	f000 f81f 	bl	8007df4 <__sfp>
 8007db6:	6060      	str	r0, [r4, #4]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 f81b 	bl	8007df4 <__sfp>
 8007dbe:	60a0      	str	r0, [r4, #8]
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 f817 	bl	8007df4 <__sfp>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2104      	movs	r1, #4
 8007dca:	60e0      	str	r0, [r4, #12]
 8007dcc:	6860      	ldr	r0, [r4, #4]
 8007dce:	f7ff ff81 	bl	8007cd4 <std>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	2109      	movs	r1, #9
 8007dd6:	68a0      	ldr	r0, [r4, #8]
 8007dd8:	f7ff ff7c 	bl	8007cd4 <std>
 8007ddc:	2202      	movs	r2, #2
 8007dde:	2112      	movs	r1, #18
 8007de0:	68e0      	ldr	r0, [r4, #12]
 8007de2:	f7ff ff77 	bl	8007cd4 <std>
 8007de6:	2301      	movs	r3, #1
 8007de8:	61a3      	str	r3, [r4, #24]
 8007dea:	e7d1      	b.n	8007d90 <__sinit+0xc>
 8007dec:	0800a27c 	.word	0x0800a27c
 8007df0:	08007d1d 	.word	0x08007d1d

08007df4 <__sfp>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	4607      	mov	r7, r0
 8007df8:	f7ff ffac 	bl	8007d54 <__sfp_lock_acquire>
 8007dfc:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <__sfp+0x84>)
 8007dfe:	681e      	ldr	r6, [r3, #0]
 8007e00:	69b3      	ldr	r3, [r6, #24]
 8007e02:	b913      	cbnz	r3, 8007e0a <__sfp+0x16>
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7ff ffbd 	bl	8007d84 <__sinit>
 8007e0a:	3648      	adds	r6, #72	; 0x48
 8007e0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	d503      	bpl.n	8007e1c <__sfp+0x28>
 8007e14:	6833      	ldr	r3, [r6, #0]
 8007e16:	b30b      	cbz	r3, 8007e5c <__sfp+0x68>
 8007e18:	6836      	ldr	r6, [r6, #0]
 8007e1a:	e7f7      	b.n	8007e0c <__sfp+0x18>
 8007e1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e20:	b9d5      	cbnz	r5, 8007e58 <__sfp+0x64>
 8007e22:	4b16      	ldr	r3, [pc, #88]	; (8007e7c <__sfp+0x88>)
 8007e24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e28:	60e3      	str	r3, [r4, #12]
 8007e2a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e2c:	f000 f847 	bl	8007ebe <__retarget_lock_init_recursive>
 8007e30:	f7ff ff96 	bl	8007d60 <__sfp_lock_release>
 8007e34:	2208      	movs	r2, #8
 8007e36:	4629      	mov	r1, r5
 8007e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e40:	6025      	str	r5, [r4, #0]
 8007e42:	61a5      	str	r5, [r4, #24]
 8007e44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e48:	f7fd faba 	bl	80053c0 <memset>
 8007e4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e54:	4620      	mov	r0, r4
 8007e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e58:	3468      	adds	r4, #104	; 0x68
 8007e5a:	e7d9      	b.n	8007e10 <__sfp+0x1c>
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	4638      	mov	r0, r7
 8007e60:	f7ff ff62 	bl	8007d28 <__sfmoreglue>
 8007e64:	4604      	mov	r4, r0
 8007e66:	6030      	str	r0, [r6, #0]
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1d5      	bne.n	8007e18 <__sfp+0x24>
 8007e6c:	f7ff ff78 	bl	8007d60 <__sfp_lock_release>
 8007e70:	230c      	movs	r3, #12
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	e7ee      	b.n	8007e54 <__sfp+0x60>
 8007e76:	bf00      	nop
 8007e78:	0800a27c 	.word	0x0800a27c
 8007e7c:	ffff0001 	.word	0xffff0001

08007e80 <_fwalk_reent>:
 8007e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e84:	4606      	mov	r6, r0
 8007e86:	4688      	mov	r8, r1
 8007e88:	2700      	movs	r7, #0
 8007e8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e92:	f1b9 0901 	subs.w	r9, r9, #1
 8007e96:	d505      	bpl.n	8007ea4 <_fwalk_reent+0x24>
 8007e98:	6824      	ldr	r4, [r4, #0]
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	d1f7      	bne.n	8007e8e <_fwalk_reent+0xe>
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea4:	89ab      	ldrh	r3, [r5, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d907      	bls.n	8007eba <_fwalk_reent+0x3a>
 8007eaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	d003      	beq.n	8007eba <_fwalk_reent+0x3a>
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	47c0      	blx	r8
 8007eb8:	4307      	orrs	r7, r0
 8007eba:	3568      	adds	r5, #104	; 0x68
 8007ebc:	e7e9      	b.n	8007e92 <_fwalk_reent+0x12>

08007ebe <__retarget_lock_init_recursive>:
 8007ebe:	4770      	bx	lr

08007ec0 <__retarget_lock_acquire_recursive>:
 8007ec0:	4770      	bx	lr

08007ec2 <__retarget_lock_release_recursive>:
 8007ec2:	4770      	bx	lr

08007ec4 <__swhatbuf_r>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	460e      	mov	r6, r1
 8007ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ecc:	4614      	mov	r4, r2
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	b096      	sub	sp, #88	; 0x58
 8007ed4:	da08      	bge.n	8007ee8 <__swhatbuf_r+0x24>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	061a      	lsls	r2, r3, #24
 8007ee0:	d410      	bmi.n	8007f04 <__swhatbuf_r+0x40>
 8007ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee6:	e00e      	b.n	8007f06 <__swhatbuf_r+0x42>
 8007ee8:	466a      	mov	r2, sp
 8007eea:	f000 f903 	bl	80080f4 <_fstat_r>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	dbf1      	blt.n	8007ed6 <__swhatbuf_r+0x12>
 8007ef2:	9a01      	ldr	r2, [sp, #4]
 8007ef4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007efc:	425a      	negs	r2, r3
 8007efe:	415a      	adcs	r2, r3
 8007f00:	602a      	str	r2, [r5, #0]
 8007f02:	e7ee      	b.n	8007ee2 <__swhatbuf_r+0x1e>
 8007f04:	2340      	movs	r3, #64	; 0x40
 8007f06:	2000      	movs	r0, #0
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	b016      	add	sp, #88	; 0x58
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f10 <__smakebuf_r>:
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f14:	079d      	lsls	r5, r3, #30
 8007f16:	4606      	mov	r6, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	d507      	bpl.n	8007f2c <__smakebuf_r+0x1c>
 8007f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	2301      	movs	r3, #1
 8007f26:	6163      	str	r3, [r4, #20]
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	466a      	mov	r2, sp
 8007f2e:	ab01      	add	r3, sp, #4
 8007f30:	f7ff ffc8 	bl	8007ec4 <__swhatbuf_r>
 8007f34:	9900      	ldr	r1, [sp, #0]
 8007f36:	4605      	mov	r5, r0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff f969 	bl	8007210 <_malloc_r>
 8007f3e:	b948      	cbnz	r0, 8007f54 <__smakebuf_r+0x44>
 8007f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f44:	059a      	lsls	r2, r3, #22
 8007f46:	d4ef      	bmi.n	8007f28 <__smakebuf_r+0x18>
 8007f48:	f023 0303 	bic.w	r3, r3, #3
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	e7e3      	b.n	8007f1c <__smakebuf_r+0xc>
 8007f54:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <__smakebuf_r+0x7c>)
 8007f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	6020      	str	r0, [r4, #0]
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	6120      	str	r0, [r4, #16]
 8007f66:	6163      	str	r3, [r4, #20]
 8007f68:	9b01      	ldr	r3, [sp, #4]
 8007f6a:	b15b      	cbz	r3, 8007f84 <__smakebuf_r+0x74>
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f72:	f000 f8d1 	bl	8008118 <_isatty_r>
 8007f76:	b128      	cbz	r0, 8007f84 <__smakebuf_r+0x74>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	89a0      	ldrh	r0, [r4, #12]
 8007f86:	4305      	orrs	r5, r0
 8007f88:	81a5      	strh	r5, [r4, #12]
 8007f8a:	e7cd      	b.n	8007f28 <__smakebuf_r+0x18>
 8007f8c:	08007d1d 	.word	0x08007d1d

08007f90 <_malloc_usable_size_r>:
 8007f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f94:	1f18      	subs	r0, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbc      	itt	lt
 8007f9a:	580b      	ldrlt	r3, [r1, r0]
 8007f9c:	18c0      	addlt	r0, r0, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_raise_r>:
 8007fa0:	291f      	cmp	r1, #31
 8007fa2:	b538      	push	{r3, r4, r5, lr}
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	d904      	bls.n	8007fb4 <_raise_r+0x14>
 8007faa:	2316      	movs	r3, #22
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fb6:	b112      	cbz	r2, 8007fbe <_raise_r+0x1e>
 8007fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fbc:	b94b      	cbnz	r3, 8007fd2 <_raise_r+0x32>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f830 	bl	8008024 <_getpid_r>
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	4620      	mov	r0, r4
 8007fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fce:	f000 b817 	b.w	8008000 <_kill_r>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d00a      	beq.n	8007fec <_raise_r+0x4c>
 8007fd6:	1c59      	adds	r1, r3, #1
 8007fd8:	d103      	bne.n	8007fe2 <_raise_r+0x42>
 8007fda:	2316      	movs	r3, #22
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7e7      	b.n	8007fb2 <_raise_r+0x12>
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fea:	4798      	blx	r3
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7e0      	b.n	8007fb2 <_raise_r+0x12>

08007ff0 <raise>:
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <raise+0xc>)
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	f7ff bfd3 	b.w	8007fa0 <_raise_r>
 8007ffa:	bf00      	nop
 8007ffc:	20000020 	.word	0x20000020

08008000 <_kill_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	2300      	movs	r3, #0
 8008004:	4d06      	ldr	r5, [pc, #24]	; (8008020 <_kill_r+0x20>)
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f7f9 ff22 	bl	8001e56 <_kill>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d102      	bne.n	800801c <_kill_r+0x1c>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b103      	cbz	r3, 800801c <_kill_r+0x1c>
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	bd38      	pop	{r3, r4, r5, pc}
 800801e:	bf00      	nop
 8008020:	20000b4c 	.word	0x20000b4c

08008024 <_getpid_r>:
 8008024:	f7f9 bf10 	b.w	8001e48 <_getpid>

08008028 <__sread>:
 8008028:	b510      	push	{r4, lr}
 800802a:	460c      	mov	r4, r1
 800802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008030:	f000 f894 	bl	800815c <_read_r>
 8008034:	2800      	cmp	r0, #0
 8008036:	bfab      	itete	ge
 8008038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800803a:	89a3      	ldrhlt	r3, [r4, #12]
 800803c:	181b      	addge	r3, r3, r0
 800803e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008042:	bfac      	ite	ge
 8008044:	6563      	strge	r3, [r4, #84]	; 0x54
 8008046:	81a3      	strhlt	r3, [r4, #12]
 8008048:	bd10      	pop	{r4, pc}

0800804a <__swrite>:
 800804a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804e:	461f      	mov	r7, r3
 8008050:	898b      	ldrh	r3, [r1, #12]
 8008052:	4605      	mov	r5, r0
 8008054:	05db      	lsls	r3, r3, #23
 8008056:	460c      	mov	r4, r1
 8008058:	4616      	mov	r6, r2
 800805a:	d505      	bpl.n	8008068 <__swrite+0x1e>
 800805c:	2302      	movs	r3, #2
 800805e:	2200      	movs	r2, #0
 8008060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008064:	f000 f868 	bl	8008138 <_lseek_r>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	4632      	mov	r2, r6
 800806c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	4628      	mov	r0, r5
 8008074:	463b      	mov	r3, r7
 8008076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807e:	f000 b817 	b.w	80080b0 <_write_r>

08008082 <__sseek>:
 8008082:	b510      	push	{r4, lr}
 8008084:	460c      	mov	r4, r1
 8008086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808a:	f000 f855 	bl	8008138 <_lseek_r>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	bf15      	itete	ne
 8008094:	6560      	strne	r0, [r4, #84]	; 0x54
 8008096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800809a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800809e:	81a3      	strheq	r3, [r4, #12]
 80080a0:	bf18      	it	ne
 80080a2:	81a3      	strhne	r3, [r4, #12]
 80080a4:	bd10      	pop	{r4, pc}

080080a6 <__sclose>:
 80080a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080aa:	f000 b813 	b.w	80080d4 <_close_r>
	...

080080b0 <_write_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4604      	mov	r4, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	4611      	mov	r1, r2
 80080b8:	2200      	movs	r2, #0
 80080ba:	4d05      	ldr	r5, [pc, #20]	; (80080d0 <_write_r+0x20>)
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7f9 ff00 	bl	8001ec4 <_write>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_write_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_write_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20000b4c 	.word	0x20000b4c

080080d4 <_close_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	2300      	movs	r3, #0
 80080d8:	4d05      	ldr	r5, [pc, #20]	; (80080f0 <_close_r+0x1c>)
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f9 ff0c 	bl	8001efc <_close>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_close_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_close_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20000b4c 	.word	0x20000b4c

080080f4 <_fstat_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	2300      	movs	r3, #0
 80080f8:	4d06      	ldr	r5, [pc, #24]	; (8008114 <_fstat_r+0x20>)
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	4611      	mov	r1, r2
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	f7f9 ff06 	bl	8001f12 <_fstat>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d102      	bne.n	8008110 <_fstat_r+0x1c>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b103      	cbz	r3, 8008110 <_fstat_r+0x1c>
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	20000b4c 	.word	0x20000b4c

08008118 <_isatty_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	2300      	movs	r3, #0
 800811c:	4d05      	ldr	r5, [pc, #20]	; (8008134 <_isatty_r+0x1c>)
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7f9 ff04 	bl	8001f30 <_isatty>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_isatty_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_isatty_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20000b4c 	.word	0x20000b4c

08008138 <_lseek_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	2200      	movs	r2, #0
 8008142:	4d05      	ldr	r5, [pc, #20]	; (8008158 <_lseek_r+0x20>)
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f9 fefc 	bl	8001f44 <_lseek>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_lseek_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_lseek_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000b4c 	.word	0x20000b4c

0800815c <_read_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	4611      	mov	r1, r2
 8008164:	2200      	movs	r2, #0
 8008166:	4d05      	ldr	r5, [pc, #20]	; (800817c <_read_r+0x20>)
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7f9 fe8d 	bl	8001e8a <_read>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_read_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_read_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	20000b4c 	.word	0x20000b4c

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
